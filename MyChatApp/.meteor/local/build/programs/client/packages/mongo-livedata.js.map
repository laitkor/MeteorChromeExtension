)]}'
{"version":3,"file":"\\packages\\mongo-livedata.js","sources":["mongo-livedata/local_collection_driver.js","mongo-livedata/collection.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qC;AACA,kB;AACA,8B;AACA,E;;AAEA,qD;AACA,6B;AACA,kD;AACA,2B;AACA,E;;AAEA,2C;AACA,+B;AACA,oB;AACA,c;AACA,iC;AACA,iB;AACA,4D;AACA,K;AACA,2C;AACA,4C;AACA,6E;AACA,6C;AACA,oE;AACA,G;AACA,G;;AAEA,Y;AACA,kD;;;;;;;;;;;;;;;;;;;AC5BA,sE;AACA,iE;;AAEA,8C;AACA,kB;AACA,4C;AACA,kE;;AAEA,iC;AACA,6E;AACA,6E;AACA,oE;AACA,gB;AACA,G;;AAEA,kD;AACA,oB;AACA,0E;AACA,G;;AAEA,mC;AACA,yE;AACA,sF;AACA,e;AACA,4B;AACA,oC;AACA,G;AACA,uE;AACA,0D;AACA,yC;AACA,G;AACA,sB;AACA,0B;AACA,2B;AACA,oB;AACA,uB;AACA,8B;AACA,c;;AAEA,iC;AACA,e;AACA,mC;AACA,wE;AACA,+D;AACA,M;AACA,U;AACA,gB;AACA,U;AACA,mC;AACA,wE;AACA,sB;AACA,M;AACA,U;AACA,G;;AAEA,qE;;AAEA,4C;AACA,yD;AACA,4B;AACA,8B;AACA,0C;AACA,2B;AACA,yC;AACA,M;AACA,qC;;AAEA,yB;AACA,qD;AACA,gD;AACA,uD;AACA,uE;AACA,Y;AACA,8C;AACA,K;AACA,G;;AAEA,kE;AACA,oB;;AAEA,2D;AACA,6D;AACA,qE;AACA,oC;AACA,mD;AACA,+E;AACA,mC;AACA,Q;AACA,+E;AACA,wE;AACA,0E;AACA,0E;AACA,+E;AACA,6E;AACA,yC;AACA,gD;AACA,2E;AACA,0E;AACA,gF;AACA,gF;AACA,gB;AACA,mC;AACA,4C;;AAEA,kB;AACA,sC;AACA,Q;;AAEA,yB;AACA,4E;AACA,8B;AACA,uD;AACA,oD;;AAEA,+E;AACA,2E;AACA,sC;AACA,oC;AACA,oC;AACA,yB;AACA,oB;AACA,+C;AACA,4B;AACA,6C;AACA,kB;AACA,kD;AACA,sD;AACA,W;AACA,iB;AACA,yC;AACA,oB;AACA,0F;AACA,W;AACA,wE;AACA,2C;AACA,mB;AACA,uF;AACA,2C;AACA,2C;AACA,mB;AACA,qE;AACA,uC;AACA,8B;AACA,sD;AACA,wC;AACA,qC;AACA,uC;AACA,yC;AACA,sB;AACA,mC;AACA,qC;AACA,2C;AACA,e;AACA,e;AACA,uD;AACA,W;AACA,gB;AACA,wE;AACA,S;;AAEA,Q;;AAEA,iD;AACA,8B;AACA,2C;AACA,Q;;AAEA,+E;AACA,+B;AACA,kC;AACA,yC;AACA,Q;AACA,sC;AACA,oD;AACA,O;AACA,O;;AAEA,Y;AACA,4E;AACA,G;;AAEA,gC;;AAEA,gB;AACA,6E;AACA,oC;AACA,gD;AACA,yB;AACA,wB;AACA,G;AACA,E;;AAEA,G;AACA,uB;AACA,G;;;AAGA,uC;;AAEA,qC;AACA,yB;AACA,gB;AACA,Q;AACA,qB;AACA,I;;AAEA,oC;AACA,oB;AACA,0B;AACA,4C;AACA,Y;AACA,2D;AACA,+D;AACA,oE;AACA,8D;AACA,4D;AACA,U;;AAEA,uB;AACA,kC;AACA,kB;AACA,K;AACA,I;;AAEA,4C;AACA,8D;AACA,8D;AACA,6C;AACA,oB;AACA,wC;AACA,iE;AACA,iE;AACA,I;;AAEA,+C;AACA,oB;AACA,wC;AACA,oE;AACA,oE;AACA,G;;AAEA,G;;AAEA,uE;AACA,6C;AACA,kC;AACA,wC;AACA,M;AACA,oC;AACA,0C;AACA,M;AACA,4B;AACA,kC;AACA,K;AACA,K;;AAEA,6E;AACA,kE;;AAEA,wD;AACA,kD;AACA,E;;AAEA,0E;AACA,+E;AACA,wE;AACA,sB;AACA,0D;AACA,mC;AACA,8C;AACA,+B;;AAEA,0D;AACA,2B;AACA,8B;;AAEA,e;AACA,0C;AACA,sE;AACA,kC;AACA,qD;AACA,yD;AACA,4D;AACA,iE;AACA,yC;AACA,uC;AACA,2C;AACA,K;AACA,sD;AACA,gD;AACA,4C;AACA,qD;AACA,S;AACA,Y;AACA,uB;AACA,K;AACA,K;AACA,a;AACA,E;;AAEA,qE;AACA,W;AACA,sD;AACA,uC;;AAEA,yC;AACA,wB;AACA,sE;AACA,oE;AACA,wB;AACA,wB;AACA,uB;AACA,wB;AACA,mB;AACA,qC;;AAEA,kB;AACA,E;;AAEA,8D;AACA,gE;AACA,2B;AACA,mE;AACA,6B;AACA,G;AACA,E;;AAEA,gE;AACA,0E;AACA,0E;AACA,gE;AACA,8E;AACA,iC;AACA,E;AACA,qE;AACA,6D;AACA,qE;AACA,oE;AACA,gF;AACA,gF;AACA,8E;AACA,gE;AACA,E;AACA,0D;AACA,6D;AACA,uB;AACA,E;AACA,gE;AACA,qE;AACA,iB;AACA,E;AACA,mE;AACA,oE;AACA,8D;AACA,kE;AACA,O;AACA,wD;AACA,kE;AACA,oB;AACA,oC;AACA,iB;AACA,iB;AACA,Y;;AAEA,iE;AACA,4B;;AAEA,4B;AACA,uB;AACA,uD;AACA,qD;AACA,sC;AACA,6B;AACA,+B;AACA,uD;AACA,iE;AACA,sG;AACA,c;AACA,8B;AACA,6E;AACA,4E;AACA,qC;AACA,qE;AACA,uD;AACA,2B;AACA,+B;AACA,W;AACA,S;AACA,yB;AACA,qD;AACA,S;AACA,O;AACA,Y;AACA,4D;;AAEA,8B;AACA,2E;AACA,+E;AACA,2E;AACA,wB;AACA,uD;AACA,yE;AACA,6E;AACA,mC;AACA,wD;AACA,+E;AACA,uE;AACA,kB;AACA,mD;AACA,W;AACA,S;AACA,O;AACA,K;;AAEA,uE;AACA,8D;AACA,mE;AACA,8B;AACA,kC;AACA,4B;AACA,S;AACA,wB;AACA,c;AACA,sB;AACA,O;AACA,M;;AAEA,wB;AACA,mB;AACA,kD;AACA,kF;AACA,Q;AACA,K;;AAEA,iE;AACA,mE;AACA,mB;;AAEA,mD;AACA,oE;;AAEA,yE;AACA,sE;AACA,qE;AACA,kE;AACA,uE;AACA,gB;AACA,+E;AACA,+E;AACA,gC;AACA,0C;AACA,kB;AACA,0E;AACA,U;AACA,O;;AAEA,sD;AACA,8E;AACA,6E;AACA,4E;AACA,8C;AACA,O;;AAEA,kD;AACA,mG;AACA,Q;;AAEA,Y;AACA,gE;AACA,qC;AACA,iC;AACA,W;AACA,6E;AACA,6E;AACA,gE;AACA,4E;AACA,8D;AACA,mB;AACA,uB;AACA,sB;AACA,sB;AACA,S;AACA,gB;AACA,O;AACA,K;;AAEA,oE;AACA,+E;AACA,uD;AACA,e;AACA,I;AACA,G;;AAEA,kE;AACA,mE;AACA,kB;AACA,oD;AACA,uB;AACA,iB;AACA,G;AACA,wC;AACA,2E;AACA,wB;AACA,E;;AAEA,6E;AACA,oC;AACA,sE;AACA,kB;AACA,qC;AACA,wE;AACA,gD;AACA,E;AACA,2D;AACA,kB;AACA,mC;AACA,sE;AACA,qC;AACA,E;AACA,2D;AACA,kB;AACA,uC;AACA,2E;AACA,oC;AACA,E;AACA,2E;AACA,kB;AACA,gD;AACA,mF;AACA,qD;AACA,E;;AAEA,uD;;AAEA,G;AACA,sC;AACA,G;;AAEA,uE;AACA,gB;AACA,E;AACA,yC;AACA,mD;AACA,E;AACA,4D;AACA,wD;AACA,qE;AACA,E;AACA,0C;AACA,uD;AACA,E;AACA,wB;AACA,uE;AACA,0D;AACA,E;AACA,kE;AACA,wB;AACA,qE;AACA,oE;AACA,uB;AACA,2E;AACA,6E;AACA,sC;AACA,E;AACA,8E;AACA,6E;AACA,mC;;AAEA,c;AACA,qD;AACA,oB;AACA,0E;AACA,4C;AACA,uC;AACA,+D;AACA,O;;AAEA,oB;AACA,4B;;AAEA,4D;AACA,0B;AACA,mD;AACA,yF;AACA,S;;AAEA,6E;AACA,uE;AACA,sB;AACA,8C;AACA,wE;AACA,gB;AACA,kE;AACA,+B;AACA,S;;AAEA,gE;AACA,O;AACA,O;;AAEA,sE;AACA,0E;AACA,6B;AACA,4D;AACA,+D;AACA,8E;AACA,O;AACA,uC;AACA,K;AACA,I;;AAEA,yD;AACA,8C;AACA,I;AACA,wD;AACA,6C;AACA,I;AACA,K;;;AAGA,iE;AACA,kB;;AAEA,qE;AACA,iE;AACA,2B;;AAEA,8E;AACA,4E;AACA,+E;AACA,uB;AACA,6B;;AAEA,sB;AACA,kC;AACA,kC;AACA,kC;AACA,oE;AACA,c;AACA,yB;AACA,I;;AAEA,kB;AACA,mC;;AAEA,gE;AACA,gC;AACA,wC;;AAEA,qB;AACA,yB;AACA,e;;AAEA,8D;AACA,uD;AACA,6E;AACA,sC;AACA,wC;AACA,a;AACA,6E;AACA,gF;AACA,+E;AACA,uE;AACA,2E;AACA,yE;AACA,Y;AACA,4E;AACA,yE;AACA,qE;AACA,qD;AACA,iC;AACA,8D;AACA,4C;AACA,W;;AAEA,kC;AACA,2E;AACA,iC;AACA,qC;AACA,wC;AACA,kD;AACA,sC;AACA,W;;AAEA,wE;;AAEA,kF;AACA,iC;AACA,kC;AACA,oD;;AAEA,iC;AACA,6D;AACA,8D;AACA,qC;AACA,8E;AACA,6D;AACA,a;;AAEA,qC;AACA,kF;AACA,sC;AACA,0D;AACA,+D;AACA,0C;AACA,qC;AACA,wC;AACA,6E;AACA,0E;AACA,kB;AACA,+E;AACA,4B;AACA,yD;AACA,W;AACA,qB;AACA,uE;AACA,sD;AACA,kB;AACA,oB;AACA,W;AACA,S;AACA,Q;AACA,O;AACA,iE;AACA,sD;AACA,oE;AACA,8D;AACA,kC;AACA,G;AACA,E;;;AAGA,8D;AACA,kB;;AAEA,yC;AACA,iB;AACA,uE;AACA,Y;AACA,6C;AACA,oE;AACA,oC;AACA,K;AACA,G;AACA,E;;AAEA,uD;AACA,kB;AACA,mC;AACA,8B;AACA,wB;AACA,E;;AAEA,4D;AACA,gB;AACA,4B;AACA,2B;AACA,gF;AACA,2E;AACA,+E;AACA,mD;AACA,yD;AACA,+B;AACA,4B;AACA,K;AACA,mC;AACA,G;AACA,a;AACA,E;;AAEA,qE;AACA,uE;AACA,kB;;AAEA,0B;AACA,wC;AACA,+D;AACA,yE;AACA,O;AACA,iD;AACA,G;AACA,wE;AACA,gE;AACA,0E;AACA,O;AACA,iD;AACA,G;;AAEA,0E;AACA,+B;AACA,2B;AACA,0B;;AAEA,sD;AACA,E;;AAEA,8C;AACA,0B;AACA,oC;AACA,a;AACA,E;;AAEA,uE;AACA,mE;AACA,kE;AACA,2C;AACA,wD;AACA,yC;AACA,kB;;AAEA,0B;;AAEA,8D;AACA,iE;;AAEA,2E;AACA,W;AACA,qB;AACA,+D;AACA,kE;;AAEA,4B;AACA,kB;AACA,yC;AACA,+B;AACA,6B;AACA,wJ;AACA,uD;AACA,6B;AACA,2F;AACA,Y;AACA,+C;AACA,6D;AACA,yB;AACA,sC;AACA,yD;;AAEA,mD;AACA,uC;AACA,6B;AACA,S;AACA,K;AACA,K;;AAEA,sC;AACA,yC;AACA,4B;AACA,wD;AACA,wC;AACA,O;AACA,G;;AAEA,4D;AACA,+B;AACA,a;;AAEA,mB;;AAEA,0B;AACA,wC;AACA,+D;AACA,sB;AACA,kD;AACA,4B;AACA,kC;AACA,4B;AACA,8B;AACA,O;AACA,iD;AACA,G;AACA,wE;AACA,gE;AACA,sB;AACA,kD;AACA,6B;AACA,mC;AACA,6B;AACA,+B;AACA,O;AACA,iD;AACA,G;;AAEA,4E;AACA,6E;AACA,+E;AACA,4B;;AAEA,sC;AACA,kD;AACA,E;;AAEA,iE;AACA,8D;AACA,oE;AACA,8D;AACA,uE;AACA,6D;AACA,iC;AACA,qE;AACA,6B;AACA,E;;AAEA,sE;AACA,8B;AACA,2E;AACA,kB;;AAEA,sC;AACA,yC;AACA,4B;AACA,wD;AACA,wC;AACA,O;AACA,G;;AAEA,4D;AACA,W;AACA,a;;AAEA,0B;AACA,wC;AACA,+D;AACA,2D;AACA,O;AACA,iD;AACA,G;AACA,wE;AACA,gE;AACA,4D;AACA,O;AACA,iD;AACA,G;;AAEA,4E;AACA,gF;AACA,8E;AACA,sC;;AAEA,kE;AACA,E","sourcesContent":["LocalCollectionDriver = function () {\r\n  var self = this;\r\n  self.noConnCollections = {};\r\n};\r\n\r\nvar ensureCollection = function (name, collections) {\r\n  if (!(name in collections))\r\n    collections[name] = new LocalCollection(name);\r\n  return collections[name];\r\n};\r\n\r\n_.extend(LocalCollectionDriver.prototype, {\r\n  open: function (name, conn) {\r\n    var self = this;\r\n    if (!name)\r\n      return new LocalCollection;\r\n    if (! conn) {\r\n      return ensureCollection(name, self.noConnCollections);\r\n    }\r\n    if (! conn._mongo_livedata_collections)\r\n      conn._mongo_livedata_collections = {};\r\n    // XXX is there a way to keep track of a connection's collections without\r\n    // dangling it off the connection object?\r\n    return ensureCollection(name, conn._mongo_livedata_collections);\r\n  }\r\n});\r\n\r\n// singleton\r\nLocalCollectionDriver = new LocalCollectionDriver;\r\n","// options.connection, if given, is a LivedataClient or LivedataServer\r\n// XXX presently there is no way to destroy/clean up a Collection\r\n\r\nMeteor.Collection = function (name, options) {\r\n  var self = this;\r\n  if (! (self instanceof Meteor.Collection))\r\n    throw new Error('use \"new\" to construct a Meteor.Collection');\r\n\r\n  if (!name && (name !== null)) {\r\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\r\n                  \"saved or synchronized over the network. (Pass null for \" +\r\n                  \"the collection name to turn off this warning.)\");\r\n    name = null;\r\n  }\r\n\r\n  if (name !== null && typeof name !== \"string\") {\r\n    throw new Error(\r\n      \"First argument to new Meteor.Collection must be a string or null\");\r\n  }\r\n\r\n  if (options && options.methods) {\r\n    // Backwards compatibility hack with original signature (which passed\r\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\r\n    // method.)\r\n    // XXX remove before 1.0\r\n    options = {connection: options};\r\n  }\r\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\r\n  if (options && options.manager && !options.connection) {\r\n    options.connection = options.manager;\r\n  }\r\n  options = _.extend({\r\n    connection: undefined,\r\n    idGeneration: 'STRING',\r\n    transform: null,\r\n    _driver: undefined,\r\n    _preventAutopublish: false\r\n  }, options);\r\n\r\n  switch (options.idGeneration) {\r\n  case 'MONGO':\r\n    self._makeNewID = function () {\r\n      var src = name ? DDP.randomStream('/collection/' + name) : Random;\r\n      return new Meteor.Collection.ObjectID(src.hexString(24));\r\n    };\r\n    break;\r\n  case 'STRING':\r\n  default:\r\n    self._makeNewID = function () {\r\n      var src = name ? DDP.randomStream('/collection/' + name) : Random;\r\n      return src.id();\r\n    };\r\n    break;\r\n  }\r\n\r\n  self._transform = LocalCollection.wrapTransform(options.transform);\r\n\r\n  if (! name || options.connection === null)\r\n    // note: nameless collections never have a connection\r\n    self._connection = null;\r\n  else if (options.connection)\r\n    self._connection = options.connection;\r\n  else if (Meteor.isClient)\r\n    self._connection = Meteor.connection;\r\n  else\r\n    self._connection = Meteor.server;\r\n\r\n  if (!options._driver) {\r\n    if (name && self._connection === Meteor.server &&\r\n        typeof MongoInternals !== \"undefined\" &&\r\n        MongoInternals.defaultRemoteCollectionDriver) {\r\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\r\n    } else {\r\n      options._driver = LocalCollectionDriver;\r\n    }\r\n  }\r\n\r\n  self._collection = options._driver.open(name, self._connection);\r\n  self._name = name;\r\n\r\n  if (self._connection && self._connection.registerStore) {\r\n    // OK, we're going to be a slave, replicating some remote\r\n    // database, except possibly with some temporary divergence while\r\n    // we have unacknowledged RPC's.\r\n    var ok = self._connection.registerStore(name, {\r\n      // Called at the beginning of a batch of updates. batchSize is the number\r\n      // of update calls to expect.\r\n      //\r\n      // XXX This interface is pretty janky. reset probably ought to go back to\r\n      // being its own function, and callers shouldn't have to calculate\r\n      // batchSize. The optimization of not calling pause/remove should be\r\n      // delayed until later: the first call to update() should buffer its\r\n      // message, and then we can either directly apply it at endUpdate time if\r\n      // it was the only update, or do pauseObservers/apply/apply at the next\r\n      // update() if there's another one.\r\n      beginUpdate: function (batchSize, reset) {\r\n        // pause observers so users don't see flicker when updating several\r\n        // objects at once (including the post-reconnect reset-and-reapply\r\n        // stage), and so that a re-sorting of a query can take advantage of the\r\n        // full _diffQuery moved calculation instead of applying change one at a\r\n        // time.\r\n        if (batchSize > 1 || reset)\r\n          self._collection.pauseObservers();\r\n\r\n        if (reset)\r\n          self._collection.remove({});\r\n      },\r\n\r\n      // Apply an update.\r\n      // XXX better specify this interface (not in terms of a wire message)?\r\n      update: function (msg) {\r\n        var mongoId = LocalCollection._idParse(msg.id);\r\n        var doc = self._collection.findOne(mongoId);\r\n\r\n        // Is this a \"replace the whole doc\" message coming from the quiescence\r\n        // of method writes to an object? (Note that 'undefined' is a valid\r\n        // value meaning \"remove it\".)\r\n        if (msg.msg === 'replace') {\r\n          var replace = msg.replace;\r\n          if (!replace) {\r\n            if (doc)\r\n              self._collection.remove(mongoId);\r\n          } else if (!doc) {\r\n            self._collection.insert(replace);\r\n          } else {\r\n            // XXX check that replace has no $ ops\r\n            self._collection.update(mongoId, replace);\r\n          }\r\n          return;\r\n        } else if (msg.msg === 'added') {\r\n          if (doc) {\r\n            throw new Error(\"Expected not to find a document already present for an add\");\r\n          }\r\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\r\n        } else if (msg.msg === 'removed') {\r\n          if (!doc)\r\n            throw new Error(\"Expected to find a document already present for removed\");\r\n          self._collection.remove(mongoId);\r\n        } else if (msg.msg === 'changed') {\r\n          if (!doc)\r\n            throw new Error(\"Expected to find a document to change\");\r\n          if (!_.isEmpty(msg.fields)) {\r\n            var modifier = {};\r\n            _.each(msg.fields, function (value, key) {\r\n              if (value === undefined) {\r\n                if (!modifier.$unset)\r\n                  modifier.$unset = {};\r\n                modifier.$unset[key] = 1;\r\n              } else {\r\n                if (!modifier.$set)\r\n                  modifier.$set = {};\r\n                modifier.$set[key] = value;\r\n              }\r\n            });\r\n            self._collection.update(mongoId, modifier);\r\n          }\r\n        } else {\r\n          throw new Error(\"I don't know how to deal with this message\");\r\n        }\r\n\r\n      },\r\n\r\n      // Called at the end of a batch of updates.\r\n      endUpdate: function () {\r\n        self._collection.resumeObservers();\r\n      },\r\n\r\n      // Called around method stub invocations to capture the original versions\r\n      // of modified documents.\r\n      saveOriginals: function () {\r\n        self._collection.saveOriginals();\r\n      },\r\n      retrieveOriginals: function () {\r\n        return self._collection.retrieveOriginals();\r\n      }\r\n    });\r\n\r\n    if (!ok)\r\n      throw new Error(\"There is already a collection named '\" + name + \"'\");\r\n  }\r\n\r\n  self._defineMutationMethods();\r\n\r\n  // autopublish\r\n  if (Package.autopublish && !options._preventAutopublish && self._connection\r\n      && self._connection.publish) {\r\n    self._connection.publish(null, function () {\r\n      return self.find();\r\n    }, {is_auto: true});\r\n  }\r\n};\r\n\r\n///\r\n/// Main collection API\r\n///\r\n\r\n\r\n_.extend(Meteor.Collection.prototype, {\r\n\r\n  _getFindSelector: function (args) {\r\n    if (args.length == 0)\r\n      return {};\r\n    else\r\n      return args[0];\r\n  },\r\n\r\n  _getFindOptions: function (args) {\r\n    var self = this;\r\n    if (args.length < 2) {\r\n      return { transform: self._transform };\r\n    } else {\r\n      check(args[1], Match.Optional(Match.ObjectIncluding({\r\n        fields: Match.Optional(Match.OneOf(Object, undefined)),\r\n        sort: Match.Optional(Match.OneOf(Object, Array, undefined)),\r\n        limit: Match.Optional(Match.OneOf(Number, undefined)),\r\n        skip: Match.Optional(Match.OneOf(Number, undefined))\r\n     })));\r\n\r\n      return _.extend({\r\n        transform: self._transform\r\n      }, args[1]);\r\n    }\r\n  },\r\n\r\n  find: function (/* selector, options */) {\r\n    // Collection.find() (return all docs) behaves differently\r\n    // from Collection.find(undefined) (return 0 docs).  so be\r\n    // careful about the length of arguments.\r\n    var self = this;\r\n    var argArray = _.toArray(arguments);\r\n    return self._collection.find(self._getFindSelector(argArray),\r\n                                 self._getFindOptions(argArray));\r\n  },\r\n\r\n  findOne: function (/* selector, options */) {\r\n    var self = this;\r\n    var argArray = _.toArray(arguments);\r\n    return self._collection.findOne(self._getFindSelector(argArray),\r\n                                    self._getFindOptions(argArray));\r\n  }\r\n\r\n});\r\n\r\nMeteor.Collection._publishCursor = function (cursor, sub, collection) {\r\n  var observeHandle = cursor.observeChanges({\r\n    added: function (id, fields) {\r\n      sub.added(collection, id, fields);\r\n    },\r\n    changed: function (id, fields) {\r\n      sub.changed(collection, id, fields);\r\n    },\r\n    removed: function (id) {\r\n      sub.removed(collection, id);\r\n    }\r\n  });\r\n\r\n  // We don't call sub.ready() here: it gets called in livedata_server, after\r\n  // possibly calling _publishCursor on multiple returned cursors.\r\n\r\n  // register stop callback (expects lambda w/ no args).\r\n  sub.onStop(function () {observeHandle.stop();});\r\n};\r\n\r\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\r\n// likely programmer error, and not what you want, particularly for destructive\r\n// operations.  JS regexps don't serialize over DDP but can be trivially\r\n// replaced by $regex.\r\nMeteor.Collection._rewriteSelector = function (selector) {\r\n  // shorthand -- scalars match _id\r\n  if (LocalCollection._selectorIsId(selector))\r\n    selector = {_id: selector};\r\n\r\n  if (!selector || (('_id' in selector) && !selector._id))\r\n    // can't match anything\r\n    return {_id: Random.id()};\r\n\r\n  var ret = {};\r\n  _.each(selector, function (value, key) {\r\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\r\n    if (value instanceof RegExp) {\r\n      ret[key] = convertRegexpToMongoSelector(value);\r\n    } else if (value && value.$regex instanceof RegExp) {\r\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\r\n      // if value is {$regex: /foo/, $options: ...} then $options\r\n      // override the ones set on $regex.\r\n      if (value.$options !== undefined)\r\n        ret[key].$options = value.$options;\r\n    }\r\n    else if (_.contains(['$or','$and','$nor'], key)) {\r\n      // Translate lower levels of $and/$or/$nor\r\n      ret[key] = _.map(value, function (v) {\r\n        return Meteor.Collection._rewriteSelector(v);\r\n      });\r\n    } else {\r\n      ret[key] = value;\r\n    }\r\n  });\r\n  return ret;\r\n};\r\n\r\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\r\n// selector\r\nvar convertRegexpToMongoSelector = function (regexp) {\r\n  check(regexp, RegExp); // safety belt\r\n\r\n  var selector = {$regex: regexp.source};\r\n  var regexOptions = '';\r\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\r\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\r\n  if (regexp.ignoreCase)\r\n    regexOptions += 'i';\r\n  if (regexp.multiline)\r\n    regexOptions += 'm';\r\n  if (regexOptions)\r\n    selector.$options = regexOptions;\r\n\r\n  return selector;\r\n};\r\n\r\nvar throwIfSelectorIsNotId = function (selector, methodName) {\r\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\r\n    throw new Meteor.Error(\r\n      403, \"Not permitted. Untrusted code may only \" + methodName +\r\n        \" documents by ID.\");\r\n  }\r\n};\r\n\r\n// 'insert' immediately returns the inserted document's new _id.\r\n// The others return values immediately if you are in a stub, an in-memory\r\n// unmanaged collection, or a mongo-backed collection and you don't pass a\r\n// callback. 'update' and 'remove' return the number of affected\r\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\r\n// insert happened, 'insertedId'.\r\n//\r\n// Otherwise, the semantics are exactly like other methods: they take\r\n// a callback as an optional last argument; if no callback is\r\n// provided, they block until the operation is complete, and throw an\r\n// exception if it fails; if a callback is provided, then they don't\r\n// necessarily block, and they call the callback when they finish with error and\r\n// result arguments.  (The insert method provides the document ID as its result;\r\n// update and remove provide the number of affected docs as the result; upsert\r\n// provides an object with numberAffected and maybe insertedId.)\r\n//\r\n// On the client, blocking is impossible, so if a callback\r\n// isn't provided, they just return immediately and any error\r\n// information is lost.\r\n//\r\n// There's one more tweak. On the client, if you don't provide a\r\n// callback, then if there is an error, a message will be logged with\r\n// Meteor._debug.\r\n//\r\n// The intent (though this is actually determined by the underlying\r\n// drivers) is that the operations should be done synchronously, not\r\n// generating their result until the database has acknowledged\r\n// them. In the future maybe we should provide a flag to turn this\r\n// off.\r\n_.each([\"insert\", \"update\", \"remove\"], function (name) {\r\n  Meteor.Collection.prototype[name] = function (/* arguments */) {\r\n    var self = this;\r\n    var args = _.toArray(arguments);\r\n    var callback;\r\n    var insertId;\r\n    var ret;\r\n\r\n    if (args.length && args[args.length - 1] instanceof Function)\r\n      callback = args.pop();\r\n\r\n    if (name === \"insert\") {\r\n      if (!args.length)\r\n        throw new Error(\"insert requires an argument\");\r\n      // shallow-copy the document and generate an ID\r\n      args[0] = _.extend({}, args[0]);\r\n      if ('_id' in args[0]) {\r\n        insertId = args[0]._id;\r\n        if (!insertId || !(typeof insertId === 'string'\r\n              || insertId instanceof Meteor.Collection.ObjectID))\r\n          throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\r\n      } else {\r\n        var generateId = true;\r\n        // Don't generate the id if we're the client and the 'outermost' call\r\n        // This optimization saves us passing both the randomSeed and the id\r\n        // Passing both is redundant.\r\n        if (self._connection && self._connection !== Meteor.server) {\r\n          var enclosing = DDP._CurrentInvocation.get();\r\n          if (!enclosing) {\r\n            generateId = false;\r\n          }\r\n        }\r\n        if (generateId) {\r\n          insertId = args[0]._id = self._makeNewID();\r\n        }\r\n      }\r\n    } else {\r\n      args[0] = Meteor.Collection._rewriteSelector(args[0]);\r\n\r\n      if (name === \"update\") {\r\n        // Mutate args but copy the original options object. We need to add\r\n        // insertedId to options, but don't want to mutate the caller's options\r\n        // object. We need to mutate `args` because we pass `args` into the\r\n        // driver below.\r\n        var options = args[2] = _.clone(args[2]) || {};\r\n        if (options && typeof options !== \"function\" && options.upsert) {\r\n          // set `insertedId` if absent.  `insertedId` is a Meteor extension.\r\n          if (options.insertedId) {\r\n            if (!(typeof options.insertedId === 'string'\r\n                  || options.insertedId instanceof Meteor.Collection.ObjectID))\r\n              throw new Error(\"insertedId must be string or ObjectID\");\r\n          } else {\r\n            options.insertedId = self._makeNewID();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // On inserts, always return the id that we generated; on all other\r\n    // operations, just return the result from the collection.\r\n    var chooseReturnValueFromCollectionResult = function (result) {\r\n      if (name === \"insert\") {\r\n        if (!insertId && result) {\r\n          insertId = result;\r\n        }\r\n        return insertId;\r\n      } else {\r\n        return result;\r\n      }\r\n    };\r\n\r\n    var wrappedCallback;\r\n    if (callback) {\r\n      wrappedCallback = function (error, result) {\r\n        callback(error, ! error && chooseReturnValueFromCollectionResult(result));\r\n      };\r\n    }\r\n\r\n    if (self._connection && self._connection !== Meteor.server) {\r\n      // just remote to another endpoint, propagate return value or\r\n      // exception.\r\n\r\n      var enclosing = DDP._CurrentInvocation.get();\r\n      var alreadyInSimulation = enclosing && enclosing.isSimulation;\r\n\r\n      if (Meteor.isClient && !wrappedCallback && ! alreadyInSimulation) {\r\n        // Client can't block, so it can't report errors by exception,\r\n        // only by callback. If they forget the callback, give them a\r\n        // default one that logs the error, so they aren't totally\r\n        // baffled if their writes don't work because their database is\r\n        // down.\r\n        // Don't give a default callback in simulation, because inside stubs we\r\n        // want to return the results from the local collection immediately and\r\n        // not force a callback.\r\n        wrappedCallback = function (err) {\r\n          if (err)\r\n            Meteor._debug(name + \" failed: \" + (err.reason || err.stack));\r\n        };\r\n      }\r\n\r\n      if (!alreadyInSimulation && name !== \"insert\") {\r\n        // If we're about to actually send an RPC, we should throw an error if\r\n        // this is a non-ID selector, because the mutation methods only allow\r\n        // single-ID selectors. (If we don't throw here, we'll see flicker.)\r\n        throwIfSelectorIsNotId(args[0], name);\r\n      }\r\n\r\n      ret = chooseReturnValueFromCollectionResult(\r\n        self._connection.apply(self._prefix + name, args, {returnStubValue: true}, wrappedCallback)\r\n      );\r\n\r\n    } else {\r\n      // it's my collection.  descend into the collection object\r\n      // and propagate any exception.\r\n      args.push(wrappedCallback);\r\n      try {\r\n        // If the user provided a callback and the collection implements this\r\n        // operation asynchronously, then queryRet will be undefined, and the\r\n        // result will be returned through the callback instead.\r\n        var queryRet = self._collection[name].apply(self._collection, args);\r\n        ret = chooseReturnValueFromCollectionResult(queryRet);\r\n      } catch (e) {\r\n        if (callback) {\r\n          callback(e);\r\n          return null;\r\n        }\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    // both sync and async, unless we threw an exception, return ret\r\n    // (new document ID for insert, num affected for update/remove, object with\r\n    // numberAffected and maybe insertedId for upsert).\r\n    return ret;\r\n  };\r\n});\r\n\r\nMeteor.Collection.prototype.upsert = function (selector, modifier,\r\n                                               options, callback) {\r\n  var self = this;\r\n  if (! callback && typeof options === \"function\") {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return self.update(selector, modifier,\r\n              _.extend({}, options, { _returnObject: true, upsert: true }),\r\n              callback);\r\n};\r\n\r\n// We'll actually design an index API later. For now, we just pass through to\r\n// Mongo's, but make it synchronous.\r\nMeteor.Collection.prototype._ensureIndex = function (index, options) {\r\n  var self = this;\r\n  if (!self._collection._ensureIndex)\r\n    throw new Error(\"Can only call _ensureIndex on server collections\");\r\n  self._collection._ensureIndex(index, options);\r\n};\r\nMeteor.Collection.prototype._dropIndex = function (index) {\r\n  var self = this;\r\n  if (!self._collection._dropIndex)\r\n    throw new Error(\"Can only call _dropIndex on server collections\");\r\n  self._collection._dropIndex(index);\r\n};\r\nMeteor.Collection.prototype._dropCollection = function () {\r\n  var self = this;\r\n  if (!self._collection.dropCollection)\r\n    throw new Error(\"Can only call _dropCollection on server collections\");\r\n  self._collection.dropCollection();\r\n};\r\nMeteor.Collection.prototype._createCappedCollection = function (byteSize) {\r\n  var self = this;\r\n  if (!self._collection._createCappedCollection)\r\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\r\n  self._collection._createCappedCollection(byteSize);\r\n};\r\n\r\nMeteor.Collection.ObjectID = LocalCollection._ObjectID;\r\n\r\n///\r\n/// Remote methods and access control.\r\n///\r\n\r\n// Restrict default mutators on collection. allow() and deny() take the\r\n// same options:\r\n//\r\n// options.insert {Function(userId, doc)}\r\n//   return true to allow/deny adding this document\r\n//\r\n// options.update {Function(userId, docs, fields, modifier)}\r\n//   return true to allow/deny updating these documents.\r\n//   `fields` is passed as an array of fields that are to be modified\r\n//\r\n// options.remove {Function(userId, docs)}\r\n//   return true to allow/deny removing these documents\r\n//\r\n// options.fetch {Array}\r\n//   Fields to fetch for these validators. If any call to allow or deny\r\n//   does not have this option then all fields are loaded.\r\n//\r\n// allow and deny can be called multiple times. The validators are\r\n// evaluated as follows:\r\n// - If neither deny() nor allow() has been called on the collection,\r\n//   then the request is allowed if and only if the \"insecure\" smart\r\n//   package is in use.\r\n// - Otherwise, if any deny() function returns true, the request is denied.\r\n// - Otherwise, if any allow() function returns true, the request is allowed.\r\n// - Otherwise, the request is denied.\r\n//\r\n// Meteor may call your deny() and allow() functions in any order, and may not\r\n// call all of them if it is able to make a decision without calling them all\r\n// (so don't include side effects).\r\n\r\n(function () {\r\n  var addValidator = function(allowOrDeny, options) {\r\n    // validate keys\r\n    var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform'];\r\n    _.each(_.keys(options), function (key) {\r\n      if (!_.contains(VALID_KEYS, key))\r\n        throw new Error(allowOrDeny + \": Invalid key: \" + key);\r\n    });\r\n\r\n    var self = this;\r\n    self._restricted = true;\r\n\r\n    _.each(['insert', 'update', 'remove'], function (name) {\r\n      if (options[name]) {\r\n        if (!(options[name] instanceof Function)) {\r\n          throw new Error(allowOrDeny + \": Value for `\" + name + \"` must be a function\");\r\n        }\r\n\r\n        // If the transform is specified at all (including as 'null') in this\r\n        // call, then take that; otherwise, take the transform from the\r\n        // collection.\r\n        if (options.transform === undefined) {\r\n          options[name].transform = self._transform;  // already wrapped\r\n        } else {\r\n          options[name].transform = LocalCollection.wrapTransform(\r\n            options.transform);\r\n        }\r\n\r\n        self._validators[name][allowOrDeny].push(options[name]);\r\n      }\r\n    });\r\n\r\n    // Only update the fetch fields if we're passed things that affect\r\n    // fetching. This way allow({}) and allow({insert: f}) don't result in\r\n    // setting fetchAllFields\r\n    if (options.update || options.remove || options.fetch) {\r\n      if (options.fetch && !(options.fetch instanceof Array)) {\r\n        throw new Error(allowOrDeny + \": Value for `fetch` must be an array\");\r\n      }\r\n      self._updateFetch(options.fetch);\r\n    }\r\n  };\r\n\r\n  Meteor.Collection.prototype.allow = function(options) {\r\n    addValidator.call(this, 'allow', options);\r\n  };\r\n  Meteor.Collection.prototype.deny = function(options) {\r\n    addValidator.call(this, 'deny', options);\r\n  };\r\n})();\r\n\r\n\r\nMeteor.Collection.prototype._defineMutationMethods = function() {\r\n  var self = this;\r\n\r\n  // set to true once we call any allow or deny methods. If true, use\r\n  // allow/deny semantics. If false, use insecure mode semantics.\r\n  self._restricted = false;\r\n\r\n  // Insecure mode (default to allowing writes). Defaults to 'undefined' which\r\n  // means insecure iff the insecure package is loaded. This property can be\r\n  // overriden by tests or packages wishing to change insecure mode behavior of\r\n  // their collections.\r\n  self._insecure = undefined;\r\n\r\n  self._validators = {\r\n    insert: {allow: [], deny: []},\r\n    update: {allow: [], deny: []},\r\n    remove: {allow: [], deny: []},\r\n    upsert: {allow: [], deny: []}, // dummy arrays; can't set these!\r\n    fetch: [],\r\n    fetchAllFields: false\r\n  };\r\n\r\n  if (!self._name)\r\n    return; // anonymous collection\r\n\r\n  // XXX Think about method namespacing. Maybe methods should be\r\n  // \"Meteor:Mongo:insert/NAME\"?\r\n  self._prefix = '/' + self._name + '/';\r\n\r\n  // mutation methods\r\n  if (self._connection) {\r\n    var m = {};\r\n\r\n    _.each(['insert', 'update', 'remove'], function (method) {\r\n      m[self._prefix + method] = function (/* ... */) {\r\n        // All the methods do their own validation, instead of using check().\r\n        check(arguments, [Match.Any]);\r\n        var args = _.toArray(arguments);\r\n        try {\r\n          // For an insert, if the client didn't specify an _id, generate one\r\n          // now; because this uses DDP.randomStream, it will be consistent with\r\n          // what the client generated. We generate it now rather than later so\r\n          // that if (eg) an allow/deny rule does an insert to the same\r\n          // collection (not that it really should), the generated _id will\r\n          // still be the first use of the stream and will be consistent.\r\n          //\r\n          // However, we don't actually stick the _id onto the document yet,\r\n          // because we want allow/deny rules to be able to differentiate\r\n          // between arbitrary client-specified _id fields and merely\r\n          // client-controlled-via-randomSeed fields.\r\n          var generatedId = null;\r\n          if (method === \"insert\" && !_.has(args[0], '_id')) {\r\n            generatedId = self._makeNewID();\r\n          }\r\n\r\n          if (this.isSimulation) {\r\n            // In a client simulation, you can do any mutation (even with a\r\n            // complex selector).\r\n            if (generatedId !== null)\r\n              args[0]._id = generatedId;\r\n            return self._collection[method].apply(\r\n              self._collection, args);\r\n          }\r\n\r\n          // This is the server receiving a method call from the client.\r\n\r\n          // We don't allow arbitrary selectors in mutations from the client: only\r\n          // single-ID selectors.\r\n          if (method !== 'insert')\r\n            throwIfSelectorIsNotId(args[0], method);\r\n\r\n          if (self._restricted) {\r\n            // short circuit if there is no way it will pass.\r\n            if (self._validators[method].allow.length === 0) {\r\n              throw new Meteor.Error(\r\n                403, \"Access denied. No allow validators set on restricted \" +\r\n                  \"collection for method '\" + method + \"'.\");\r\n            }\r\n\r\n            var validatedMethodName =\r\n                  '_validated' + method.charAt(0).toUpperCase() + method.slice(1);\r\n            args.unshift(this.userId);\r\n            method === 'insert' && args.push(generatedId);\r\n            return self[validatedMethodName].apply(self, args);\r\n          } else if (self._isInsecure()) {\r\n            if (generatedId !== null)\r\n              args[0]._id = generatedId;\r\n            // In insecure mode, allow any mutation (with a simple selector).\r\n            return self._collection[method].apply(self._collection, args);\r\n          } else {\r\n            // In secure mode, if we haven't called allow or deny, then nothing\r\n            // is permitted.\r\n            throw new Meteor.Error(403, \"Access denied\");\r\n          }\r\n        } catch (e) {\r\n          if (e.name === 'MongoError' || e.name === 'MinimongoError') {\r\n            throw new Meteor.Error(409, e.toString());\r\n          } else {\r\n            throw e;\r\n          }\r\n        }\r\n      };\r\n    });\r\n    // Minimongo on the server gets no stubs; instead, by default\r\n    // it wait()s until its result is ready, yielding.\r\n    // This matches the behavior of macromongo on the server better.\r\n    if (Meteor.isClient || self._connection === Meteor.server)\r\n      self._connection.methods(m);\r\n  }\r\n};\r\n\r\n\r\nMeteor.Collection.prototype._updateFetch = function (fields) {\r\n  var self = this;\r\n\r\n  if (!self._validators.fetchAllFields) {\r\n    if (fields) {\r\n      self._validators.fetch = _.union(self._validators.fetch, fields);\r\n    } else {\r\n      self._validators.fetchAllFields = true;\r\n      // clear fetch just to make sure we don't accidentally read it\r\n      self._validators.fetch = null;\r\n    }\r\n  }\r\n};\r\n\r\nMeteor.Collection.prototype._isInsecure = function () {\r\n  var self = this;\r\n  if (self._insecure === undefined)\r\n    return !!Package.insecure;\r\n  return self._insecure;\r\n};\r\n\r\nvar docToValidate = function (validator, doc, generatedId) {\r\n  var ret = doc;\r\n  if (validator.transform) {\r\n    ret = EJSON.clone(doc);\r\n    // If you set a server-side transform on your collection, then you don't get\r\n    // to tell the difference between \"client specified the ID\" and \"server\r\n    // generated the ID\", because transforms expect to get _id.  If you want to\r\n    // do that check, you can do it with a specific\r\n    // `C.allow({insert: f, transform: null})` validator.\r\n    if (generatedId !== null) {\r\n      ret._id = generatedId;\r\n    }\r\n    ret = validator.transform(ret);\r\n  }\r\n  return ret;\r\n};\r\n\r\nMeteor.Collection.prototype._validatedInsert = function (userId, doc,\r\n                                                         generatedId) {\r\n  var self = this;\r\n\r\n  // call user validators.\r\n  // Any deny returns true means denied.\r\n  if (_.any(self._validators.insert.deny, function(validator) {\r\n    return validator(userId, docToValidate(validator, doc, generatedId));\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n  // Any allow returns true means proceed. Throw error if they all fail.\r\n  if (_.all(self._validators.insert.allow, function(validator) {\r\n    return !validator(userId, docToValidate(validator, doc, generatedId));\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n\r\n  // If we generated an ID above, insert it now: after the validation, but\r\n  // before actually inserting.\r\n  if (generatedId !== null)\r\n    doc._id = generatedId;\r\n\r\n  self._collection.insert.call(self._collection, doc);\r\n};\r\n\r\nvar transformDoc = function (validator, doc) {\r\n  if (validator.transform)\r\n    return validator.transform(doc);\r\n  return doc;\r\n};\r\n\r\n// Simulate a mongo `update` operation while validating that the access\r\n// control rules set by calls to `allow/deny` are satisfied. If all\r\n// pass, rewrite the mongo operation to use $in to set the list of\r\n// document ids to change ##ValidatedChange\r\nMeteor.Collection.prototype._validatedUpdate = function(\r\n    userId, selector, mutator, options) {\r\n  var self = this;\r\n\r\n  options = options || {};\r\n\r\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector))\r\n    throw new Error(\"validated update should be of a single ID\");\r\n\r\n  // We don't support upserts because they don't fit nicely into allow/deny\r\n  // rules.\r\n  if (options.upsert)\r\n    throw new Meteor.Error(403, \"Access denied. Upserts not \" +\r\n                           \"allowed in a restricted collection.\");\r\n\r\n  // compute modified fields\r\n  var fields = [];\r\n  _.each(mutator, function (params, op) {\r\n    if (op.charAt(0) !== '$') {\r\n      throw new Meteor.Error(\r\n        403, \"Access denied. In a restricted collection you can only update documents, not replace them. Use a Mongo update operator, such as '$set'.\");\r\n    } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {\r\n      throw new Meteor.Error(\r\n        403, \"Access denied. Operator \" + op + \" not allowed in a restricted collection.\");\r\n    } else {\r\n      _.each(_.keys(params), function (field) {\r\n        // treat dotted fields as if they are replacing their\r\n        // top-level part\r\n        if (field.indexOf('.') !== -1)\r\n          field = field.substring(0, field.indexOf('.'));\r\n\r\n        // record the field we are trying to change\r\n        if (!_.contains(fields, field))\r\n          fields.push(field);\r\n      });\r\n    }\r\n  });\r\n\r\n  var findOptions = {transform: null};\r\n  if (!self._validators.fetchAllFields) {\r\n    findOptions.fields = {};\r\n    _.each(self._validators.fetch, function(fieldName) {\r\n      findOptions.fields[fieldName] = 1;\r\n    });\r\n  }\r\n\r\n  var doc = self._collection.findOne(selector, findOptions);\r\n  if (!doc)  // none satisfied!\r\n    return 0;\r\n\r\n  var factoriedDoc;\r\n\r\n  // call user validators.\r\n  // Any deny returns true means denied.\r\n  if (_.any(self._validators.update.deny, function(validator) {\r\n    if (!factoriedDoc)\r\n      factoriedDoc = transformDoc(validator, doc);\r\n    return validator(userId,\r\n                     factoriedDoc,\r\n                     fields,\r\n                     mutator);\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n  // Any allow returns true means proceed. Throw error if they all fail.\r\n  if (_.all(self._validators.update.allow, function(validator) {\r\n    if (!factoriedDoc)\r\n      factoriedDoc = transformDoc(validator, doc);\r\n    return !validator(userId,\r\n                      factoriedDoc,\r\n                      fields,\r\n                      mutator);\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n\r\n  // Back when we supported arbitrary client-provided selectors, we actually\r\n  // rewrote the selector to include an _id clause before passing to Mongo to\r\n  // avoid races, but since selector is guaranteed to already just be an ID, we\r\n  // don't have to any more.\r\n\r\n  return self._collection.update.call(\r\n    self._collection, selector, mutator, options);\r\n};\r\n\r\n// Only allow these operations in validated updates. Specifically\r\n// whitelist operations, rather than blacklist, so new complex\r\n// operations that are added aren't automatically allowed. A complex\r\n// operation is one that does more than just modify its target\r\n// field. For now this contains all update operations except '$rename'.\r\n// http://docs.mongodb.org/manual/reference/operators/#update\r\nvar ALLOWED_UPDATE_OPERATIONS = {\r\n  $inc:1, $set:1, $unset:1, $addToSet:1, $pop:1, $pullAll:1, $pull:1,\r\n  $pushAll:1, $push:1, $bit:1\r\n};\r\n\r\n// Simulate a mongo `remove` operation while validating access control\r\n// rules. See #ValidatedChange\r\nMeteor.Collection.prototype._validatedRemove = function(userId, selector) {\r\n  var self = this;\r\n\r\n  var findOptions = {transform: null};\r\n  if (!self._validators.fetchAllFields) {\r\n    findOptions.fields = {};\r\n    _.each(self._validators.fetch, function(fieldName) {\r\n      findOptions.fields[fieldName] = 1;\r\n    });\r\n  }\r\n\r\n  var doc = self._collection.findOne(selector, findOptions);\r\n  if (!doc)\r\n    return 0;\r\n\r\n  // call user validators.\r\n  // Any deny returns true means denied.\r\n  if (_.any(self._validators.remove.deny, function(validator) {\r\n    return validator(userId, transformDoc(validator, doc));\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n  // Any allow returns true means proceed. Throw error if they all fail.\r\n  if (_.all(self._validators.remove.allow, function(validator) {\r\n    return !validator(userId, transformDoc(validator, doc));\r\n  })) {\r\n    throw new Meteor.Error(403, \"Access denied\");\r\n  }\r\n\r\n  // Back when we supported arbitrary client-provided selectors, we actually\r\n  // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to\r\n  // Mongo to avoid races, but since selector is guaranteed to already just be\r\n  // an ID, we don't have to any more.\r\n\r\n  return self._collection.remove.call(self._collection, selector);\r\n};\r\n"]}