)]}'
{"version":3,"file":"\\packages\\meteor.js","sources":["meteor/client_environment.js","meteor/helpers.js","meteor/setimmediate.js","meteor/timers.js","meteor/errors.js","meteor/fiber_stubs_client.js","meteor/startup_client.js","meteor/debug.js","meteor/dynamics_browser.js","meteor/url_common.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,U;AACA,iB;AACA,iB;AACA,E;;AAEA,oD;AACA,gD;AACA,4E;AACA,C;;;;;;;;;;;;;;;;;;;ACRA,oB;AACA,4C;;AAEA,oD;AACA,4C;AACA,2D;;AAEA,iE;AACA,uB;;AAEA,kB;AACA,mE;AACA,2B;AACA,I;AACA,yC;AACA,gD;AACA,iC;AACA,yB;AACA,8B;AACA,K;AACA,e;AACA,I;;AAEA,qE;AACA,6D;AACA,I;AACA,4C;AACA,gD;AACA,6B;AACA,wB;AACA,sB;AACA,qB;AACA,K;;AAEA,e;AACA,I;;AAEA,mE;AACA,kD;AACA,I;AACA,4C;AACA,sB;AACA,oB;AACA,oD;AACA,6B;AACA,0B;AACA,qB;AACA,c;AACA,O;AACA,qB;AACA,kC;AACA,c;AACA,sB;AACA,K;;AAEA,iD;AACA,+B;;AAEA,e;AACA,qB;AACA,U;AACA,wC;AACA,4C;;AAEA,2B;AACA,K;AACA,I;;AAEA,8E;AACA,gF;AACA,mC;AACA,4C;AACA,iD;AACA,+E;AACA,wE;AACA,I;AACA,6B;AACA,uC;AACA,sB;AACA,mB;AACA,c;AACA,yC;;AAEA,mC;AACA,gB;AACA,yE;AACA,4D;AACA,Q;;AAEA,iD;AACA,kC;AACA,mE;AACA,sB;AACA,O;AACA,4E;AACA,gD;AACA,+B;AACA,4D;AACA,iC;AACA,c;AACA,8B;AACA,4B;AACA,gB;AACA,6B;AACA,oC;AACA,S;AACA,O;AACA,qD;AACA,2C;AACA,c;AACA,0B;AACA,oB;AACA,M;AACA,I;;AAEA,uE;AACA,wB;AACA,wC;AACA,0C;AACA,8E;AACA,uC;AACA,oC;AACA,6B;AACA,uE;AACA,mB;AACA,6B;AACA,iC;AACA,K;;AAEA,8E;AACA,8B;AACA,+B;AACA,M;AACA,wC;AACA,mC;AACA,uC;AACA,iB;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC1IA,qD;AACA,E;AACA,2C;AACA,E;AACA,gC;AACA,E;AACA,2B;AACA,E;AACA,6C;AACA,qD;AACA,E;AACA,mE;AACA,iD;AACA,E;AACA,oE;AACA,wD;AACA,mB;AACA,E;AACA,kE;AACA,6D;AACA,sE;AACA,uE;AACA,qE;AACA,mE;AACA,iE;AACA,4C;AACA,E;AACA,gE;AACA,0D;;AAEA,a;;AAEA,kB;;;AAGA,qB;;AAEA,4B;AACA,4B;AACA,gB;AACA,Q;AACA,sC;AACA,8B;AACA,M;AACA,iD;AACA,wB;AACA,G;AACA,C;;;AAGA,iE;;AAEA,2B;AACA,kE;AACA,oD;AACA,kE;AACA,oC;;AAEA,oD;AACA,gB;AACA,G;;AAEA,oD;;AAEA,uC;AACA,sC;AACA,kC;AACA,wC;AACA,I;AACA,8B;AACA,kC;;AAEA,kC;AACA,gB;;AAEA,oB;AACA,iB;;AAEA,uE;AACA,8D;AACA,mG;;AAEA,8B;AACA,qE;;AAEA,yD;AACA,yC;AACA,yE;AACA,G;;AAEA,mC;AACA,6D;AACA,oE;AACA,kE;AACA,yD;AACA,mD;AACA,kC;AACA,4D;AACA,8D;AACA,W;AACA,yB;AACA,yB;AACA,O;AACA,e;AACA,4B;AACA,O;AACA,K;AACA,G;;AAEA,gC;AACA,+D;AACA,U;AACA,qD;AACA,G;;AAEA,oC;AACA,iE;AACA,2D;AACA,sC;AACA,gB;AACA,0B;AACA,wD;AACA,I;AACA,8C;AACA,sB;AACA,C;;;AAGA,uB;AACA,oC;AACA,6B;AACA,I;AACA,6C;AACA,sB;AACA,C;;;AAGA,sB;AACA,sB;AACA,qB;AACA,e;;;;;;;;;;;;;;;;;;;AC5IA,sC;AACA,yB;AACA,qE;AACA,0E;AACA,6D;AACA,kE;AACA,G;AACA,M;AACA,a;AACA,E;;AAEA,0C;AACA,+D;AACA,E;;AAEA,kB;AACA,iE;AACA,qE;AACA,iE;;AAEA,sC;AACA,wE;AACA,I;;AAEA,uC;AACA,0E;AACA,I;;AAEA,8B;AACA,4B;AACA,I;;AAEA,6B;AACA,2B;AACA,I;;AAEA,2E;AACA,yE;AACA,0C;AACA,wE;AACA,uB;AACA,4D;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC3CA,wE;AACA,8E;AACA,wE;AACA,E;AACA,qD;AACA,6C;AACA,oB;;AAEA,yE;AACA,kC;AACA,6C;AACA,gD;AACA,Y;AACA,gB;AACA,wB;AACA,yC;AACA,kC;AACA,iB;AACA,K;AACA,8B;;AAEA,uC;;AAEA,0B;;AAEA,gB;AACA,I;;AAEA,sC;;AAEA,oB;AACA,E;;AAEA,qE;AACA,sE;AACA,gE;AACA,6D;AACA,E;AACA,+E;AACA,4D;AACA,8E;AACA,uE;AACA,mC;AACA,E;AACA,oC;AACA,iB;AACA,qC;AACA,oB;;AAEA,oE;AACA,kD;AACA,uB;;AAEA,iE;AACA,wE;AACA,+B;AACA,yB;;AAEA,gE;AACA,sE;AACA,uE;AACA,oE;AACA,sE;AACA,qC;AACA,2B;;AAEA,uE;AACA,wE;AACA,oB;AACA,2D;AACA,Q;AACA,4C;AACA,K;;AAEA,gF;AACA,qE;AACA,0E;AACA,6E;AACA,uC;AACA,4C;AACA,kB;AACA,iE;AACA,E;;;;;;;;;;;;;;;;;;;AClFA,+E;AACA,wD;;AAEA,oE;AACA,E;AACA,wC;AACA,a;AACA,E;;AAEA,4E;AACA,oE;AACA,E;AACA,wC;AACA,kB;AACA,mB;AACA,wB;AACA,E;;AAEA,8C;AACA,4B;AACA,oB;AACA,8B;AACA,gF;AACA,2B;AACA,4B;AACA,qB;AACA,yB;AACA,S;AACA,iC;AACA,8B;AACA,a;AACA,c;AACA,qB;AACA,iC;AACA,6E;AACA,mB;AACA,oB;AACA,kB;AACA,kE;AACA,W;AACA,S;AACA,O;AACA,e;AACA,4B;AACA,K;AACA,I;;AAEA,8B;AACA,oB;AACA,0C;AACA,2B;AACA,gF;AACA,wB;AACA,iB;AACA,8C;AACA,I;;AAEA,sB;AACA,oB;AACA,iC;AACA,I;;AAEA,sB;AACA,oB;AACA,8B;AACA,a;AACA,qC;AACA,mB;AACA,K;AACA,I;;AAEA,8B;AACA,oB;AACA,0B;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC3EA,e;AACA,gD;AACA,oC;;AAEA,wB;AACA,gB;AACA,sB;AACA,sB;AACA,E;;AAEA,gC;AACA,8D;AACA,gD;AACA,Q;AACA,0D;AACA,2C;AACA,c;AACA,K;AACA,oC;AACA,C;;AAEA,gC;AACA,8C;AACA,sC;;AAEA,oC;AACA,e;AACA,W;AACA,Q;AACA,qB;AACA,U;AACA,6B;AACA,e;AACA,yD;AACA,a;AACA,M;AACA,S;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACtCA,iB;;AAEA,kE;AACA,gE;AACA,Y;AACA,E;AACA,8D;AACA,gE;AACA,0D;AACA,mE;AACA,mE;AACA,8D;AACA,E;AACA,4C;AACA,iB;AACA,e;AACA,W;AACA,G;AACA,uC;AACA,2C;AACA,iE;AACA,gD;AACA,sB;AACA,Y;AACA,mE;AACA,wF;AACA,kE;AACA,oD;AACA,wB;;AAEA,qF;AACA,wE;AACA,iF;AACA,8E;AACA,4C;AACA,kD;AACA,+C;AACA,6C;;AAEA,qC;AACA,kF;AACA,Y;AACA,gD;;AAEA,iE;AACA,c;AACA,qE;AACA,sC;AACA,c;AACA,c;AACA,kG;AACA,O;AACA,K;AACA,G;AACA,E;;AAEA,iE;AACA,wC;AACA,E;AACA,yC;AACA,oB;AACA,E;;;;;;;;;;;;;;;;;;;AC7DA,gE;;AAEA,iB;AACA,uB;;AAEA,0C;AACA,yB;AACA,E;;AAEA,gD;AACA,oB;AACA,oC;AACA,I;;AAEA,wC;AACA,sB;AACA,I;;AAEA,qC;AACA,yC;AACA,S;AACA,uC;AACA,uB;AACA,e;AACA,uC;AACA,K;AACA,e;AACA,G;AACA,G;;AAEA,8D;AACA,kE;AACA,gE;AACA,W;AACA,2C;;AAEA,yD;AACA,kE;AACA,oC;AACA,oB;AACA,4C;AACA,qC;AACA,Q;AACA,M;AACA,G;;AAEA,qC;AACA,oC;AACA,S;AACA,kC;AACA,wD;AACA,iB;AACA,6E;AACA,wD;AACA,qB;AACA,e;AACA,kC;AACA,K;AACA,e;AACA,I;AACA,E;;AAEA,6C;AACA,qB;AACA,E;;;;;;;;;;;;;;;;;;;AChEA,+C;AACA,qB;AACA,6C;AACA,mB;AACA,qB;AACA,G;AACA,gC;AACA,2E;;AAEA,4B;AACA,W;AACA,2F;;AAEA,8E;AACA,iF;;AAEA,4C;AACA,e;;AAEA,W;AACA,gB;;AAEA,sE;AACA,kB;AACA,uB;AACA,sD;AACA,wE;AACA,8D;AACA,0C;;AAEA,+B;AACA,4E;;AAEA,a;AACA,E;;AAEA,mD;AACA,wC;AACA,oD;AACA,uC;AACA,iF;;;AAGA,iD;AACA,sD;AACA,gC;AACA,yE;AACA,c;AACA,E","sourcesContent":["Meteor = {\r\n  isClient: true,\r\n  isServer: false\r\n};\r\n\r\nif (typeof __meteor_runtime_config__ === 'object' &&\r\n    __meteor_runtime_config__.PUBLIC_SETTINGS) {\r\n  Meteor.settings = { 'public': __meteor_runtime_config__.PUBLIC_SETTINGS };\r\n}\r\n","if (Meteor.isServer)\r\n  var Future = Npm.require('fibers/future');\r\n\r\nif (typeof __meteor_runtime_config__ === 'object' &&\r\n    __meteor_runtime_config__.meteorRelease)\r\n  Meteor.release = __meteor_runtime_config__.meteorRelease;\r\n\r\n// XXX find a better home for these? Ideally they would be _.get,\r\n// _.ensure, _.delete..\r\n\r\n_.extend(Meteor, {\r\n  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or\r\n  // a[b][c] doesn't exist.\r\n  //\r\n  _get: function (obj /*, arguments */) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      if (!(arguments[i] in obj))\r\n        return undefined;\r\n      obj = obj[arguments[i]];\r\n    }\r\n    return obj;\r\n  },\r\n\r\n  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,\r\n  // it is created and set to {}. Either way, it is returned.\r\n  //\r\n  _ensure: function (obj /*, arguments */) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var key = arguments[i];\r\n      if (!(key in obj))\r\n        obj[key] = {};\r\n      obj = obj[key];\r\n    }\r\n\r\n    return obj;\r\n  },\r\n\r\n  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it\r\n  // isn't empty, then a[b] unless it isn't empty.\r\n  //\r\n  _delete: function (obj /*, arguments */) {\r\n    var stack = [obj];\r\n    var leaf = true;\r\n    for (var i = 1; i < arguments.length - 1; i++) {\r\n      var key = arguments[i];\r\n      if (!(key in obj)) {\r\n        leaf = false;\r\n        break;\r\n      }\r\n      obj = obj[key];\r\n      if (typeof obj !== \"object\")\r\n        break;\r\n      stack.push(obj);\r\n    }\r\n\r\n    for (var i = stack.length - 1; i >= 0; i--) {\r\n      var key = arguments[i+1];\r\n\r\n      if (leaf)\r\n        leaf = false;\r\n      else\r\n        for (var other in stack[i][key])\r\n          return; // not empty -- we're done\r\n\r\n      delete stack[i][key];\r\n    }\r\n  },\r\n\r\n  // _wrapAsync can wrap any function that takes some number of arguments that\r\n  // can't be undefined, followed by some optional arguments, where the callback\r\n  // is the last optional argument.\r\n  // e.g. fs.readFile(pathname, [callback]),\r\n  // fs.open(pathname, flags, [mode], [callback])\r\n  // For maximum effectiveness and least confusion, wrapAsync should be used on\r\n  // functions where the callback is the only argument of type Function.\r\n  //\r\n  _wrapAsync: function (fn) {\r\n    return function (/* arguments */) {\r\n      var self = this;\r\n      var callback;\r\n      var fut;\r\n      var newArgs = _.toArray(arguments);\r\n\r\n      var logErr = function (err) {\r\n        if (err)\r\n          return Meteor._debug(\"Exception in callback of async function\",\r\n                               err.stack ? err.stack : err);\r\n      };\r\n\r\n      // Pop off optional args that are undefined\r\n      while (newArgs.length > 0 &&\r\n             typeof(newArgs[newArgs.length - 1]) === \"undefined\") {\r\n        newArgs.pop();\r\n      }\r\n      // If we have any left and the last one is a function, then that's our\r\n      // callback; otherwise, we don't have one.\r\n      if (newArgs.length > 0 &&\r\n          newArgs[newArgs.length - 1] instanceof Function) {\r\n        callback = newArgs.pop();\r\n      } else {\r\n        if (Meteor.isClient) {\r\n          callback = logErr;\r\n        } else {\r\n          fut = new Future();\r\n          callback = fut.resolver();\r\n        }\r\n      }\r\n      newArgs.push(Meteor.bindEnvironment(callback));\r\n      var result = fn.apply(self, newArgs);\r\n      if (fut)\r\n        return fut.wait();\r\n      return result;\r\n    };\r\n  },\r\n\r\n  // Sets child's prototype to a new object whose prototype is parent's\r\n  // prototype. Used as:\r\n  //   Meteor._inherits(ClassB, ClassA).\r\n  //   _.extend(ClassB.prototype, { ... })\r\n  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.\r\n  _inherits: function (Child, Parent) {\r\n    // copy Parent static properties\r\n    for (var key in Parent) {\r\n      // make sure we only copy hasOwnProperty properties vs. prototype\r\n      // properties\r\n      if (_.has(Parent, key))\r\n        Child[key] = Parent[key];\r\n    }\r\n\r\n    // a middle member of prototype chain: takes the prototype from the Parent\r\n    var Middle = function () {\r\n      this.constructor = Child;\r\n    };\r\n    Middle.prototype = Parent.prototype;\r\n    Child.prototype = new Middle();\r\n    Child.__super__ = Parent.prototype;\r\n    return Child;\r\n  }\r\n});\r\n","// Chooses one of three setImmediate implementations:\r\n//\r\n// * Native setImmediate (IE 10, Node 0.9+)\r\n//\r\n// * postMessage (many browsers)\r\n//\r\n// * setTimeout  (fallback)\r\n//\r\n// The postMessage implementation is based on\r\n// https://github.com/NobleJS/setImmediate/tree/1.0.1\r\n//\r\n// Don't use `nextTick` for Node since it runs its callbacks before\r\n// I/O, which is stricter than we're looking for.\r\n//\r\n// Not installed as a polyfill, as our public API is `Meteor.defer`.\r\n// Since we're not trying to be a polyfill, we have some\r\n// simplifications:\r\n//\r\n// If one invocation of a setImmediate callback pauses itself by a\r\n// call to alert/prompt/showModelDialog, the NobleJS polyfill\r\n// implementation ensured that no setImmedate callback would run until\r\n// the first invocation completed.  While correct per the spec, what it\r\n// would mean for us in practice is that any reactive updates relying\r\n// on Meteor.defer would be hung in the main window until the modal\r\n// dialog was dismissed.  Thus we only ensure that a setImmediate\r\n// function is called in a later event loop.\r\n//\r\n// We don't need to support using a string to be eval'ed for the\r\n// callback, arguments to the function, or clearImmediate.\r\n\r\n\"use strict\";\r\n\r\nvar global = this;\r\n\r\n\r\n// IE 10, Node >= 9.1\r\n\r\nfunction useSetImmediate() {\r\n  if (! global.setImmediate)\r\n    return null;\r\n  else {\r\n    var setImmediate = function (fn) {\r\n      global.setImmediate(fn);\r\n    };\r\n    setImmediate.implementation = 'setImmediate';\r\n    return setImmediate;\r\n  }\r\n}\r\n\r\n\r\n// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari\r\n\r\nfunction usePostMessage() {\r\n  // The test against `importScripts` prevents this implementation\r\n  // from being installed inside a web worker, where\r\n  // `global.postMessage` means something completely different and\r\n  // can't be used for this purpose.\r\n\r\n  if (!global.postMessage || global.importScripts) {\r\n    return null;\r\n  }\r\n\r\n  // Avoid synchronous post message implementations.\r\n\r\n  var postMessageIsAsynchronous = true;\r\n  var oldOnMessage = global.onmessage;\r\n  global.onmessage = function () {\r\n      postMessageIsAsynchronous = false;\r\n  };\r\n  global.postMessage(\"\", \"*\");\r\n  global.onmessage = oldOnMessage;\r\n\r\n  if (! postMessageIsAsynchronous)\r\n    return null;\r\n\r\n  var funcIndex = 0;\r\n  var funcs = {};\r\n\r\n  // Installs an event handler on `global` for the `message` event: see\r\n  // * https://developer.mozilla.org/en/DOM/window.postMessage\r\n  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\r\n\r\n  // XXX use Random.id() here?\r\n  var MESSAGE_PREFIX = \"Meteor._setImmediate.\" + Math.random() + '.';\r\n\r\n  function isStringAndStartsWith(string, putativeStart) {\r\n    return (typeof string === \"string\" &&\r\n            string.substring(0, putativeStart.length) === putativeStart);\r\n  }\r\n\r\n  function onGlobalMessage(event) {\r\n    // This will catch all incoming messages (even from other\r\n    // windows!), so we need to try reasonably hard to avoid letting\r\n    // anyone else trick us into firing off. We test the origin is\r\n    // still this window, and that a (randomly generated)\r\n    // unpredictable identifying prefix is present.\r\n    if (event.source === global &&\r\n        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {\r\n      var index = event.data.substring(MESSAGE_PREFIX.length);\r\n      try {\r\n        if (funcs[index])\r\n          funcs[index]();\r\n      }\r\n      finally {\r\n        delete funcs[index];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (global.addEventListener) {\r\n    global.addEventListener(\"message\", onGlobalMessage, false);\r\n  } else {\r\n    global.attachEvent(\"onmessage\", onGlobalMessage);\r\n  }\r\n\r\n  var setImmediate = function (fn) {\r\n    // Make `global` post a message to itself with the handle and\r\n    // identifying prefix, thus asynchronously invoking our\r\n    // onGlobalMessage listener above.\r\n    ++funcIndex;\r\n    funcs[funcIndex] = fn;\r\n    global.postMessage(MESSAGE_PREFIX + funcIndex, \"*\");\r\n  };\r\n  setImmediate.implementation = 'postMessage';\r\n  return setImmediate;\r\n}\r\n\r\n\r\nfunction useTimeout() {\r\n  var setImmediate = function (fn) {\r\n    global.setTimeout(fn, 0);\r\n  };\r\n  setImmediate.implementation = 'setTimeout';\r\n  return setImmediate;\r\n}\r\n\r\n\r\nMeteor._setImmediate =\r\n  useSetImmediate() ||\r\n  usePostMessage() ||\r\n  useTimeout();\r\n","var withoutInvocation = function (f) {\r\n  if (Package.livedata) {\r\n    var _CurrentInvocation = Package.livedata.DDP._CurrentInvocation;\r\n    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)\r\n      throw new Error(\"Can't set timers inside simulations\");\r\n    return function () { _CurrentInvocation.withValue(null, f); };\r\n  }\r\n  else\r\n    return f;\r\n};\r\n\r\nvar bindAndCatch = function (context, f) {\r\n  return Meteor.bindEnvironment(withoutInvocation(f), context);\r\n};\r\n\r\n_.extend(Meteor, {\r\n  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled\r\n  // inside a server method are not part of the method invocation and\r\n  // should clear out the CurrentInvocation environment variable.\r\n\r\n  setTimeout: function (f, duration) {\r\n    return setTimeout(bindAndCatch(\"setTimeout callback\", f), duration);\r\n  },\r\n\r\n  setInterval: function (f, duration) {\r\n    return setInterval(bindAndCatch(\"setInterval callback\", f), duration);\r\n  },\r\n\r\n  clearInterval: function(x) {\r\n    return clearInterval(x);\r\n  },\r\n\r\n  clearTimeout: function(x) {\r\n    return clearTimeout(x);\r\n  },\r\n\r\n  // XXX consider making this guarantee ordering of defer'd callbacks, like\r\n  // Deps.afterFlush or Node's nextTick (in practice). Then tests can do:\r\n  //    callSomethingThatDefersSomeWork();\r\n  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));\r\n  defer: function (f) {\r\n    Meteor._setImmediate(bindAndCatch(\"defer callback\", f));\r\n  }\r\n});\r\n","// Makes an error subclass which properly contains a stack trace in most\r\n// environments. constructor can set fields on `this` (and should probably set\r\n// `message`, which is what gets displayed at the top of a stack trace).\r\n//\r\nMeteor.makeErrorType = function (name, constructor) {\r\n  var errorClass = function (/*arguments*/) {\r\n    var self = this;\r\n\r\n    // Ensure we get a proper stack trace in most Javascript environments\r\n    if (Error.captureStackTrace) {\r\n      // V8 environments (Chrome and Node.js)\r\n      Error.captureStackTrace(self, errorClass);\r\n    } else {\r\n      // Firefox\r\n      var e = new Error;\r\n      e.__proto__ = errorClass.prototype;\r\n      if (e instanceof errorClass)\r\n        self = e;\r\n    }\r\n    // Safari magically works.\r\n\r\n    constructor.apply(self, arguments);\r\n\r\n    self.errorType = name;\r\n\r\n    return self;\r\n  };\r\n\r\n  Meteor._inherits(errorClass, Error);\r\n\r\n  return errorClass;\r\n};\r\n\r\n// This should probably be in the livedata package, but we don't want\r\n// to require you to use the livedata package to get it. Eventually we\r\n// should probably rename it to DDP.Error and put it back in the\r\n// 'livedata' package (which we should rename to 'ddp' also.)\r\n//\r\n// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object\r\n// containing 'error' and optionally 'reason' and 'details'.\r\n// The DDP client manually puts these into Meteor.Error objects. (We don't use\r\n// EJSON.addType here because the type is determined by location in the\r\n// protocol, not text on the wire.)\r\n//\r\nMeteor.Error = Meteor.makeErrorType(\r\n  \"Meteor.Error\",\r\n  function (error, reason, details) {\r\n    var self = this;\r\n\r\n    // Currently, a numeric code, likely similar to a HTTP code (eg,\r\n    // 404, 500). That is likely to change though.\r\n    self.error = error;\r\n\r\n    // Optional: A short human-readable summary of the error. Not\r\n    // intended to be shown to end users, just developers. (\"Not Found\",\r\n    // \"Internal Server Error\")\r\n    self.reason = reason;\r\n\r\n    // Optional: Additional information about the error, say for\r\n    // debugging. It might be a (textual) stack trace if the server is\r\n    // willing to provide one. The corresponding thing in HTTP would be\r\n    // the body of a 404 or 500 response. (The difference is that we\r\n    // never expect this to be shown to end users, only developers, so\r\n    // it doesn't need to be pretty.)\r\n    self.details = details;\r\n\r\n    // This is what gets displayed at the top of a stack trace. Current\r\n    // format is \"[404]\" (if no reason is set) or \"File not found [404]\"\r\n    if (self.reason)\r\n      self.message = self.reason + ' [' + self.error + ']';\r\n    else\r\n      self.message = '[' + self.error + ']';\r\n  });\r\n\r\n// Meteor.Error is basically data and is sent over DDP, so you should be able to\r\n// properly EJSON-clone it. This is especially important because if a\r\n// Meteor.Error is thrown through a Future, the error, reason, and details\r\n// properties become non-enumerable so a standard Object clone won't preserve\r\n// them and they will be lost from DDP.\r\nMeteor.Error.prototype.clone = function () {\r\n  var self = this;\r\n  return new Meteor.Error(self.error, self.reason, self.details);\r\n};\r\n","// This file is a partial analogue to fiber_helpers.js, which allows the client\r\n// to use a queue too, and also to call noYieldsAllowed.\r\n\r\n// The client has no ability to yield, so noYieldsAllowed is a noop.\r\n//\r\nMeteor._noYieldsAllowed = function (f) {\r\n  return f();\r\n};\r\n\r\n// An even simpler queue of tasks than the fiber-enabled one.  This one just\r\n// runs all the tasks when you call runTask or flush, synchronously.\r\n//\r\nMeteor._SynchronousQueue = function () {\r\n  var self = this;\r\n  self._tasks = [];\r\n  self._running = false;\r\n};\r\n\r\n_.extend(Meteor._SynchronousQueue.prototype, {\r\n  runTask: function (task) {\r\n    var self = this;\r\n    if (!self.safeToRunTask())\r\n      throw new Error(\"Could not synchronously run a task from a running task\");\r\n    self._tasks.push(task);\r\n    var tasks = self._tasks;\r\n    self._tasks = [];\r\n    self._running = true;\r\n    try {\r\n      while (!_.isEmpty(tasks)) {\r\n        var t = tasks.shift();\r\n        try {\r\n          t();\r\n        } catch (e) {\r\n          if (_.isEmpty(tasks)) {\r\n            // this was the last task, that is, the one we're calling runTask\r\n            // for.\r\n            throw e;\r\n          } else {\r\n            Meteor._debug(\"Exception in queued task: \" + e.stack);\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      self._running = false;\r\n    }\r\n  },\r\n\r\n  queueTask: function (task) {\r\n    var self = this;\r\n    var wasEmpty = _.isEmpty(self._tasks);\r\n    self._tasks.push(task);\r\n    // Intentionally not using Meteor.setTimeout, because it doesn't like runing\r\n    // in stubs for now.\r\n    if (wasEmpty)\r\n      setTimeout(_.bind(self.flush, self), 0);\r\n  },\r\n\r\n  flush: function () {\r\n    var self = this;\r\n    self.runTask(function () {});\r\n  },\r\n\r\n  drain: function () {\r\n    var self = this;\r\n    if (!self.safeToRunTask())\r\n      return;\r\n    while (!_.isEmpty(self._tasks)) {\r\n      self.flush();\r\n    }\r\n  },\r\n\r\n  safeToRunTask: function () {\r\n    var self = this;\r\n    return !self._running;\r\n  }\r\n});\r\n","var queue = [];\r\nvar loaded = document.readyState === \"loaded\" ||\r\n  document.readyState == \"complete\";\r\n\r\nvar ready = function() {\r\n  loaded = true;\r\n  while (queue.length)\r\n    (queue.shift())();\r\n};\r\n\r\nif (document.addEventListener) {\r\n  document.addEventListener('DOMContentLoaded', ready, false);\r\n  window.addEventListener('load', ready, false);\r\n} else {\r\n  document.attachEvent('onreadystatechange', function () {\r\n    if (document.readyState === \"complete\")\r\n      ready();\r\n  });\r\n  window.attachEvent('load', ready);\r\n}\r\n\r\nMeteor.startup = function (cb) {\r\n  var doScroll = !document.addEventListener &&\r\n    document.documentElement.doScroll;\r\n\r\n  if (!doScroll || window !== top) {\r\n    if (loaded)\r\n      cb();\r\n    else\r\n      queue.push(cb);\r\n  } else {\r\n    try { doScroll('left'); }\r\n    catch (e) {\r\n      setTimeout(function() { Meteor.startup(cb); }, 50);\r\n      return;\r\n    };\r\n    cb();\r\n  }\r\n};\r\n","var suppress = 0;\r\n\r\n// replacement for console.log. This is a temporary API. We should\r\n// provide a real logging API soon (possibly just a polyfill for\r\n// console?)\r\n//\r\n// NOTE: this is used on the server to print the warning about\r\n// having autopublish enabled when you probably meant to turn it\r\n// off. it's not really the proper use of something called\r\n// _debug. the intent is for this message to go to the terminal and\r\n// be very visible. if you change _debug to go someplace else, etc,\r\n// please fix the autopublish code to do something reasonable.\r\n//\r\nMeteor._debug = function (/* arguments */) {\r\n  if (suppress) {\r\n    suppress--;\r\n    return;\r\n  }\r\n  if (typeof console !== 'undefined' &&\r\n      typeof console.log !== 'undefined') {\r\n    if (arguments.length == 0) { // IE Companion breaks otherwise\r\n      // IE10 PP4 requires at least one argument\r\n      console.log('');\r\n    } else {\r\n      // IE doesn't have console.log.apply, it's not a real Object.\r\n      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9\r\n      // http://patik.com/blog/complete-cross-browser-console-log/\r\n      if (typeof console.log.apply === \"function\") {\r\n        // Most browsers\r\n\r\n        // Chrome and Safari only hyperlink URLs to source files in first argument of\r\n        // console.log, so try to call it with one argument if possible.\r\n        // Approach taken here: If all arguments are strings, join them on space.\r\n        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991\r\n        var allArgumentsOfTypeString = true;\r\n        for (var i = 0; i < arguments.length; i++)\r\n          if (typeof arguments[i] !== \"string\")\r\n            allArgumentsOfTypeString = false;\r\n\r\n        if (allArgumentsOfTypeString)\r\n          console.log.apply(console, [Array.prototype.join.call(arguments, \" \")]);\r\n        else\r\n          console.log.apply(console, arguments);\r\n\r\n      } else if (typeof Function.prototype.bind === \"function\") {\r\n        // IE9\r\n        var log = Function.prototype.bind.call(console.log, console);\r\n        log.apply(console, arguments);\r\n      } else {\r\n        // IE8\r\n        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Suppress the next 'count' Meteor._debug messsages. Use this to\r\n// stop tests from spamming the console.\r\n//\r\nMeteor._suppress_log = function (count) {\r\n  suppress += count;\r\n};\r\n","// Simple implementation of dynamic scoping, for use in browsers\r\n\r\nvar nextSlot = 0;\r\nvar currentValues = [];\r\n\r\nMeteor.EnvironmentVariable = function () {\r\n  this.slot = nextSlot++;\r\n};\r\n\r\n_.extend(Meteor.EnvironmentVariable.prototype, {\r\n  get: function () {\r\n    return currentValues[this.slot];\r\n  },\r\n\r\n  getOrNullIfOutsideFiber: function () {\r\n    return this.get();\r\n  },\r\n\r\n  withValue: function (value, func) {\r\n    var saved = currentValues[this.slot];\r\n    try {\r\n      currentValues[this.slot] = value;\r\n      var ret = func();\r\n    } finally {\r\n      currentValues[this.slot] = saved;\r\n    }\r\n    return ret;\r\n  }\r\n});\r\n\r\nMeteor.bindEnvironment = function (func, onException, _this) {\r\n  // needed in order to be able to create closures inside func and\r\n  // have the closed variables not change back to their original\r\n  // values\r\n  var boundValues = _.clone(currentValues);\r\n\r\n  if (!onException || typeof(onException) === 'string') {\r\n    var description = onException || \"callback of async function\";\r\n    onException = function (error) {\r\n      Meteor._debug(\r\n        \"Exception in \" + description + \":\",\r\n        error && error.stack || error\r\n      );\r\n    };\r\n  }\r\n\r\n  return function (/* arguments */) {\r\n    var savedValues = currentValues;\r\n    try {\r\n      currentValues = boundValues;\r\n      var ret = func.apply(_this, _.toArray(arguments));\r\n    } catch (e) {\r\n      // note: callback-hook currently relies on the fact that if onException\r\n      // throws in the browser, the wrapped call throws.\r\n      onException(e);\r\n    } finally {\r\n      currentValues = savedValues;\r\n    }\r\n    return ret;\r\n  };\r\n};\r\n\r\nMeteor._nodeCodeMustBeInFiber = function () {\r\n  // no-op on browser\r\n};\r\n","Meteor.absoluteUrl = function (path, options) {\r\n  // path is optional\r\n  if (!options && typeof path === 'object') {\r\n    options = path;\r\n    path = undefined;\r\n  }\r\n  // merge options with defaults\r\n  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});\r\n\r\n  var url = options.rootUrl;\r\n  if (!url)\r\n    throw new Error(\"Must pass options.rootUrl or set ROOT_URL in the server environment\");\r\n\r\n  if (!/^http[s]?:\\/\\//i.test(url)) // url starts with 'http://' or 'https://'\r\n    url = 'http://' + url; // we will later fix to https if options.secure is set\r\n\r\n  if (!/\\/$/.test(url)) // url ends with '/'\r\n    url += '/';\r\n\r\n  if (path)\r\n    url += path;\r\n\r\n  // turn http to https if secure option is set, and we're not talking\r\n  // to localhost.\r\n  if (options.secure &&\r\n      /^http:/.test(url) && // url starts with 'http:'\r\n      !/http:\\/\\/localhost[:\\/]/.test(url) && // doesn't match localhost\r\n      !/http:\\/\\/127\\.0\\.0\\.1[:\\/]/.test(url)) // or 127.0.0.1\r\n    url = url.replace(/^http:/, 'https:');\r\n\r\n  if (options.replaceLocalhost)\r\n    url = url.replace(/^http:\\/\\/localhost([:\\/].*)/, 'http://127.0.0.1$1');\r\n\r\n  return url;\r\n};\r\n\r\n// allow later packages to override default options\r\nMeteor.absoluteUrl.defaultOptions = { };\r\nif (typeof __meteor_runtime_config__ === \"object\" &&\r\n    __meteor_runtime_config__.ROOT_URL)\r\n  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;\r\n\r\n\r\nMeteor._relativeToSiteRootUrl = function (link) {\r\n  if (typeof __meteor_runtime_config__ === \"object\" &&\r\n      link.substr(0, 1) === \"/\")\r\n    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\") + link;\r\n  return link;\r\n};\r\n"]}