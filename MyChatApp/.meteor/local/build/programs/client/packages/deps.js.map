)]}'
{"version":3,"file":"\\packages\\deps.js","sources":["deps/deps.js","deps/deprecated.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kD;AACA,kD;AACA,kD;;AAEA,U;;AAEA,sC;AACA,oB;;AAEA,kD;AACA,+B;;AAEA,0C;AACA,8B;AACA,qB;AACA,E;;AAEA,8B;AACA,+D;AACA,yD;AACA,4D;AACA,mE;AACA,4B;AACA,E;;AAEA,sC;AACA,wB;AACA,Y;AACA,U;AACA,8D;AACA,uC;AACA,G;AACA,E;;AAEA,oE;AACA,oE;AACA,0D;AACA,kE;AACA,uB;AACA,wC;AACA,2D;AACA,a;AACA,U;AACA,wB;AACA,2B;AACA,2C;AACA,4B;AACA,S;AACA,M;AACA,G;AACA,E;;AAEA,e;AACA,4D;AACA,6B;AACA,sE;AACA,sB;AACA,qC;AACA,oB;AACA,kE;AACA,+D;AACA,kE;AACA,iD;AACA,sB;AACA,oE;AACA,oE;AACA,qE;AACA,iE;AACA,U;AACA,4B;;AAEA,6B;;AAEA,gC;AACA,oB;AACA,8B;AACA,qB;AACA,G;AACA,E;;AAEA,sD;AACA,0C;AACA,oC;;AAEA,E;AACA,2C;AACA,E;AACA,yC;AACA,gC;AACA,oB;AACA,mE;AACA,kC;;AAEA,kB;;AAEA,gD;AACA,uB;;AAEA,oD;AACA,2B;;AAEA,iD;AACA,uB;;AAEA,sB;AACA,mC;AACA,yD;AACA,2D;AACA,wB;AACA,iB;AACA,4B;;AAEA,qB;AACA,O;AACA,oB;AACA,oB;AACA,a;AACA,0B;AACA,gB;AACA,kB;AACA,G;AACA,E;;AAEA,mD;AACA,wD;AACA,kB;;AAEA,8B;AACA,wD;;AAEA,yB;AACA,kC;AACA,mC;AACA,O;AACA,U;AACA,wC;AACA,G;AACA,E;;AAEA,iD;AACA,qD;AACA,kB;AACA,2B;AACA,wD;AACA,uD;AACA,gD;AACA,qB;AACA,qC;AACA,K;;AAEA,4B;;AAEA,6C;AACA,iC;AACA,gE;AACA,oC;AACA,qC;AACA,S;AACA,K;AACA,qC;AACA,G;AACA,E;;AAEA,2C;AACA,+C;AACA,uB;AACA,wB;AACA,sB;AACA,G;AACA,E;;AAEA,mD;AACA,kB;AACA,2B;;AAEA,yC;AACA,8B;AACA,oC;AACA,mB;AACA,O;AACA,0C;AACA,a;AACA,oC;AACA,sB;AACA,G;AACA,E;;AAEA,qD;AACA,kB;;AAEA,2B;AACA,O;AACA,gD;AACA,W;AACA,wB;AACA,mB;AACA,oC;AACA,O;AACA,gE;AACA,iE;AACA,kC;AACA,Q;AACA,kE;AACA,e;AACA,K;AACA,a;AACA,8B;AACA,G;AACA,E;;AAEA,E;AACA,0C;AACA,E;AACA,+B;AACA,4B;AACA,E;;AAEA,4C;AACA,E;AACA,sD;AACA,sE;AACA,kE;AACA,qC;AACA,2D;AACA,sB;AACA,sB;AACA,mB;;AAEA,0C;AACA,G;AACA,kB;AACA,2B;AACA,uC;AACA,2C;AACA,0C;AACA,sC;AACA,O;AACA,gB;AACA,G;AACA,e;AACA,E;;AAEA,6C;AACA,iD;AACA,kB;AACA,sC;AACA,0C;AACA,E;;AAEA,mD;AACA,uD;AACA,kB;AACA,qC;AACA,gB;AACA,e;AACA,E;;AAEA,qC;AACA,+B;AACA,oE;AACA,gB;AACA,I;AACA,gE;AACA,6D;AACA,4D;AACA,4D;AACA,+D;AACA,yC;AACA,I;AACA,sD;AACA,c;AACA,4D;;AAEA,gB;AACA,uD;;AAEA,iB;AACA,mB;AACA,yD;;AAEA,0B;AACA,O;AACA,wC;AACA,wC;;AAEA,2C;AACA,0C;AACA,+C;AACA,0B;AACA,O;;AAEA,uC;AACA,kD;AACA,uC;AACA,+C;AACA,a;AACA,iB;AACA,qB;AACA,gD;AACA,S;AACA,O;AACA,K;AACA,uB;AACA,a;AACA,wB;AACA,uB;AACA,oE;AACA,+D;AACA,K;AACA,sB;AACA,oB;AACA,G;AACA,E;;AAEA,uC;AACA,E;AACA,0D;AACA,uB;AACA,E;AACA,wD;AACA,E;AACA,mD;AACA,mE;AACA,6B;AACA,8B;AACA,iE;;AAEA,iC;AACA,2D;;AAEA,kB;AACA,mC;AACA,e;AACA,O;;AAEA,W;AACA,E;;AAEA,2C;AACA,E;AACA,kE;AACA,gE;AACA,uE;AACA,kC;AACA,iC;AACA,yC;AACA,8B;AACA,O;AACA,e;AACA,a;AACA,oC;AACA,G;AACA,E;;AAEA,4C;AACA,kC;AACA,oB;AACA,uE;;AAEA,0C;AACA,E;;AAEA,0C;AACA,gC;AACA,8B;AACA,iB;AACA,E;;;;;;;;;;;;;;;;;;;AC9WA,wC;;AAEA,uE;AACA,gB;AACA,wB;AACA,0B;AACA,8B;;AAEA,+E;AACA,sC;AACA,wB;AACA,oC;;AAEA,mD;AACA,wB;AACA,4B;AACA,oB;AACA,E","sourcesContent":["//////////////////////////////////////////////////\r\n// Package docs at http://docs.meteor.com/#deps //\r\n//////////////////////////////////////////////////\r\n\r\nDeps = {};\r\n\r\n// http://docs.meteor.com/#deps_active\r\nDeps.active = false;\r\n\r\n// http://docs.meteor.com/#deps_currentcomputation\r\nDeps.currentComputation = null;\r\n\r\nvar setCurrentComputation = function (c) {\r\n  Deps.currentComputation = c;\r\n  Deps.active = !! c;\r\n};\r\n\r\nvar _debugFunc = function () {\r\n  // lazy evaluation because `Meteor` does not exist right away\r\n  return (typeof Meteor !== \"undefined\" ? Meteor._debug :\r\n          ((typeof console !== \"undefined\") && console.log ?\r\n           function () { console.log.apply(console, arguments); } :\r\n           function () {}));\r\n};\r\n\r\nvar _throwOrLog = function (from, e) {\r\n  if (throwFirstError) {\r\n    throw e;\r\n  } else {\r\n    _debugFunc()(\"Exception from Deps \" + from + \" function:\",\r\n                 e.stack || e.message);\r\n  }\r\n};\r\n\r\n// Takes a function `f`, and wraps it in a `Meteor._noYieldsAllowed`\r\n// block if we are running on the server. On the client, returns the\r\n// original function (since `Meteor._noYieldsAllowed` is a\r\n// no-op). This has the benefit of not adding an unnecessary stack\r\n// frame on the client.\r\nvar withNoYieldsAllowed = function (f) {\r\n  if ((typeof Meteor === 'undefined') || Meteor.isClient) {\r\n    return f;\r\n  } else {\r\n    return function () {\r\n      var args = arguments;\r\n      Meteor._noYieldsAllowed(function () {\r\n        f.apply(null, args);\r\n      });\r\n    };\r\n  }\r\n};\r\n\r\nvar nextId = 1;\r\n// computations whose callbacks we should call at flush time\r\nvar pendingComputations = [];\r\n// `true` if a Deps.flush is scheduled, or if we are in Deps.flush now\r\nvar willFlush = false;\r\n// `true` if we are in Deps.flush now\r\nvar inFlush = false;\r\n// `true` if we are computing a computation now, either first time\r\n// or recompute.  This matches Deps.active unless we are inside\r\n// Deps.nonreactive, which nullfies currentComputation even though\r\n// an enclosing computation may still be running.\r\nvar inCompute = false;\r\n// `true` if the `_throwFirstError` option was passed in to the call\r\n// to Deps.flush that we are in. When set, throw rather than log the\r\n// first error encountered while flushing. Before throwing the error,\r\n// finish flushing (from a finally block), logging any subsequent\r\n// errors.\r\nvar throwFirstError = false;\r\n\r\nvar afterFlushCallbacks = [];\r\n\r\nvar requireFlush = function () {\r\n  if (! willFlush) {\r\n    setTimeout(Deps.flush, 0);\r\n    willFlush = true;\r\n  }\r\n};\r\n\r\n// Deps.Computation constructor is visible but private\r\n// (throws an error if you try to call it)\r\nvar constructingComputation = false;\r\n\r\n//\r\n// http://docs.meteor.com/#deps_computation\r\n//\r\nDeps.Computation = function (f, parent) {\r\n  if (! constructingComputation)\r\n    throw new Error(\r\n      \"Deps.Computation constructor is private; use Deps.autorun\");\r\n  constructingComputation = false;\r\n\r\n  var self = this;\r\n\r\n  // http://docs.meteor.com/#computation_stopped\r\n  self.stopped = false;\r\n\r\n  // http://docs.meteor.com/#computation_invalidated\r\n  self.invalidated = false;\r\n\r\n  // http://docs.meteor.com/#computation_firstrun\r\n  self.firstRun = true;\r\n\r\n  self._id = nextId++;\r\n  self._onInvalidateCallbacks = [];\r\n  // the plan is at some point to use the parent relation\r\n  // to constrain the order that computations are processed\r\n  self._parent = parent;\r\n  self._func = f;\r\n  self._recomputing = false;\r\n\r\n  var errored = true;\r\n  try {\r\n    self._compute();\r\n    errored = false;\r\n  } finally {\r\n    self.firstRun = false;\r\n    if (errored)\r\n      self.stop();\r\n  }\r\n};\r\n\r\n// http://docs.meteor.com/#computation_oninvalidate\r\nDeps.Computation.prototype.onInvalidate = function (f) {\r\n  var self = this;\r\n\r\n  if (typeof f !== 'function')\r\n    throw new Error(\"onInvalidate requires a function\");\r\n\r\n  if (self.invalidated) {\r\n    Deps.nonreactive(function () {\r\n      withNoYieldsAllowed(f)(self);\r\n    });\r\n  } else {\r\n    self._onInvalidateCallbacks.push(f);\r\n  }\r\n};\r\n\r\n// http://docs.meteor.com/#computation_invalidate\r\nDeps.Computation.prototype.invalidate = function () {\r\n  var self = this;\r\n  if (! self.invalidated) {\r\n    // if we're currently in _recompute(), don't enqueue\r\n    // ourselves, since we'll rerun immediately anyway.\r\n    if (! self._recomputing && ! self.stopped) {\r\n      requireFlush();\r\n      pendingComputations.push(this);\r\n    }\r\n\r\n    self.invalidated = true;\r\n\r\n    // callbacks can't add callbacks, because\r\n    // self.invalidated === true.\r\n    for(var i = 0, f; f = self._onInvalidateCallbacks[i]; i++) {\r\n      Deps.nonreactive(function () {\r\n        withNoYieldsAllowed(f)(self);\r\n      });\r\n    }\r\n    self._onInvalidateCallbacks = [];\r\n  }\r\n};\r\n\r\n// http://docs.meteor.com/#computation_stop\r\nDeps.Computation.prototype.stop = function () {\r\n  if (! this.stopped) {\r\n    this.stopped = true;\r\n    this.invalidate();\r\n  }\r\n};\r\n\r\nDeps.Computation.prototype._compute = function () {\r\n  var self = this;\r\n  self.invalidated = false;\r\n\r\n  var previous = Deps.currentComputation;\r\n  setCurrentComputation(self);\r\n  var previousInCompute = inCompute;\r\n  inCompute = true;\r\n  try {\r\n    withNoYieldsAllowed(self._func)(self);\r\n  } finally {\r\n    setCurrentComputation(previous);\r\n    inCompute = false;\r\n  }\r\n};\r\n\r\nDeps.Computation.prototype._recompute = function () {\r\n  var self = this;\r\n\r\n  self._recomputing = true;\r\n  try {\r\n    while (self.invalidated && ! self.stopped) {\r\n      try {\r\n        self._compute();\r\n      } catch (e) {\r\n        _throwOrLog(\"recompute\", e);\r\n      }\r\n      // If _compute() invalidated us, we run again immediately.\r\n      // A computation that invalidates itself indefinitely is an\r\n      // infinite loop, of course.\r\n      //\r\n      // We could put an iteration counter here and catch run-away\r\n      // loops.\r\n    }\r\n  } finally {\r\n    self._recomputing = false;\r\n  }\r\n};\r\n\r\n//\r\n// http://docs.meteor.com/#deps_dependency\r\n//\r\nDeps.Dependency = function () {\r\n  this._dependentsById = {};\r\n};\r\n\r\n// http://docs.meteor.com/#dependency_depend\r\n//\r\n// Adds `computation` to this set if it is not already\r\n// present.  Returns true if `computation` is a new member of the set.\r\n// If no argument, defaults to currentComputation, or does nothing\r\n// if there is no currentComputation.\r\nDeps.Dependency.prototype.depend = function (computation) {\r\n  if (! computation) {\r\n    if (! Deps.active)\r\n      return false;\r\n\r\n    computation = Deps.currentComputation;\r\n  }\r\n  var self = this;\r\n  var id = computation._id;\r\n  if (! (id in self._dependentsById)) {\r\n    self._dependentsById[id] = computation;\r\n    computation.onInvalidate(function () {\r\n      delete self._dependentsById[id];\r\n    });\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// http://docs.meteor.com/#dependency_changed\r\nDeps.Dependency.prototype.changed = function () {\r\n  var self = this;\r\n  for (var id in self._dependentsById)\r\n    self._dependentsById[id].invalidate();\r\n};\r\n\r\n// http://docs.meteor.com/#dependency_hasdependents\r\nDeps.Dependency.prototype.hasDependents = function () {\r\n  var self = this;\r\n  for(var id in self._dependentsById)\r\n    return true;\r\n  return false;\r\n};\r\n\r\n// http://docs.meteor.com/#deps_flush\r\nDeps.flush = function (_opts) {\r\n  // XXX What part of the comment below is still true? (We no longer\r\n  // have Spark)\r\n  //\r\n  // Nested flush could plausibly happen if, say, a flush causes\r\n  // DOM mutation, which causes a \"blur\" event, which runs an\r\n  // app event handler that calls Deps.flush.  At the moment\r\n  // Spark blocks event handlers during DOM mutation anyway,\r\n  // because the LiveRange tree isn't valid.  And we don't have\r\n  // any useful notion of a nested flush.\r\n  //\r\n  // https://app.asana.com/0/159908330244/385138233856\r\n  if (inFlush)\r\n    throw new Error(\"Can't call Deps.flush while flushing\");\r\n\r\n  if (inCompute)\r\n    throw new Error(\"Can't flush inside Deps.autorun\");\r\n\r\n  inFlush = true;\r\n  willFlush = true;\r\n  throwFirstError = !! (_opts && _opts._throwFirstError);\r\n\r\n  var finishedTry = false;\r\n  try {\r\n    while (pendingComputations.length ||\r\n           afterFlushCallbacks.length) {\r\n\r\n      // recompute all pending computations\r\n      while (pendingComputations.length) {\r\n        var comp = pendingComputations.shift();\r\n        comp._recompute();\r\n      }\r\n\r\n      if (afterFlushCallbacks.length) {\r\n        // call one afterFlush callback, which may\r\n        // invalidate more computations\r\n        var func = afterFlushCallbacks.shift();\r\n        try {\r\n          func();\r\n        } catch (e) {\r\n          _throwOrLog(\"afterFlush function\", e);\r\n        }\r\n      }\r\n    }\r\n    finishedTry = true;\r\n  } finally {\r\n    if (! finishedTry) {\r\n      // we're erroring\r\n      inFlush = false; // needed before calling `Deps.flush()` again\r\n      Deps.flush({_throwFirstError: false}); // finish flushing\r\n    }\r\n    willFlush = false;\r\n    inFlush = false;\r\n  }\r\n};\r\n\r\n// http://docs.meteor.com/#deps_autorun\r\n//\r\n// Run f(). Record its dependencies. Rerun it whenever the\r\n// dependencies change.\r\n//\r\n// Returns a new Computation, which is also passed to f.\r\n//\r\n// Links the computation to the current computation\r\n// so that it is stopped if the current computation is invalidated.\r\nDeps.autorun = function (f) {\r\n  if (typeof f !== 'function')\r\n    throw new Error('Deps.autorun requires a function argument');\r\n\r\n  constructingComputation = true;\r\n  var c = new Deps.Computation(f, Deps.currentComputation);\r\n\r\n  if (Deps.active)\r\n    Deps.onInvalidate(function () {\r\n      c.stop();\r\n    });\r\n\r\n  return c;\r\n};\r\n\r\n// http://docs.meteor.com/#deps_nonreactive\r\n//\r\n// Run `f` with no current computation, returning the return value\r\n// of `f`.  Used to turn off reactivity for the duration of `f`,\r\n// so that reactive data sources accessed by `f` will not result in any\r\n// computations being invalidated.\r\nDeps.nonreactive = function (f) {\r\n  var previous = Deps.currentComputation;\r\n  setCurrentComputation(null);\r\n  try {\r\n    return f();\r\n  } finally {\r\n    setCurrentComputation(previous);\r\n  }\r\n};\r\n\r\n// http://docs.meteor.com/#deps_oninvalidate\r\nDeps.onInvalidate = function (f) {\r\n  if (! Deps.active)\r\n    throw new Error(\"Deps.onInvalidate requires a currentComputation\");\r\n\r\n  Deps.currentComputation.onInvalidate(f);\r\n};\r\n\r\n// http://docs.meteor.com/#deps_afterflush\r\nDeps.afterFlush = function (f) {\r\n  afterFlushCallbacks.push(f);\r\n  requireFlush();\r\n};\r\n","// Deprecated (Deps-recated?) functions.\r\n\r\n// These functions used to be on the Meteor object (and worked slightly\r\n// differently).\r\n// XXX COMPAT WITH 0.5.7\r\nMeteor.flush = Deps.flush;\r\nMeteor.autorun = Deps.autorun;\r\n\r\n// We used to require a special \"autosubscribe\" call to reactively subscribe to\r\n// things. Now, it works with autorun.\r\n// XXX COMPAT WITH 0.5.4\r\nMeteor.autosubscribe = Deps.autorun;\r\n\r\n// This Deps API briefly existed in 0.5.8 and 0.5.9\r\n// XXX COMPAT WITH 0.5.9\r\nDeps.depend = function (d) {\r\n  return d.depend();\r\n};\r\n"]}