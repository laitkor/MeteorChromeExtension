)]}'
{"version":3,"file":"\\packages\\minimongo.js","sources":["minimongo/minimongo.js","minimongo/wrap_transform.js","minimongo/helpers.js","minimongo/selector.js","minimongo/sort.js","minimongo/projection.js","minimongo/modify.js","minimongo/diff.js","minimongo/id_map.js","minimongo/observe.js","minimongo/objectid.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+D;;AAEA,2E;;AAEA,mE;AACA,sF;;AAEA,mD;;AAEA,mC;AACA,kB;AACA,mB;AACA,yC;AACA,0C;;AAEA,sD;;AAEA,+C;;AAEA,oC;AACA,4E;AACA,uE;AACA,kC;AACA,+D;AACA,0C;AACA,8C;AACA,oB;;AAEA,iF;AACA,2D;AACA,8B;;AAEA,qE;AACA,sB;AACA,E;;AAEA,e;;AAEA,yC;AACA,0D;AACA,mB;;AAEA,8D;AACA,8C;AACA,4B;AACA,sB;AACA,Q;AACA,uB;AACA,K;AACA,E;;AAEA,qC;AACA,6B;AACA,4B;AACA,W;AACA,E;;;AAGA,kD;AACA,kC;AACA,oB;AACA,oC;AACA,2B;AACA,mE;AACA,wB;AACA,E;AACA,mE;AACA,W;AACA,E;AACA,iE;AACA,iE;AACA,Q;AACA,E;AACA,6D;AACA,oC;AACA,Y;AACA,+D;AACA,oE;AACA,sE;AACA,0C;AACA,6B;AACA,kB;;AAEA,6D;AACA,E;;AAEA,8D;AACA,mE;AACA,kB;AACA,6B;;AAEA,+B;AACA,qB;;AAEA,gD;AACA,0B;AACA,gC;AACA,yD;AACA,U;AACA,iC;AACA,yD;AACA,qD;AACA,4D;AACA,oE;AACA,K;AACA,G;AACA,2B;AACA,6B;AACA,+B;;AAEA,kB;AACA,wE;;AAEA,qE;;AAEA,+D;AACA,kC;AACA,+E;AACA,E;;AAEA,2E;AACA,2E;AACA,uD;AACA,wB;AACA,uD;AACA,E;;AAEA,kE;AACA,6B;AACA,kB;;AAEA,oE;AACA,uE;AACA,8D;AACA,qE;AACA,sE;AACA,qE;AACA,uE;AACA,iB;AACA,0B;AACA,oB;;AAEA,iD;AACA,E;;AAEA,yE;AACA,kB;;AAEA,qD;;AAEA,sB;AACA,kB;AACA,wB;AACA,oB;AACA,oB;AACA,0B;AACA,G;;AAEA,qC;AACA,4B;AACA,mC;AACA,Y;AACA,6E;AACA,4B;AACA,6B;AACA,K;;AAEA,wB;AACA,iC;AACA,yC;AACA,K;AACA,E;;AAEA,6D;AACA,yB;AACA,E;;AAEA,qE;AACA,kB;AACA,e;AACA,sC;AACA,uD;AACA,K;AACA,a;AACA,E;;AAEA,sD;AACA,kB;AACA,e;AACA,+B;AACA,kB;AACA,K;AACA,a;AACA,E;;AAEA,sD;AACA,kB;;AAEA,oB;AACA,8C;AACA,+D;;AAEA,qD;AACA,E;;AAEA,kE;AACA,kB;AACA,6B;AACA,gF;AACA,wC;;AAEA,uD;AACA,iE;AACA,E;;AAEA,mE;AACA,kB;AACA,8B;AACA,E;;AAEA,2E;AACA,+C;AACA,4E;AACA,4D;AACA,E;;AAEA,oE;AACA,2C;AACA,wE;AACA,+C;AACA,4E;AACA,+C;AACA,4E;;AAEA,yE;AACA,oC;AACA,E;;AAEA,2C;AACA,+C;;AAEA,sB;AACA,8B;AACA,mC;AACA,wB;AACA,qD;AACA,0C;AACA,qC;AACA,0B;AACA,8C;AACA,E;AACA,iD;AACA,yB;AACA,uD;AACA,E;AACA,kD;AACA,yC;AACA,E;AACA,mD;AACA,6E;AACA,sE;;AAEA,4C;AACA,+B;AACA,oB;AACA,qE;AACA,I;AACA,sC;AACA,oB;;AAEA,8E;;AAEA,gF;AACA,gF;AACA,kC;AACA,kD;AACA,2E;AACA,qE;;AAEA,4E;AACA,0E;;AAEA,iB;AACA,+C;AACA,qC;AACA,kB;AACA,6E;AACA,4B;AACA,uB;AACA,mB;AACA,qC;AACA,M;AACA,Y;;AAEA,2E;AACA,Y;AACA,wB;AACA,uC;AACA,2C;AACA,K;AACA,yC;AACA,qD;AACA,+B;AACA,0E;;AAEA,6E;AACA,0B;AACA,uE;AACA,gC;;AAEA,6E;AACA,Y;AACA,qE;AACA,a;AACA,8B;AACA,kC;AACA,2B;AACA,6B;;AAEA,mC;AACA,iB;;AAEA,6D;AACA,mE;AACA,gE;AACA,mB;AACA,S;;AAEA,6D;AACA,iC;AACA,W;AACA,Q;AACA,M;AACA,iD;AACA,2D;AACA,kD;AACA,kB;AACA,+D;AACA,4D;AACA,K;;AAEA,gE;AACA,kD;AACA,wB;AACA,iD;AACA,2D;AACA,2B;AACA,sC;;AAEA,0B;AACA,oB;AACA,mD;AACA,qC;AACA,S;AACA,K;;AAEA,mD;AACA,sB;AACA,kC;AACA,yB;AACA,0B;AACA,8C;AACA,O;AACA,O;;AAEA,uC;AACA,mE;AACA,6D;AACA,2D;AACA,iE;AACA,6C;AACA,qC;AACA,sB;AACA,S;AACA,K;AACA,oE;AACA,mC;AACA,0C;;AAEA,kB;AACA,G;AACA,G;;AAEA,wE;AACA,E;AACA,gF;AACA,gF;AACA,S;AACA,E;AACA,gF;AACA,gC;AACA,E;AACA,4E;AACA,6E;AACA,2E;AACA,+E;AACA,8E;AACA,8D;AACA,sE;AACA,kB;AACA,0B;;AAEA,yE;AACA,e;AACA,kE;;AAEA,kC;AACA,uC;AACA,iE;AACA,sE;AACA,Y;AACA,kB;AACA,qB;;AAEA,kE;AACA,sB;AACA,0B;AACA,kC;AACA,U;AACA,mD;AACA,K;AACA,mB;AACA,G;;AAEA,wD;;AAEA,+E;AACA,6E;AACA,mB;AACA,gB;AACA,sD;AACA,4B;AACA,oC;AACA,wB;AACA,Y;AACA,+C;AACA,K;AACA,G;;AAEA,oD;AACA,wD;AACA,6B;AACA,4B;AACA,0B;AACA,4D;AACA,kD;AACA,c;AACA,6B;AACA,O;AACA,K;AACA,8C;AACA,sD;AACA,mD;AACA,sC;AACA,6B;AACA,6B;AACA,K;;AAEA,uB;AACA,mB;;AAEA,oB;AACA,uE;AACA,6B;AACA,G;;AAEA,iC;AACA,uE;AACA,2C;AACA,E;;AAEA,uE;AACA,oB;AACA,kF;AACA,kB;;AAEA,oB;AACA,gC;AACA,e;AACA,4C;;AAEA,mB;AACA,8B;AACA,wC;AACA,M;AACA,yE;AACA,8B;AACA,kC;AACA,8C;AACA,c;;AAEA,sE;AACA,iC;AACA,G;AACA,E;;AAEA,wE;AACA,2C;AACA,mE;AACA,4C;AACA,6D;AACA,kB;AACA,yB;;AAEA,2B;AACA,4D;AACA,0E;AACA,uE;AACA,oD;AACA,G;AACA,mB;;AAEA,yB;AACA,uD;;AAEA,oC;AACA,0B;;AAEA,8B;AACA,oC;AACA,iC;AACA,kC;AACA,yD;AACA,6B;AACA,gE;AACA,sD;AACA,kD;AACA,qC;AACA,U;AACA,qD;AACA,K;AACA,G;;AAEA,6C;AACA,0B;AACA,2D;AACA,K;AACA,6B;;AAEA,0E;AACA,iB;AACA,e;AACA,8B;AACA,yB;AACA,O;AACA,Y;AACA,E;;AAEA,uE;AACA,mE;AACA,0E;AACA,gC;AACA,6E;AACA,kB;AACA,oE;AACA,oB;AACA,kD;AACA,8B;AACA,mC;AACA,gB;AACA,sC;AACA,mC;AACA,gB;AACA,O;AACA,K;AACA,U;AACA,0B;AACA,G;AACA,E;;AAEA,kE;AACA,kB;;AAEA,+E;AACA,gF;AACA,yB;AACA,2E;AACA,mC;AACA,uB;AACA,2C;AACA,0B;AACA,2B;AACA,c;AACA,8B;AACA,O;AACA,O;AACA,mB;AACA,gC;AACA,+B;AACA,S;AACA,K;AACA,kB;AACA,G;;AAEA,sD;AACA,kB;AACA,8D;AACA,4C;AACA,sB;AACA,K;;AAEA,8B;AACA,uB;AACA,2C;AACA,6B;AACA,6C;AACA,gD;AACA,4D;AACA,oD;AACA,uC;AACA,Y;AACA,uD;AACA,O;AACA,O;AACA,4C;AACA,gC;AACA,G;;AAEA,kE;AACA,yC;AACA,yC;AACA,gB;AACA,gE;AACA,4D;AACA,K;AACA,K;AACA,6C;AACA,kC;AACA,c;AACA,+C;AACA,K;AACA,6B;AACA,yB;AACA,e;AACA,8B;AACA,6B;AACA,O;AACA,gB;AACA,E;;AAEA,kE;AACA,4C;AACA,gF;AACA,kB;AACA,kD;AACA,uB;AACA,mB;AACA,G;AACA,6B;;AAEA,sD;;AAEA,iE;AACA,8E;AACA,8E;AACA,mE;AACA,wB;AACA,gC;AACA,8C;AACA,2E;AACA,sB;AACA,mE;AACA,6D;AACA,K;AACA,yB;;AAEA,sB;;AAEA,8D;AACA,mD;AACA,6B;AACA,2E;AACA,kC;AACA,+E;AACA,oB;AACA,yB;AACA,+B;AACA,K;AACA,gB;AACA,K;;AAEA,+C;AACA,kC;AACA,c;AACA,8C;AACA,mE;AACA,K;AACA,6B;;AAEA,4E;AACA,8E;AACA,2B;AACA,iB;AACA,4C;AACA,kE;AACA,2D;AACA,2C;AACA,sC;AACA,qC;AACA,oB;AACA,G;;AAEA,8E;AACA,0E;AACA,sB;AACA,a;AACA,8B;AACA,c;AACA,iC;AACA,M;AACA,iC;AACA,qC;AACA,U;AACA,yB;AACA,G;;AAEA,e;AACA,8B;AACA,6B;AACA,O;AACA,gB;AACA,E;;AAEA,uE;AACA,gF;AACA,W;AACA,gF;AACA,kB;AACA,oD;AACA,uB;AACA,iB;AACA,G;AACA,2D;AACA,iB;AACA,uB;AACA,gB;AACA,E;;AAEA,uD;AACA,4C;AACA,kB;;AAEA,0B;AACA,iC;AACA,kC;AACA,wB;AACA,sE;AACA,Y;AACA,8E;AACA,qC;AACA,uD;AACA,K;AACA,G;;AAEA,iC;;AAEA,kE;;AAEA,6B;AACA,8B;AACA,qC;AACA,wD;AACA,kC;AACA,sE;AACA,wD;;AAEA,kD;AACA,0E;AACA,8E;AACA,4E;AACA,6E;AACA,8E;AACA,2E;AACA,yB;AACA,0B;AACA,kC;AACA,kC;AACA,qD;AACA,kC;AACA,mD;AACA,iC;AACA,4D;AACA,K;AACA,G;AACA,E;;AAEA,mE;AACA,wD;AACA,E;AACA,kE;AACA,oE;;AAEA,0D;AACA,gC;AACA,oB;AACA,sB;AACA,wB;AACA,+C;AACA,8B;AACA,Y;AACA,kD;AACA,iE;AACA,4B;AACA,oC;AACA,e;AACA,wB;AACA,U;AACA,oB;AACA,+C;AACA,K;AACA,iC;AACA,U;AACA,iC;AACA,oC;AACA,G;AACA,E;;AAEA,4D;AACA,sB;AACA,8D;AACA,2B;AACA,+B;AACA,U;AACA,sD;AACA,2B;AACA,6B;AACA,G;AACA,E;;AAEA,mE;AACA,0C;AACA,+D;AACA,uE;AACA,uB;AACA,oC;AACA,4C;AACA,sC;AACA,K;AACA,W;AACA,G;;AAEA,mE;;AAEA,gC;AACA,0C;AACA,oB;AACA,W;;AAEA,oE;AACA,Y;AACA,oC;AACA,oD;AACA,6D;AACA,wB;AACA,6B;AACA,wC;AACA,a;AACA,sB;AACA,Q;AACA,kB;AACA,0D;AACA,G;AACA,E;;AAEA,uE;AACA,0E;AACA,wC;AACA,E;AACA,+E;AACA,yE;AACA,gF;AACA,0E;AACA,kE;AACA,kB;AACA,+B;AACA,sB;AACA,4B;AACA,+C;AACA,yD;;AAEA,sB;AACA,sC;AACA,uD;AACA,G;AACA,E;;;AAGA,+D;AACA,qB;AACA,2E;AACA,gD;AACA,iC;AACA,e;AACA,2C;AACA,E;;AAEA,0E;AACA,gB;AACA,8D;AACA,4C;;AAEA,2B;AACA,8C;AACA,oD;AACA,6B;AACA,mC;AACA,Y;AACA,8B;AACA,K;AACA,G;AACA,e;AACA,E;;AAEA,oE;AACA,2B;AACA,sB;AACA,a;AACA,G;;AAEA,6D;AACA,8B;AACA,a;AACA,E;;AAEA,gF;AACA,2E;AACA,8E;AACA,+E;AACA,gF;AACA,yE;AACA,uB;AACA,uD;AACA,kB;AACA,2B;AACA,4E;AACA,oD;AACA,E;AACA,2D;AACA,kB;AACA,4B;AACA,sE;;AAEA,uC;AACA,8B;AACA,mB;AACA,E;;AAEA,8D;AACA,kB;AACA,0C;AACA,4B;AACA,W;AACA,0E;AACA,4E;AACA,6B;AACA,mC;AACA,W;AACA,iD;AACA,E;;AAEA,mE;AACA,+B;AACA,wD;AACA,6B;AACA,kB;AACA,W;;AAEA,sE;AACA,qB;;AAEA,yD;AACA,iC;AACA,kC;;AAEA,uD;AACA,G;AACA,E;;AAEA,6D;AACA,0D;AACA,sE;AACA,+D;AACA,yD;AACA,kB;AACA,yB;AACA,mB;AACA,W;;AAEA,mE;AACA,+D;AACA,sB;;AAEA,iC;AACA,kC;AACA,2E;AACA,wD;AACA,sC;AACA,kE;AACA,iC;AACA,G;AACA,6B;AACA,E;;;AAGA,uB;AACA,8C;AACA,gD;AACA,wB;AACA,sC;AACA,oB;AACA,gB;AACA,6E;AACA,gF;AACA,yF;AACA,qG;AACA,sB;AACA,Y;AACA,uD;AACA,K;AACA,gC;AACA,e;AACA,qD;AACA,4F;AACA,wC;AACA,oC;AACA,G;AACA,E;;;AAGA,uB;AACA,0C;AACA,kB;AACA,c;AACA,0B;AACA,qB;AACA,uC;AACA,wB;AACA,uC;AACA,oC;AACA,sD;AACA,6C;AACA,U;AACA,c;AACA,G;AACA,E;;AAEA,gE;AACA,kB;AACA,gD;AACA,qC;AACA,8B;AACA,M;AACA,sC;AACA,0B;AACA,M;AACA,iD;AACA,+C;AACA,iC;AACA,K;AACA,K;AACA,gB;AACA,E;;;;;;;;;;;;;;;;;;;ACriCA,sE;AACA,sE;AACA,qE;AACA,4B;AACA,E;AACA,oC;AACA,qE;AACA,uB;AACA,gE;AACA,sD;AACA,iB;AACA,gB;;AAEA,yB;AACA,6B;AACA,gF;AACA,+B;AACA,+D;AACA,K;;AAEA,qB;AACA,gF;AACA,oD;AACA,4B;AACA,O;;AAEA,sC;AACA,sD;AACA,K;;AAEA,oC;AACA,+C;AACA,yE;AACA,O;AACA,Y;AACA,2B;AACA,K;AACA,uB;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;;ACvCA,+E;AACA,U;AACA,yC;AACA,wB;AACA,4C;AACA,E;;AAEA,2E;AACA,S;AACA,2C;AACA,+D;AACA,gD;AACA,E;;AAEA,4B;AACA,wC;AACA,E;;AAEA,6E;AACA,8E;AACA,gB;AACA,6D;AACA,oC;AACA,iB;;AAEA,oC;AACA,kD;AACA,qD;AACA,0C;AACA,yC;AACA,sD;AACA,0B;AACA,mD;AACA,uD;AACA,gC;AACA,K;AACA,K;AACA,qD;AACA,E;;;AAGA,qC;AACA,6B;AACA,4B;AACA,E;;;;;;;;;;;;;;;;;;;AC5CA,mC;;AAEA,e;AACA,8D;AACA,wE;AACA,sE;AACA,oE;AACA,gC;AACA,oE;AACA,uC;AACA,4E;AACA,4E;AACA,oC;AACA,4E;AACA,a;AACA,8D;;AAEA,oB;AACA,wD;AACA,6C;AACA,yC;AACA,kB;AACA,2E;AACA,6E;AACA,uB;AACA,mB;AACA,8C;AACA,4B;AACA,+C;AACA,yB;AACA,+E;AACA,gF;AACA,yB;AACA,wB;AACA,8E;AACA,0C;AACA,qC;AACA,4E;AACA,yE;AACA,yE;AACA,4B;AACA,wB;AACA,qD;AACA,E;;AAEA,uC;AACA,mC;AACA,0C;AACA,sD;AACA,K;AACA,iC;AACA,I;AACA,4B;AACA,6B;AACA,I;AACA,yB;AACA,0B;AACA,I;AACA,yB;AACA,0B;AACA,I;;AAEA,mE;AACA,0C;AACA,yC;AACA,oB;AACA,4D;AACA,uC;AACA,6B;AACA,gC;AACA,+B;AACA,6B;AACA,8C;AACA,Q;AACA,K;;AAEA,qC;AACA,kD;AACA,uC;AACA,kC;AACA,6B;AACA,yD;AACA,Q;AACA,K;;AAEA,8E;AACA,uE;AACA,8B;AACA,8D;AACA,6B;AACA,4B;AACA,K;;AAEA,qD;AACA,8D;AACA,iC;AACA,uD;;AAEA,2C;AACA,mE;AACA,I;AACA,oC;AACA,6B;AACA,I;AACA,+E;AACA,2C;AACA,0B;AACA,+B;AACA,G;AACA,G;;;AAGA,yE;AACA,iE;AACA,E;AACA,kD;AACA,E;AACA,+E;AACA,gD;AACA,wE;AACA,0B;AACA,uB;AACA,mD;AACA,mC;AACA,6E;AACA,mC;AACA,yC;AACA,iE;AACA,gC;AACA,mE;AACA,oE;AACA,Y;AACA,+E;AACA,8E;AACA,c;AACA,+B;AACA,qC;AACA,kD;AACA,wB;AACA,mE;AACA,uC;AACA,8C;AACA,0C;AACA,S;AACA,K;AACA,K;;AAEA,0C;AACA,E;;AAEA,8E;AACA,8E;AACA,sE;AACA,mC;AACA,sE;AACA,wC;AACA,8B;AACA,kD;AACA,2C;AACA,+C;AACA,mE;AACA,U;AACA,kD;AACA,6C;AACA,G;AACA,E;;AAEA,gF;AACA,+E;AACA,iE;AACA,uD;AACA,8B;AACA,0B;AACA,8B;AACA,4B;AACA,wC;AACA,wC;AACA,iD;AACA,K;AACA,iB;AACA,qD;AACA,kD;;AAEA,8E;AACA,6C;AACA,wC;AACA,4E;AACA,8E;AACA,6C;AACA,kC;AACA,2C;AACA,uB;AACA,O;;AAEA,6E;AACA,4C;AACA,0C;AACA,gD;;AAEA,qB;AACA,O;AACA,e;AACA,I;AACA,E;;AAEA,wD;AACA,0C;AACA,2B;AACA,kC;AACA,wE;AACA,yC;AACA,sC;AACA,K;AACA,yC;AACA,kC;AACA,mB;AACA,8B;AACA,I;AACA,E;;AAEA,gF;AACA,gC;AACA,qD;AACA,wC;AACA,0E;;AAEA,8E;AACA,6E;AACA,oE;AACA,sD;AACA,6B;AACA,iD;AACA,M;AACA,G;;AAEA,2B;AACA,6D;AACA,I;AACA,E;;AAEA,0E;AACA,kB;AACA,yE;AACA,yE;AACA,8E;AACA,W;;AAEA,4B;AACA,sD;AACA,gE;AACA,6E;AACA,0B;AACA,sE;AACA,kE;AACA,wD;;AAEA,+C;AACA,kD;AACA,gC;AACA,K;;AAEA,2C;AACA,4B;AACA,4E;AACA,oD;AACA,gD;AACA,4B;AACA,+C;AACA,yC;AACA,6C;AACA,oB;AACA,Y;AACA,4D;AACA,K;AACA,K;;AAEA,+C;AACA,E;;AAEA,gD;AACA,sC;AACA,kD;AACA,wD;AACA,kD;AACA,oC;AACA,mE;AACA,mC;AACA,wD;AACA,K;AACA,E;;AAEA,iE;AACA,yB;AACA,sD;AACA,mD;AACA,yC;AACA,yC;AACA,I;;AAEA,qD;AACA,mD;AACA,yC;;AAEA,gF;AACA,mC;AACA,8B;AACA,yB;;AAEA,2B;AACA,iD;AACA,6B;AACA,S;AACA,2D;AACA,mD;AACA,8B;AACA,M;AACA,I;;AAEA,sD;AACA,mD;AACA,yC;AACA,2B;AACA,iD;AACA,8B;AACA,S;AACA,+E;AACA,iE;AACA,8B;AACA,M;AACA,I;;AAEA,6C;AACA,0C;AACA,gC;AACA,6B;AACA,+C;AACA,+E;AACA,sD;AACA,iE;AACA,K;AACA,2B;AACA,iE;AACA,sD;AACA,oD;AACA,M;AACA,I;;AAEA,gF;AACA,2D;AACA,yB;AACA,wB;AACA,4B;AACA,M;AACA,G;AACA,E;;AAEA,0E;AACA,yE;AACA,2E;AACA,wD;AACA,kC;AACA,iD;AACA,gF;AACA,6E;AACA,qB;AACA,sC;AACA,I;AACA,E;;AAEA,6E;AACA,8E;AACA,4D;AACA,2C;AACA,uB;AACA,oD;AACA,yE;AACA,I;AACA,2B;AACA,wE;AACA,wC;AACA,I;AACA,4B;AACA,wE;AACA,8D;AACA,I;AACA,+B;AACA,0E;AACA,iC;AACA,O;AACA,4D;AACA,I;AACA,0E;AACA,+C;AACA,wC;AACA,6C;AACA,6B;AACA,I;AACA,mD;AACA,mD;AACA,6B;AACA,gD;AACA,6B;AACA,I;AACA,oD;AACA,0B;AACA,yC;AACA,4D;AACA,2B;AACA,4B;;AAEA,8B;AACA,0C;AACA,+C;AACA,sC;AACA,gD;AACA,sD;AACA,sE;AACA,O;AACA,+E;AACA,mB;AACA,iD;AACA,I;AACA,6D;AACA,gB;AACA,8D;AACA,gC;;AAEA,sE;AACA,6E;AACA,wC;;AAEA,qC;AACA,gE;AACA,iC;AACA,yC;AACA,gC;AACA,mC;AACA,6E;AACA,6E;AACA,sB;AACA,kC;AACA,sB;AACA,qC;AACA,qD;AACA,gB;AACA,wE;AACA,kC;AACA,S;AACA,Q;AACA,Y;AACA,+C;AACA,uD;AACA,yE;AACA,oC;AACA,mC;AACA,qD;AACA,sB;AACA,qD;AACA,Q;AACA,K;;AAEA,sC;AACA,4E;AACA,gF;AACA,2E;AACA,0E;AACA,Q;AACA,gF;AACA,gF;AACA,kD;AACA,8D;AACA,mC;AACA,gD;AACA,iD;AACA,qE;AACA,8D;AACA,iB;AACA,sC;AACA,4E;AACA,iB;AACA,6B;AACA,sC;AACA,iC;AACA,qC;AACA,Y;AACA,oD;AACA,S;AACA,oB;AACA,M;AACA,G;AACA,E;;AAEA,qB;AACA,+C;AACA,sB;AACA,sB;AACA,sB;AACA,sB;AACA,+B;AACA,gB;AACA,kC;AACA,E;AACA,0E;AACA,kD;AACA,wD;AACA,qC;AACA,kC;AACA,E;;AAEA,gC;AACA,oD;AACA,U;AACA,gD;AACA,uE;AACA,0E;AACA,4C;AACA,6D;AACA,6B;AACA,4B;AACA,uB;AACA,U;AACA,O;;AAEA,yE;AACA,oB;AACA,gC;AACA,uB;;AAEA,0D;;AAEA,+B;AACA,gC;AACA,uB;AACA,4E;AACA,8B;AACA,4D;AACA,uB;AACA,2E;AACA,Q;AACA,K;AACA,I;AACA,E;;AAEA,kC;AACA,mD;AACA,uD;AACA,+E;AACA,iB;AACA,gF;AACA,oB;AACA,0D;AACA,6E;AACA,kB;AACA,4E;AACA,4C;AACA,qB;AACA,2C;AACA,wB;AACA,K;AACA,2C;AACA,wB;AACA,K;AACA,4C;AACA,yB;AACA,K;AACA,4C;AACA,yB;AACA,K;AACA,S;AACA,gD;AACA,oD;AACA,8C;AACA,kD;AACA,wE;AACA,O;AACA,2D;AACA,+B;AACA,iC;AACA,+B;AACA,0E;AACA,Q;AACA,K;AACA,I;AACA,Q;AACA,gD;AACA,4B;AACA,0C;;AAEA,+B;AACA,yC;AACA,qC;AACA,6D;AACA,0C;AACA,iD;AACA,Y;AACA,+D;AACA,S;;AAEA,+B;AACA,qE;AACA,gC;AACA,uB;AACA,oD;AACA,0B;AACA,W;AACA,Q;AACA,K;AACA,I;AACA,U;AACA,8E;AACA,8E;AACA,sB;AACA,+B;AACA,gD;AACA,wC;AACA,gF;AACA,gB;AACA,oB;AACA,+C;AACA,4C;AACA,O;AACA,+B;AACA,0D;AACA,Q;AACA,K;AACA,I;AACA,U;AACA,6E;AACA,6E;AACA,6E;AACA,sC;AACA,gC;AACA,gD;AACA,sC;AACA,4C;AACA,+B;AACA,kC;AACA,yD;AACA,Q;AACA,K;AACA,I;AACA,W;AACA,+D;AACA,sE;AACA,2D;;AAEA,iB;AACA,iD;AACA,8E;AACA,yD;AACA,+C;;AAEA,+E;AACA,gF;AACA,uD;AACA,kD;AACA,+E;;AAEA,+E;AACA,iE;AACA,6C;AACA,yB;AACA,c;AACA,qC;AACA,O;AACA,0C;AACA,K;AACA,I;AACA,e;AACA,+B;AACA,wE;AACA,kC;AACA,iD;;AAEA,mC;AACA,4C;AACA,4D;AACA,6B;AACA,c;AACA,8E;AACA,gE;AACA,uE;AACA,+E;AACA,8D;AACA,kE;AACA,4B;AACA,O;;AAEA,+B;AACA,4B;AACA,uB;AACA,gD;AACA,sC;AACA,kB;AACA,6B;AACA,sE;AACA,6E;AACA,oE;AACA,uE;AACA,2B;AACA,+B;AACA,kB;AACA,2E;AACA,0C;AACA,6D;AACA,W;AACA,sE;AACA,qC;AACA,6E;AACA,S;AACA,qB;AACA,Q;AACA,K;AACA,G;AACA,E;;AAEA,qD;AACA,E;AACA,yE;AACA,8E;AACA,8E;AACA,kB;AACA,E;AACA,gF;AACA,4E;AACA,+E;AACA,sD;AACA,E;AACA,0E;AACA,uE;AACA,wE;AACA,wC;AACA,E;AACA,sC;AACA,oC;AACA,+E;AACA,8E;AACA,+D;AACA,mE;AACA,uB;AACA,+E;AACA,+E;AACA,0E;AACA,6E;AACA,mE;AACA,E;AACA,uE;AACA,4E;AACA,c;AACA,E;AACA,gF;AACA,mE;AACA,yE;AACA,wE;AACA,+E;AACA,6E;AACA,4E;AACA,6E;AACA,oD;AACA,E;AACA,yE;AACA,2E;AACA,E;AACA,E;AACA,kE;AACA,E;AACA,+E;AACA,U;AACA,qC;AACA,6B;AACA,+C;AACA,mD;AACA,iB;AACA,yB;AACA,8D;AACA,G;;AAEA,kD;AACA,4B;AACA,gC;AACA,2D;AACA,iC;AACA,kB;AACA,I;;AAEA,mD;AACA,+C;AACA,uC;AACA,sB;AACA,wB;;AAEA,uB;AACA,gF;AACA,gF;AACA,gF;AACA,0D;AACA,kB;;AAEA,gF;AACA,2E;AACA,+B;AACA,0D;AACA,K;;AAEA,2B;AACA,oC;;AAEA,0D;AACA,M;AACA,8E;AACA,4E;AACA,gF;AACA,gF;AACA,kB;AACA,M;AACA,4E;AACA,uE;AACA,+E;AACA,oE;AACA,sB;AACA,sC;AACA,0B;AACA,yD;AACA,sC;AACA,K;;AAEA,+E;AACA,gF;AACA,2E;AACA,8E;AACA,8E;AACA,oB;AACA,mC;AACA,uB;AACA,kB;AACA,uD;AACA,oE;AACA,K;;AAEA,oB;AACA,0C;AACA,+C;AACA,M;;AAEA,yE;AACA,wE;AACA,oC;AACA,yD;;AAEA,gF;AACA,gF;AACA,+D;AACA,M;AACA,4E;AACA,6E;AACA,yE;AACA,gF;AACA,gF;AACA,kD;AACA,8B;AACA,wD;AACA,oC;AACA,oC;AACA,mB;AACA,8C;AACA,S;AACA,S;AACA,K;;AAEA,kB;AACA,I;AACA,E;AACA,sD;;AAEA,6D;AACA,uB;AACA,sC;AACA,4C;AACA,+E;AACA,gF;AACA,8E;AACA,mC;AACA,iE;AACA,wB;AACA,4B;AACA,yC;AACA,S;AACA,K;AACA,6C;AACA,+C;AACA,0B;AACA,sB;AACA,6D;AACA,W;AACA,S;AACA,K;AACA,K;AACA,qB;AACA,E;;AAEA,qD;AACA,yB;AACA,E;;AAEA,wD;AACA,wB;AACA,E;;;AAGA,0E;AACA,+E;AACA,8E;AACA,iD;AACA,8C;AACA,+B;AACA,6B;AACA,+B;AACA,0B;;AAEA,mC;AACA,iB;AACA,kD;AACA,uC;AACA,uE;AACA,0E;AACA,+E;AACA,e;AACA,8D;AACA,0C;AACA,0C;AACA,O;AACA,4E;AACA,6E;AACA,c;AACA,uD;AACA,kD;AACA,O;AACA,8B;AACA,O;;AAEA,8E;AACA,sB;AACA,0B;AACA,8B;AACA,K;AACA,e;AACA,I;AACA,E;;AAEA,0C;AACA,0C;;;AAGA,yC;AACA,sB;AACA,wE;;AAEA,uB;AACA,8B;AACA,e;AACA,8B;AACA,e;AACA,+B;AACA,e;AACA,mB;AACA,e;AACA,mB;AACA,gB;AACA,4B;AACA,2C;AACA,gB;AACA,gC;AACA,gB;AACA,0B;AACA,e;AACA,0B;AACA,e;AACA,+C;AACA,e;AACA,uB;;AAEA,qC;AACA,iB;AACA,qC;AACA,oC;AACA,oB;AACA,kB;AACA,kB;AACA,I;;AAEA,mE;AACA,2B;AACA,yD;AACA,I;;AAEA,mE;AACA,oB;AACA,4B;AACA,mF;AACA,iE;AACA,kC;AACA,wB;AACA,gC;AACA,0B;AACA,0B;AACA,0B;AACA,yB;AACA,0B;AACA,8B;AACA,4B;AACA,wB;AACA,wB;AACA,wB;AACA,0B;AACA,8B;AACA,2B;AACA,uC;AACA,2B;AACA,8B;AACA,mC;AACA,8B;AACA,gB;AACA,I;;AAEA,kE;AACA,sE;AACA,qE;AACA,wB;AACA,yB;AACA,wB;AACA,sC;AACA,wB;AACA,e;AACA,yC;AACA,yC;AACA,+C;AACA,+C;AACA,kB;AACA,8B;AACA,kB;AACA,0E;AACA,kB;AACA,yD;AACA,+B;AACA,2B;AACA,kB;AACA,0B;AACA,0B;AACA,K;AACA,2B;AACA,2B;AACA,kB;AACA,sB;AACA,sB;AACA,K;;AAEA,2B;AACA,mB;AACA,2B;AACA,4C;AACA,6B;AACA,mE;AACA,qC;AACA,qB;AACA,8B;AACA,wB;AACA,6B;AACA,S;AACA,mB;AACA,Q;AACA,+D;AACA,K;AACA,4B;AACA,8B;AACA,2B;AACA,2C;AACA,2B;AACA,mB;AACA,oD;AACA,oB;AACA,mB;AACA,O;AACA,K;AACA,6B;AACA,6E;AACA,e;AACA,gC;AACA,mC;AACA,sC;AACA,wB;AACA,oB;AACA,wB;AACA,mB;AACA,O;AACA,e;AACA,K;AACA,8B;AACA,8B;AACA,wB;AACA,K;AACA,0B;AACA,e;AACA,4B;AACA,wE;AACA,0B;AACA,iB;AACA,qC;AACA,yB;AACA,oB;AACA,yB;AACA,kB;AACA,kB;AACA,qC;AACA,qE;AACA,wC;AACA,G;AACA,E;;AAEA,mC;AACA,8D;AACA,uB;AACA,yB;AACA,+B;AACA,mC;AACA,qB;AACA,E;;;;;;;;;;;;;;;;;;;ACrmCA,wD;AACA,4B;AACA,wC;AACA,+B;AACA,E;AACA,iE;AACA,sE;AACA,0D;AACA,E;AACA,kE;AACA,kE;AACA,wD;;AAEA,6C;AACA,kB;AACA,0B;;AAEA,2B;;AAEA,gD;AACA,c;AACA,iD;AACA,+B;AACA,mD;AACA,8B;AACA,iB;AACA,uC;AACA,0B;AACA,O;AACA,I;;AAEA,8B;AACA,2C;AACA,wC;AACA,mC;AACA,c;AACA,uD;AACA,O;AACA,K;AACA,wC;AACA,wC;AACA,mC;AACA,O;AACA,U;AACA,mE;AACA,G;;AAEA,uE;AACA,+E;AACA,0E;AACA,gC;AACA,sB;AACA,iD;AACA,8B;AACA,O;AACA,0E;AACA,G;;AAEA,2C;AACA,mD;AACA,yC;AACA,Q;;AAEA,yE;AACA,8E;AACA,yE;AACA,yB;AACA,2D;AACA,E;;AAEA,gF;AACA,sB;AACA,sC;AACA,qC;AACA,oB;;AAEA,uE;AACA,8D;AACA,yC;AACA,uC;AACA,K;;AAEA,sC;;AAEA,gF;AACA,4D;AACA,2E;AACA,gC;AACA,qD;AACA,gC;AACA,qD;AACA,yD;AACA,Q;AACA,I;;AAEA,0B;AACA,oB;AACA,gD;AACA,I;;AAEA,8E;AACA,8E;AACA,4D;AACA,I;AACA,0E;AACA,gE;AACA,gF;AACA,8E;AACA,gF;AACA,sE;AACA,qC;AACA,oB;AACA,sB;;AAEA,mD;AACA,gD;AACA,e;;AAEA,4B;AACA,qB;AACA,e;AACA,O;AACA,+C;AACA,qB;AACA,O;AACA,O;;AAEA,gF;AACA,2C;AACA,wB;AACA,yD;AACA,kB;AACA,I;;AAEA,8C;AACA,oB;AACA,oD;AACA,I;;AAEA,+E;AACA,uB;AACA,4C;AACA,oB;;AAEA,yC;AACA,4D;;AAEA,uD;AACA,kC;;AAEA,8C;AACA,qC;AACA,M;;AAEA,0B;;AAEA,6D;AACA,qE;AACA,+D;AACA,oE;;AAEA,2E;AACA,yC;AACA,2B;AACA,mC;;AAEA,4B;AACA,4C;AACA,0C;AACA,mC;AACA,4E;AACA,gF;AACA,kC;AACA,kC;AACA,gE;AACA,8D;AACA,iB;AACA,S;;AAEA,yB;AACA,wD;AACA,0D;AACA,iD;AACA,8D;;AAEA,2E;AACA,yE;AACA,2E;AACA,4E;AACA,mD;AACA,U;AACA,6E;AACA,wE;AACA,2B;AACA,8C;AACA,qD;AACA,sD;AACA,S;AACA,S;;AAEA,uB;AACA,4E;AACA,2B;AACA,2D;AACA,8E;AACA,uD;AACA,S;AACA,6B;AACA,wB;AACA,qE;AACA,kC;AACA,W;AACA,O;AACA,O;;AAEA,sB;AACA,qC;AACA,mE;AACA,+B;AACA,oD;AACA,0B;AACA,S;AACA,kB;AACA,a;AACA,K;;AAEA,2C;AACA,+D;AACA,8B;AACA,4B;AACA,iC;AACA,uC;AACA,4B;AACA,S;AACA,c;AACA,O;AACA,I;;AAEA,qE;AACA,4E;AACA,oB;AACA,uC;AACA,oB;AACA,qD;AACA,qD;AACA,0C;AACA,K;;AAEA,2C;AACA,I;;AAEA,gF;AACA,kB;AACA,qC;AACA,oB;AACA,mD;AACA,kC;AACA,8D;AACA,iB;AACA,2B;AACA,qB;AACA,M;AACA,I;;AAEA,yE;AACA,yD;AACA,mC;AACA,oB;;AAEA,wE;AACA,2B;AACA,sC;AACA,oC;AACA,iB;AACA,Q;AACA,K;;AAEA,kC;AACA,8C;AACA,8C;AACA,2C;AACA,M;AACA,I;;AAEA,sC;AACA,kC;AACA,+B;AACA,wE;AACA,2E;AACA,gD;AACA,I;AACA,wE;AACA,sD;AACA,mD;AACA,2D;AACA,sE;AACA,wE;AACA,yB;AACA,I;AACA,8E;AACA,2E;AACA,8E;AACA,8C;AACA,uC;AACA,oB;;AAEA,wB;AACA,mD;;AAEA,4E;AACA,0B;AACA,6D;AACA,uC;AACA,a;;AAEA,qC;;AAEA,gF;AACA,0B;AACA,qC;AACA,a;;AAEA,+B;AACA,oD;AACA,wC;AACA,O;;AAEA,kD;AACA,iC;;AAEA,+C;AACA,uB;AACA,e;;AAEA,0E;AACA,yE;AACA,yE;AACA,yD;AACA,0C;AACA,8E;AACA,6E;AACA,6E;AACA,2E;AACA,8E;AACA,wE;AACA,4D;AACA,iB;AACA,4D;AACA,e;AACA,O;;AAEA,0C;AACA,0D;AACA,qE;AACA,gF;AACA,6E;AACA,6B;AACA,2E;AACA,W;;AAEA,oD;AACA,+D;AACA,6B;AACA,8D;AACA,uC;AACA,W;;AAEA,sE;AACA,W;AACA,e;AACA,O;;AAEA,oC;AACA,4D;AACA,O;;AAEA,2E;AACA,8E;AACA,gF;AACA,yB;AACA,kE;AACA,a;;AAEA,sC;AACA,oE;AACA,qE;AACA,+B;AACA,W;AACA,S;AACA,M;AACA,G;AACA,G;;AAEA,gC;AACA,sE;AACA,uE;AACA,kB;AACA,qD;AACA,0B;AACA,sD;AACA,6C;AACA,wB;AACA,uB;AACA,K;AACA,a;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;ACtZA,oE;AACA,6E;AACA,sC;AACA,0D;AACA,wE;AACA,gF;AACA,4C;AACA,wD;AACA,oD;;AAEA,oE;AACA,0C;;AAEA,kD;AACA,4C;AACA,8B;AACA,uB;AACA,mF;;AAEA,wD;AACA,2C;AACA,2B;AACA,e;AACA,6B;AACA,4C;AACA,iC;AACA,+C;AACA,sD;AACA,mC;AACA,yC;AACA,U;AACA,wB;AACA,O;;AAEA,e;AACA,I;;AAEA,yB;AACA,2C;;AAEA,2C;AACA,wB;AACA,4C;AACA,qB;AACA,e;AACA,I;AACA,E;;AAEA,0E;AACA,0C;AACA,mB;AACA,wE;AACA,oE;AACA,yE;AACA,uC;AACA,kF;AACA,6E;AACA,gE;AACA,yC;;AAEA,4E;AACA,4E;AACA,oC;AACA,qF;AACA,gF;;AAEA,kC;;AAEA,yC;AACA,iC;AACA,2B;AACA,uB;AACA,2B;AACA,wD;AACA,uF;AACA,K;;;AAGA,wC;AACA,e;AACA,0C;AACA,qC;AACA,4E;AACA,2E;AACA,4E;AACA,yE;AACA,2E;AACA,8E;AACA,yC;AACA,Q;AACA,kD;AACA,kD;AACA,iD;AACA,6E;AACA,iD;AACA,uF;AACA,Q;AACA,mE;;AAEA,iC;AACA,6B;AACA,0E;AACA,uF;AACA,yF;AACA,O;;AAEA,U;AACA,8B;AACA,wB;AACA,I;AACA,E;;AAEA,2C;AACA,+E;AACA,4D;AACA,0E;AACA,0E;AACA,+E;AACA,8C;AACA,iD;AACA,iE;AACA,6D;AACA,oB;AACA,oC;AACA,uB;AACA,qC;;AAEA,8C;AACA,mE;AACA,+B;AACA,0B;AACA,2C;AACA,+C;AACA,sE;AACA,2C;AACA,4D;AACA,sC;AACA,uB;AACA,O;;AAEA,6B;AACA,kB;AACA,O;;AAEA,kB;AACA,oC;AACA,mC;AACA,8C;AACA,U;AACA,0E;AACA,K;AACA,K;;AAEA,c;AACA,E;;AAEA,+D;AACA,+C;AACA,4D;;AAEA,0C;AACA,4C;AACA,uF;AACA,mD;AACA,sF;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;;;ACtKA,6D;AACA,uC;AACA,E;AACA,6D;AACA,E;AACA,sE;AACA,U;AACA,E;AACA,W;AACA,8E;AACA,6E;AACA,8D;AACA,wD;AACA,0B;AACA,0B;AACA,uD;AACA,yC;;AAEA,a;;AAEA,oB;AACA,mD;AACA,kE;;AAEA,iC;AACA,wB;AACA,uB;AACA,6B;AACA,qE;AACA,K;AACA,iB;AACA,U;AACA,kC;AACA,8B;;AAEA,wC;AACA,kC;AACA,yD;AACA,oD;AACA,oC;AACA,mB;AACA,iE;AACA,+C;AACA,sE;AACA,kE;AACA,gE;AACA,+B;AACA,+D;;AAEA,8B;AACA,yD;;AAEA,0C;AACA,sD;AACA,6C;AACA,sD;AACA,4C;AACA,0C;AACA,4C;AACA,W;AACA,mC;AACA,qD;AACA,S;AACA,O;AACA,G;;AAEA,kC;AACA,oC;AACA,sE;AACA,uE;AACA,qD;;AAEA,wE;AACA,qE;AACA,0D;AACA,wC;AACA,oB;AACA,K;AACA,kC;AACA,e;AACA,K;AACA,E;;AAEA,sE;AACA,iE;AACA,U;AACA,E;AACA,gE;AACA,oE;AACA,iE;AACA,sD;AACA,E;AACA,gF;AACA,2E;AACA,4B;AACA,E;AACA,4E;AACA,E;AACA,+E;AACA,Y;AACA,uD;AACA,0B;AACA,6B;AACA,6C;AACA,2C;AACA,8B;AACA,qC;AACA,qB;AACA,2B;AACA,yB;AACA,6B;AACA,oE;AACA,gC;AACA,c;AACA,K;AACA,+B;AACA,8B;AACA,oB;AACA,4B;AACA,2B;AACA,0E;AACA,oE;AACA,4E;AACA,8D;AACA,S;AACA,0C;AACA,8B;AACA,yC;AACA,oC;AACA,c;AACA,6B;AACA,2B;AACA,6B;AACA,2D;AACA,qC;AACA,O;AACA,e;AACA,wB;AACA,8B;AACA,oD;AACA,yB;AACA,kC;AACA,uB;AACA,kB;AACA,mC;AACA,uB;AACA,kD;AACA,yE;AACA,yE;AACA,O;AACA,Y;AACA,yD;AACA,iE;AACA,8B;AACA,6B;AACA,2B;AACA,kB;AACA,4B;AACA,O;AACA,K;;AAEA,a;AACA,iB;AACA,uB;AACA,G;;AAEA,e;AACA,E;;AAEA,2B;AACA,e;AACA,a;AACA,gB;AACA,c;AACA,gB;AACA,E;;AAEA,iB;AACA,uC;AACA,gC;AACA,qE;AACA,0B;AACA,4C;AACA,yE;AACA,2B;AACA,Y;AACA,0B;AACA,K;AACA,I;AACA,uC;AACA,2D;AACA,wE;AACA,gC;AACA,c;AACA,K;AACA,0B;AACA,4D;AACA,gC;AACA,c;AACA,K;AACA,qC;AACA,I;AACA,+C;AACA,uC;AACA,I;AACA,yC;AACA,+B;AACA,oC;AACA,4B;AACA,+B;AACA,Y;AACA,6B;AACA,K;AACA,I;AACA,wC;AACA,oC;AACA,yB;AACA,0C;AACA,uE;;AAEA,8B;AACA,+B;AACA,2C;AACA,a;AACA,K;;AAEA,qD;AACA,2B;AACA,mC;AACA,qD;;AAEA,oB;AACA,0B;AACA,0B;AACA,yC;AACA,+D;AACA,8C;AACA,yB;AACA,yE;AACA,yB;AACA,K;;AAEA,mB;AACA,iC;AACA,oB;AACA,8B;AACA,oE;AACA,8E;AACA,mE;AACA,yC;AACA,2D;AACA,qE;AACA,+C;AACA,wD;AACA,oE;AACA,4D;AACA,S;AACA,O;AACA,K;;AAEA,qB;AACA,2C;AACA,iD;;AAEA,qB;AACA,qB;AACA,uC;;AAEA,sB;AACA,8B;AACA,sB;AACA,yD;AACA,U;AACA,mD;AACA,K;AACA,I;AACA,2C;AACA,2D;AACA,gF;AACA,0B;AACA,wB;AACA,0B;AACA,mC;AACA,0E;AACA,U;AACA,0C;AACA,uB;AACA,K;AACA,I;AACA,4C;AACA,0B;AACA,wB;AACA,4B;AACA,mC;AACA,2E;AACA,U;AACA,yB;AACA,oC;AACA,4B;AACA,4B;AACA,0B;AACA,gB;AACA,S;AACA,O;AACA,iD;AACA,uC;AACA,0C;AACA,qD;AACA,mB;AACA,mC;AACA,S;AACA,K;AACA,I;AACA,uC;AACA,6B;AACA,a;AACA,0B;AACA,wB;AACA,a;AACA,mC;AACA,sE;AACA,U;AACA,6C;AACA,uB;AACA,U;AACA,gB;AACA,K;AACA,I;AACA,wC;AACA,6B;AACA,a;AACA,0B;AACA,wB;AACA,a;AACA,mC;AACA,+E;AACA,U;AACA,mB;AACA,+D;AACA,oE;AACA,8D;AACA,mE;AACA,c;;AAEA,sE;AACA,kE;AACA,6D;AACA,6C;AACA,iD;AACA,0C;AACA,oD;AACA,2B;AACA,c;AACA,0C;AACA,oD;AACA,2B;AACA,O;AACA,0B;AACA,K;AACA,I;AACA,2C;AACA,2D;AACA,gF;AACA,6B;AACA,a;AACA,0B;AACA,wB;AACA,a;AACA,mC;AACA,+E;AACA,U;AACA,mB;AACA,0C;AACA,4B;AACA,8C;AACA,wD;AACA,2B;AACA,kB;AACA,W;AACA,S;AACA,qB;AACA,yB;AACA,O;AACA,0B;AACA,K;AACA,I;AACA,wD;AACA,wB;AACA,iD;AACA,qE;AACA,wB;AACA,2D;AACA,gC;AACA,8D;AACA,6B;AACA,a;AACA,0B;AACA,yB;;AAEA,kC;AACA,oE;AACA,yB;AACA,2D;AACA,gC;AACA,wB;AACA,I;AACA,uC;AACA,oE;AACA,2E;AACA,kD;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;;AC1ZA,iB;AACA,yD;AACA,kC;AACA,mC;AACA,8E;AACA,kD;AACA,c;AACA,6C;AACA,wC;AACA,M;AACA,+C;AACA,wC;AACA,E;;AAEA,8E;AACA,kE;AACA,6B;AACA,+E;AACA,G;;AAEA,4C;AACA,oC;AACA,iB;AACA,8D;AACA,yB;AACA,kE;AACA,O;AACA,gC;AACA,uC;AACA,wB;AACA,yC;AACA,K;AACA,K;;AAEA,yB;AACA,8C;AACA,8B;AACA,6B;AACA,O;AACA,G;AACA,E;;;AAGA,0F;;AAEA,8B;AACA,sC;AACA,oC;AACA,oD;AACA,uC;AACA,K;;AAEA,2B;AACA,yC;AACA,mC;AACA,oD;AACA,iC;AACA,K;;AAEA,e;AACA,I;AACA,oE;AACA,gE;AACA,oE;AACA,sE;AACA,sB;;AAEA,gF;AACA,e;;AAEA,0E;AACA,W;;AAEA,+E;AACA,8E;AACA,gF;AACA,+E;AACA,gF;AACA,4E;AACA,8E;AACA,S;;AAEA,oE;AACA,mE;;;AAGA,6D;AACA,8D;AACA,iE;AACA,yB;AACA,I;AACA,8D;AACA,4C;AACA,mB;AACA,4C;AACA,sB;AACA,iE;AACA,uD;AACA,6B;AACA,8B;AACA,qE;AACA,iE;AACA,kB;AACA,0B;AACA,mD;AACA,qC;AACA,mD;AACA,I;AACA,wE;AACA,+B;AACA,0B;AACA,4D;AACA,0B;AACA,gE;AACA,sE;AACA,qE;AACA,uE;AACA,oD;AACA,qB;AACA,wD;AACA,gB;AACA,Y;AACA,O;;AAEA,+C;AACA,sB;AACA,4B;AACA,0B;AACA,K;AACA,G;;AAEA,sC;AACA,+D;AACA,oB;AACA,sB;AACA,oB;AACA,G;AACA,0D;AACA,oB;;AAEA,8E;AACA,oB;AACA,mC;;AAEA,sC;AACA,qC;AACA,oD;AACA,K;AACA,+E;AACA,mD;AACA,uB;AACA,yC;AACA,+E;AACA,e;AACA,e;AACA,e;AACA,qD;AACA,8B;AACA,gD;AACA,qC;AACA,0B;AACA,kF;AACA,6D;AACA,c;AACA,gB;AACA,0D;AACA,oE;AACA,iC;AACA,mE;AACA,S;AACA,0E;AACA,O;AACA,K;AACA,kB;AACA,uC;AACA,wD;AACA,kE;AACA,+B;AACA,iE;AACA,O;AACA,K;AACA,gC;AACA,K;;;AAGA,E;;;AAGA,2C;AACA,kC;AACA,+C;AACA,iD;AACA,uD;AACA,I;AACA,kE;AACA,0C;AACA,0B;AACA,mE;AACA,Q;AACA,+D;AACA,K;AACA,4B;AACA,6C;AACA,4B;AACA,6C;AACA,O;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AChNA,sC;AACA,kB;AACA,2E;AACA,E;;AAEA,gD;;;;;;;;;;;;;;;;;;;;ACLA,wE;;AAEA,8E;AACA,+E;AACA,8E;AACA,4E;AACA,gF;AACA,4E;AACA,0C;AACA,6D;AACA,kB;AACA,0B;;AAEA,iD;AACA,8E;AACA,kC;AACA,mC;AACA,sE;AACA,4D;AACA,iC;AACA,wC;AACA,U;AACA,qD;AACA,G;AACA,0C;;AAEA,qB;AACA,8D;AACA,wB;AACA,kD;AACA,sC;AACA,qB;AACA,4D;AACA,oC;AACA,mE;AACA,kE;AACA,yD;AACA,wD;AACA,2D;AACA,qD;AACA,Q;AACA,0C;AACA,oC;AACA,8E;AACA,iD;AACA,O;AACA,M;AACA,U;AACA,2C;AACA,wB;AACA,oC;AACA,sC;AACA,kE;AACA,qB;AACA,gC;AACA,O;AACA,M;AACA,G;;AAEA,sE;AACA,e;AACA,oD;AACA,gC;AACA,a;AACA,uD;AACA,gD;AACA,qC;AACA,+C;AACA,I;AACA,4C;AACA,0D;AACA,yB;AACA,I;AACA,E;;AAEA,kF;AACA,wE;AACA,wD;;AAEA,8B;AACA,sE;AACA,4E;AACA,8E;AACA,2E;AACA,6E;AACA,gD;AACA,+B;AACA,kD;AACA,wB;AACA,gF;AACA,iB;AACA,yD;AACA,uC;AACA,6B;AACA,+E;AACA,uD;AACA,gB;AACA,sC;AACA,S;AACA,Q;AACA,sC;AACA,wB;AACA,sE;AACA,iB;AACA,iD;AACA,iB;AACA,2D;AACA,iD;AACA,mD;AACA,6B;AACA,yC;AACA,2D;AACA,yD;AACA,gB;AACA,gD;AACA,S;AACA,Q;AACA,0C;AACA,wB;AACA,sC;AACA,iB;AACA,wD;;AAEA,wB;AACA,6E;AACA,2E;AACA,oD;AACA,sB;AACA,e;AACA,2E;AACA,2D;AACA,Q;AACA,8B;AACA,wB;AACA,sE;AACA,iB;AACA,gF;AACA,wC;AACA,+C;AACA,yC;AACA,2D;AACA,iD;AACA,gB;AACA,wC;AACA,S;AACA,O;AACA,M;AACA,U;AACA,+B;AACA,oC;AACA,oD;AACA,iD;AACA,iD;AACA,S;AACA,Q;AACA,sC;AACA,wB;AACA,uC;AACA,yC;AACA,wC;AACA,qD;AACA,sE;AACA,S;AACA,Q;AACA,8B;AACA,wB;AACA,uC;AACA,iE;AACA,S;AACA,O;AACA,M;AACA,G;;AAEA,kE;AACA,0C;AACA,iE;AACA,qB;;AAEA,+B;AACA,4E;AACA,0E;AACA,+E;AACA,+E;AACA,8C;AACA,M;AACA,+E;AACA,2E;AACA,yE;AACA,6E;AACA,+E;AACA,wE;AACA,iB;AACA,M;AACA,gF;AACA,oE;AACA,8E;AACA,iC;AACA,yB;AACA,kD;AACA,oD;AACA,S;AACA,uB;AACA,M;AACA,G;;AAEA,gB;AACA,E;;;;;;;;;;;;;;;;;;;AC9MA,qD;AACA,uD;AACA,E;;AAEA,kD;AACA,uC;AACA,kB;AACA,kB;AACA,wC;AACA,yD;AACA,6E;AACA,K;AACA,0E;AACA,0B;AACA,U;AACA,qC;AACA,G;AACA,E;;AAEA,4D;AACA,kB;AACA,2C;AACA,E;;AAEA,+D;AACA,kB;AACA,sD;AACA,uC;AACA,E;;AAEA,yD;AACA,kB;AACA,kD;AACA,E;;AAEA,2D;AACA,e;AACA,E;;AAEA,+D;AACA,kB;AACA,8C;AACA,E;;AAEA,6C;AACA,qD;AACA,qD;AACA,sC;;AAEA,qD;AACA,qD;AACA,0C;AACA,qC;AACA,kD;AACA,E;;AAEA,yD;AACA,oE;AACA,mD;AACA,gD;AACA,mE;AACA,6B;AACA,E;;AAEA,gF;AACA,uE;AACA,8E;AACA,8E;AACA,uC;AACA,6D;AACA,gC;AACA,8C;AACA,sB;AACA,gB;AACA,gB;;AAEA,8B;AACA,+B;AACA,oC;AACA,oD;AACA,4B;AACA,uD;AACA,wC;AACA,sC;AACA,uC;AACA,oE;AACA,8B;AACA,K;AACA,gB;AACA,G;;AAEA,wE;AACA,0E;AACA,wE;AACA,kD;AACA,oD;AACA,2E;AACA,iB;AACA,sB;AACA,K;AACA,G;;AAEA,c;AACA,E;;AAEA,sC;AACA,4C;AACA,G","sourcesContent":["// XXX type checking on selectors (graceful error if malformed)\r\n\r\n// LocalCollection: a set of documents that supports queries and modifiers.\r\n\r\n// Cursor: a specification for a particular subset of documents, w/\r\n// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),\r\n\r\n// ObserveHandle: the return value of a live query.\r\n\r\nLocalCollection = function (name) {\r\n  var self = this;\r\n  self.name = name;\r\n  // _id -> document (also containing id)\r\n  self._docs = new LocalCollection._IdMap;\r\n\r\n  self._observeQueue = new Meteor._SynchronousQueue();\r\n\r\n  self.next_qid = 1; // live query id generator\r\n\r\n  // qid -> live query object. keys:\r\n  //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\r\n  //  results: array (ordered) or object (unordered) of current results\r\n  //    (aliased with self._docs!)\r\n  //  resultsSnapshot: snapshot of results. null if not paused.\r\n  //  cursor: Cursor object for the query.\r\n  //  selector, sorter, (callbacks): functions\r\n  self.queries = {};\r\n\r\n  // null if not saving originals; an IdMap from id to original document value if\r\n  // saving originals. See comments before saveOriginals().\r\n  self._savedOriginals = null;\r\n\r\n  // True when observers are paused and we should not send callbacks.\r\n  self.paused = false;\r\n};\r\n\r\nMinimongo = {};\r\n\r\n// Object exported only for unit testing.\r\n// Use it to export private functions to test in Tinytest.\r\nMinimongoTest = {};\r\n\r\nLocalCollection._applyChanges = function (doc, changeFields) {\r\n  _.each(changeFields, function (value, key) {\r\n    if (value === undefined)\r\n      delete doc[key];\r\n    else\r\n      doc[key] = value;\r\n  });\r\n};\r\n\r\nMinimongoError = function (message) {\r\n  var e = new Error(message);\r\n  e.name = \"MinimongoError\";\r\n  return e;\r\n};\r\n\r\n\r\n// options may include sort, skip, limit, reactive\r\n// sort may be any of these forms:\r\n//     {a: 1, b: -1}\r\n//     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\r\n//     [\"a\", [\"b\", \"desc\"]]\r\n//   (in the first form you're beholden to key enumeration order in\r\n//   your javascript VM)\r\n//\r\n// reactive: if given, and false, don't register with Deps (default\r\n// is true)\r\n//\r\n// XXX possibly should support retrieving a subset of fields? and\r\n// have it be a hint (ignored on the client, when not copying the\r\n// doc?)\r\n//\r\n// XXX sort does not yet support subkeys ('a.b') .. fix that!\r\n// XXX add one more sort form: \"key\"\r\n// XXX tests\r\nLocalCollection.prototype.find = function (selector, options) {\r\n  // default syntax for everything is to omit the selector argument.\r\n  // but if selector is explicitly passed in as false or undefined, we\r\n  // want a selector that matches nothing.\r\n  if (arguments.length === 0)\r\n    selector = {};\r\n\r\n  return new LocalCollection.Cursor(this, selector, options);\r\n};\r\n\r\n// don't call this ctor directly.  use LocalCollection.find().\r\nLocalCollection.Cursor = function (collection, selector, options) {\r\n  var self = this;\r\n  if (!options) options = {};\r\n\r\n  self.collection = collection;\r\n  self.sorter = null;\r\n\r\n  if (LocalCollection._selectorIsId(selector)) {\r\n    // stash for fast path\r\n    self._selectorId = selector;\r\n    self.matcher = new Minimongo.Matcher(selector, self);\r\n  } else {\r\n    self._selectorId = undefined;\r\n    self.matcher = new Minimongo.Matcher(selector, self);\r\n    if (self.matcher.hasGeoQuery() || options.sort) {\r\n      self.sorter = new Minimongo.Sorter(options.sort || [],\r\n                                         { matcher: self.matcher });\r\n    }\r\n  }\r\n  self.skip = options.skip;\r\n  self.limit = options.limit;\r\n  self.fields = options.fields;\r\n\r\n  if (self.fields)\r\n    self.projectionFn = LocalCollection._compileProjection(self.fields);\r\n\r\n  self._transform = LocalCollection.wrapTransform(options.transform);\r\n\r\n  // by default, queries register w/ Deps when it is available.\r\n  if (typeof Deps !== \"undefined\")\r\n    self.reactive = (options.reactive === undefined) ? true : options.reactive;\r\n};\r\n\r\n// Since we don't actually have a \"nextObject\" interface, there's really no\r\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\r\n// to fetch/map/forEach return nothing the second time.\r\n// XXX COMPAT WITH 0.8.1\r\nLocalCollection.Cursor.prototype.rewind = function () {\r\n};\r\n\r\nLocalCollection.prototype.findOne = function (selector, options) {\r\n  if (arguments.length === 0)\r\n    selector = {};\r\n\r\n  // NOTE: by setting limit 1 here, we end up using very inefficient\r\n  // code that recomputes the whole query on each update. The upside is\r\n  // that when you reactively depend on a findOne you only get\r\n  // invalidated when the found object changes, not any object in the\r\n  // collection. Most findOne will be by id, which has a fast path, so\r\n  // this might not be a big deal. In most cases, invalidation causes\r\n  // the called to re-query anyway, so this should be a net performance\r\n  // improvement.\r\n  options = options || {};\r\n  options.limit = 1;\r\n\r\n  return this.find(selector, options).fetch()[0];\r\n};\r\n\r\nLocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {\r\n  var self = this;\r\n\r\n  var objects = self._getRawObjects({ordered: true});\r\n\r\n  if (self.reactive) {\r\n    self._depend({\r\n      addedBefore: true,\r\n      removed: true,\r\n      changed: true,\r\n      movedBefore: true});\r\n  }\r\n\r\n  _.each(objects, function (elt, i) {\r\n    if (self.projectionFn) {\r\n      elt = self.projectionFn(elt);\r\n    } else {\r\n      // projection functions always clone the pieces they use, but if not we\r\n      // have to do it here.\r\n      elt = EJSON.clone(elt);\r\n    }\r\n\r\n    if (self._transform)\r\n      elt = self._transform(elt);\r\n    callback.call(thisArg, elt, i, self);\r\n  });\r\n};\r\n\r\nLocalCollection.Cursor.prototype.getTransform = function () {\r\n  return this._transform;\r\n};\r\n\r\nLocalCollection.Cursor.prototype.map = function (callback, thisArg) {\r\n  var self = this;\r\n  var res = [];\r\n  self.forEach(function (doc, index) {\r\n    res.push(callback.call(thisArg, doc, index, self));\r\n  });\r\n  return res;\r\n};\r\n\r\nLocalCollection.Cursor.prototype.fetch = function () {\r\n  var self = this;\r\n  var res = [];\r\n  self.forEach(function (doc) {\r\n    res.push(doc);\r\n  });\r\n  return res;\r\n};\r\n\r\nLocalCollection.Cursor.prototype.count = function () {\r\n  var self = this;\r\n\r\n  if (self.reactive)\r\n    self._depend({added: true, removed: true},\r\n                 true /* allow the observe to be unordered */);\r\n\r\n  return self._getRawObjects({ordered: true}).length;\r\n};\r\n\r\nLocalCollection.Cursor.prototype._publishCursor = function (sub) {\r\n  var self = this;\r\n  if (! self.collection.name)\r\n    throw new Error(\"Can't publish a cursor from a collection without a name.\");\r\n  var collection = self.collection.name;\r\n\r\n  // XXX minimongo should not depend on mongo-livedata!\r\n  return Meteor.Collection._publishCursor(self, sub, collection);\r\n};\r\n\r\nLocalCollection.Cursor.prototype._getCollectionName = function () {\r\n  var self = this;\r\n  return self.collection.name;\r\n};\r\n\r\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\r\n  if (callbacks.added && callbacks.addedBefore)\r\n    throw new Error(\"Please specify only one of added() and addedBefore()\");\r\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\r\n};\r\n\r\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {\r\n  if (callbacks.addedAt && callbacks.added)\r\n    throw new Error(\"Please specify only one of added() and addedAt()\");\r\n  if (callbacks.changedAt && callbacks.changed)\r\n    throw new Error(\"Please specify only one of changed() and changedAt()\");\r\n  if (callbacks.removed && callbacks.removedAt)\r\n    throw new Error(\"Please specify only one of removed() and removedAt()\");\r\n\r\n  return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt\r\n            || callbacks.removedAt);\r\n};\r\n\r\n// the handle that comes back from observe.\r\nLocalCollection.ObserveHandle = function () {};\r\n\r\n// options to contain:\r\n//  * callbacks for observe():\r\n//    - addedAt (document, atIndex)\r\n//    - added (document)\r\n//    - changedAt (newDocument, oldDocument, atIndex)\r\n//    - changed (newDocument, oldDocument)\r\n//    - removedAt (document, atIndex)\r\n//    - removed (document)\r\n//    - movedTo (document, oldIndex, newIndex)\r\n//\r\n// attributes available on returned query handle:\r\n//  * stop(): end updates\r\n//  * collection: the collection this query is querying\r\n//\r\n// iff x is a returned query handle, (x instanceof\r\n// LocalCollection.ObserveHandle) is true\r\n//\r\n// initial results delivered through added callback\r\n// XXX maybe callbacks should take a list of objects, to expose transactions?\r\n// XXX maybe support field limiting (to limit what you're notified on)\r\n\r\n_.extend(LocalCollection.Cursor.prototype, {\r\n  observe: function (options) {\r\n    var self = this;\r\n    return LocalCollection._observeFromObserveChanges(self, options);\r\n  },\r\n  observeChanges: function (options) {\r\n    var self = this;\r\n\r\n    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\r\n\r\n    // there are several places that assume you aren't combining skip/limit with\r\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\r\n    // comment in _modifyAndNotify\r\n    // XXX allow skip/limit with unordered observe\r\n    if (!options._allow_unordered && !ordered && (self.skip || self.limit))\r\n      throw new Error(\"must use ordered observe with skip or limit\");\r\n\r\n    if (self.fields && (self.fields._id === 0 || self.fields._id === false))\r\n      throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\r\n\r\n    var query = {\r\n      matcher: self.matcher, // not fast pathed\r\n      sorter: ordered && self.sorter,\r\n      distances: (\r\n        self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap),\r\n      resultsSnapshot: null,\r\n      ordered: ordered,\r\n      cursor: self,\r\n      projectionFn: self.projectionFn\r\n    };\r\n    var qid;\r\n\r\n    // Non-reactive queries call added[Before] and then never call anything\r\n    // else.\r\n    if (self.reactive) {\r\n      qid = self.collection.next_qid++;\r\n      self.collection.queries[qid] = query;\r\n    }\r\n    query.results = self._getRawObjects({\r\n      ordered: ordered, distances: query.distances});\r\n    if (self.collection.paused)\r\n      query.resultsSnapshot = (ordered ? [] : new LocalCollection._IdMap);\r\n\r\n    // wrap callbacks we were passed. callbacks only fire when not paused and\r\n    // are never undefined\r\n    // Filters out blacklisted fields according to cursor's projection.\r\n    // XXX wrong place for this?\r\n\r\n    // furthermore, callbacks enqueue until the operation we're working on is\r\n    // done.\r\n    var wrapCallback = function (f, fieldsIndex, ignoreEmptyFields) {\r\n      if (!f)\r\n        return function () {};\r\n      return function (/*args*/) {\r\n        var context = this;\r\n        var args = arguments;\r\n\r\n        if (self.collection.paused)\r\n          return;\r\n\r\n        if (fieldsIndex !== undefined && self.projectionFn) {\r\n          args[fieldsIndex] = self.projectionFn(args[fieldsIndex]);\r\n          if (ignoreEmptyFields && _.isEmpty(args[fieldsIndex]))\r\n            return;\r\n        }\r\n\r\n        self.collection._observeQueue.queueTask(function () {\r\n          f.apply(context, args);\r\n        });\r\n      };\r\n    };\r\n    query.added = wrapCallback(options.added, 1);\r\n    query.changed = wrapCallback(options.changed, 1, true);\r\n    query.removed = wrapCallback(options.removed);\r\n    if (ordered) {\r\n      query.addedBefore = wrapCallback(options.addedBefore, 1);\r\n      query.movedBefore = wrapCallback(options.movedBefore);\r\n    }\r\n\r\n    if (!options._suppress_initial && !self.collection.paused) {\r\n      // XXX unify ordered and unordered interface\r\n      var each = ordered\r\n            ? _.bind(_.each, null, query.results)\r\n            : _.bind(query.results.forEach, query.results);\r\n      each(function (doc) {\r\n        var fields = EJSON.clone(doc);\r\n\r\n        delete fields._id;\r\n        if (ordered)\r\n          query.addedBefore(doc._id, fields, null);\r\n        query.added(doc._id, fields);\r\n      });\r\n    }\r\n\r\n    var handle = new LocalCollection.ObserveHandle;\r\n    _.extend(handle, {\r\n      collection: self.collection,\r\n      stop: function () {\r\n        if (self.reactive)\r\n          delete self.collection.queries[qid];\r\n      }\r\n    });\r\n\r\n    if (self.reactive && Deps.active) {\r\n      // XXX in many cases, the same observe will be recreated when\r\n      // the current autorun is rerun.  we could save work by\r\n      // letting it linger across rerun and potentially get\r\n      // repurposed if the same observe is performed, using logic\r\n      // similar to that of Meteor.subscribe.\r\n      Deps.onInvalidate(function () {\r\n        handle.stop();\r\n      });\r\n    }\r\n    // run the observe callbacks resulting from the initial contents\r\n    // before we leave the observe.\r\n    self.collection._observeQueue.drain();\r\n\r\n    return handle;\r\n  }\r\n});\r\n\r\n// Returns a collection of matching objects, but doesn't deep copy them.\r\n//\r\n// If ordered is set, returns a sorted array, respecting sorter, skip, and limit\r\n// properties of the query.  if sorter is falsey, no sort -- you get the natural\r\n// order.\r\n//\r\n// If ordered is not set, returns an object mapping from ID to doc (sorter, skip\r\n// and limit should not be set).\r\n//\r\n// If ordered is set and this cursor is a $near geoquery, then this function\r\n// will use an _IdMap to track each distance from the $near argument point in\r\n// order to use it as a sort key. If an _IdMap is passed in the 'distances'\r\n// argument, this function will clear it and use it for this purpose (otherwise\r\n// it will just create its own _IdMap). The observeChanges implementation uses\r\n// this to remember the distances after this function returns.\r\nLocalCollection.Cursor.prototype._getRawObjects = function (options) {\r\n  var self = this;\r\n  options = options || {};\r\n\r\n  // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\r\n  // compatible\r\n  var results = options.ordered ? [] : new LocalCollection._IdMap;\r\n\r\n  // fast path for single ID value\r\n  if (self._selectorId !== undefined) {\r\n    // If you have non-zero skip and ask for a single id, you get\r\n    // nothing. This is so it matches the behavior of the '{_id: foo}'\r\n    // path.\r\n    if (self.skip)\r\n      return results;\r\n\r\n    var selectedDoc = self.collection._docs.get(self._selectorId);\r\n    if (selectedDoc) {\r\n      if (options.ordered)\r\n        results.push(selectedDoc);\r\n      else\r\n        results.set(self._selectorId, selectedDoc);\r\n    }\r\n    return results;\r\n  }\r\n\r\n  // slow path for arbitrary selector, sort, skip, limit\r\n\r\n  // in the observeChanges case, distances is actually part of the \"query\" (ie,\r\n  // live results set) object.  in other cases, distances is only used inside\r\n  // this function.\r\n  var distances;\r\n  if (self.matcher.hasGeoQuery() && options.ordered) {\r\n    if (options.distances) {\r\n      distances = options.distances;\r\n      distances.clear();\r\n    } else {\r\n      distances = new LocalCollection._IdMap();\r\n    }\r\n  }\r\n\r\n  self.collection._docs.forEach(function (doc, id) {\r\n    var matchResult = self.matcher.documentMatches(doc);\r\n    if (matchResult.result) {\r\n      if (options.ordered) {\r\n        results.push(doc);\r\n        if (distances && matchResult.distance !== undefined)\r\n          distances.set(id, matchResult.distance);\r\n      } else {\r\n        results.set(id, doc);\r\n      }\r\n    }\r\n    // Fast path for limited unsorted queries.\r\n    // XXX 'length' check here seems wrong for ordered\r\n    if (self.limit && !self.skip && !self.sorter &&\r\n        results.length === self.limit)\r\n      return false;  // break\r\n    return true;  // continue\r\n  });\r\n\r\n  if (!options.ordered)\r\n    return results;\r\n\r\n  if (self.sorter) {\r\n    var comparator = self.sorter.getComparator({distances: distances});\r\n    results.sort(comparator);\r\n  }\r\n\r\n  var idx_start = self.skip || 0;\r\n  var idx_end = self.limit ? (self.limit + idx_start) : results.length;\r\n  return results.slice(idx_start, idx_end);\r\n};\r\n\r\n// XXX Maybe we need a version of observe that just calls a callback if\r\n// anything changed.\r\nLocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {\r\n  var self = this;\r\n\r\n  if (Deps.active) {\r\n    var v = new Deps.Dependency;\r\n    v.depend();\r\n    var notifyChange = _.bind(v.changed, v);\r\n\r\n    var options = {\r\n      _suppress_initial: true,\r\n      _allow_unordered: _allow_unordered\r\n    };\r\n    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],\r\n           function (fnName) {\r\n             if (changers[fnName])\r\n               options[fnName] = notifyChange;\r\n           });\r\n\r\n    // observeChanges will stop() when this computation is invalidated\r\n    self.observeChanges(options);\r\n  }\r\n};\r\n\r\n// XXX enforce rule that field names can't start with '$' or contain '.'\r\n// (real mongodb does in fact enforce this)\r\n// XXX possibly enforce that 'undefined' does not appear (we assume\r\n// this in our handling of null and $exists)\r\nLocalCollection.prototype.insert = function (doc, callback) {\r\n  var self = this;\r\n  doc = EJSON.clone(doc);\r\n\r\n  if (!_.has(doc, '_id')) {\r\n    // if you really want to use ObjectIDs, set this global.\r\n    // Meteor.Collection specifies its own ids and does not use this code.\r\n    doc._id = LocalCollection._useOID ? new LocalCollection._ObjectID()\r\n                                      : Random.id();\r\n  }\r\n  var id = doc._id;\r\n\r\n  if (self._docs.has(id))\r\n    throw MinimongoError(\"Duplicate _id '\" + id + \"'\");\r\n\r\n  self._saveOriginal(id, undefined);\r\n  self._docs.set(id, doc);\r\n\r\n  var queriesToRecompute = [];\r\n  // trigger live queries that match\r\n  for (var qid in self.queries) {\r\n    var query = self.queries[qid];\r\n    var matchResult = query.matcher.documentMatches(doc);\r\n    if (matchResult.result) {\r\n      if (query.distances && matchResult.distance !== undefined)\r\n        query.distances.set(id, matchResult.distance);\r\n      if (query.cursor.skip || query.cursor.limit)\r\n        queriesToRecompute.push(qid);\r\n      else\r\n        LocalCollection._insertInResults(query, doc);\r\n    }\r\n  }\r\n\r\n  _.each(queriesToRecompute, function (qid) {\r\n    if (self.queries[qid])\r\n      LocalCollection._recomputeResults(self.queries[qid]);\r\n  });\r\n  self._observeQueue.drain();\r\n\r\n  // Defer because the caller likely doesn't expect the callback to be run\r\n  // immediately.\r\n  if (callback)\r\n    Meteor.defer(function () {\r\n      callback(null, id);\r\n    });\r\n  return id;\r\n};\r\n\r\n// Iterates over a subset of documents that could match selector; calls\r\n// f(doc, id) on each of them.  Specifically, if selector specifies\r\n// specific _id's, it only looks at those.  doc is *not* cloned: it is the\r\n// same object that is in _docs.\r\nLocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {\r\n  var self = this;\r\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\r\n  if (specificIds) {\r\n    for (var i = 0; i < specificIds.length; ++i) {\r\n      var id = specificIds[i];\r\n      var doc = self._docs.get(id);\r\n      if (doc) {\r\n        var breakIfFalse = f(doc, id);\r\n        if (breakIfFalse === false)\r\n          break;\r\n      }\r\n    }\r\n  } else {\r\n    self._docs.forEach(f);\r\n  }\r\n};\r\n\r\nLocalCollection.prototype.remove = function (selector, callback) {\r\n  var self = this;\r\n\r\n  // Easy special case: if we're not calling observeChanges callbacks and we're\r\n  // not saving originals and we got asked to remove everything, then just empty\r\n  // everything directly.\r\n  if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {\r\n    var result = self._docs.size();\r\n    self._docs.clear();\r\n    _.each(self.queries, function (query) {\r\n      if (query.ordered) {\r\n        query.results = [];\r\n      } else {\r\n        query.results.clear();\r\n      }\r\n    });\r\n    if (callback) {\r\n      Meteor.defer(function () {\r\n        callback(null, result);\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  var matcher = new Minimongo.Matcher(selector, self);\r\n  var remove = [];\r\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {\r\n    if (matcher.documentMatches(doc).result)\r\n      remove.push(id);\r\n  });\r\n\r\n  var queriesToRecompute = [];\r\n  var queryRemove = [];\r\n  for (var i = 0; i < remove.length; i++) {\r\n    var removeId = remove[i];\r\n    var removeDoc = self._docs.get(removeId);\r\n    _.each(self.queries, function (query, qid) {\r\n      if (query.matcher.documentMatches(removeDoc).result) {\r\n        if (query.cursor.skip || query.cursor.limit)\r\n          queriesToRecompute.push(qid);\r\n        else\r\n          queryRemove.push({qid: qid, doc: removeDoc});\r\n      }\r\n    });\r\n    self._saveOriginal(removeId, removeDoc);\r\n    self._docs.remove(removeId);\r\n  }\r\n\r\n  // run live query callbacks _after_ we've removed the documents.\r\n  _.each(queryRemove, function (remove) {\r\n    var query = self.queries[remove.qid];\r\n    if (query) {\r\n      query.distances && query.distances.remove(remove.doc._id);\r\n      LocalCollection._removeFromResults(query, remove.doc);\r\n    }\r\n  });\r\n  _.each(queriesToRecompute, function (qid) {\r\n    var query = self.queries[qid];\r\n    if (query)\r\n      LocalCollection._recomputeResults(query);\r\n  });\r\n  self._observeQueue.drain();\r\n  result = remove.length;\r\n  if (callback)\r\n    Meteor.defer(function () {\r\n      callback(null, result);\r\n    });\r\n  return result;\r\n};\r\n\r\n// XXX atomicity: if multi is true, and one modification fails, do\r\n// we rollback the whole operation, or what?\r\nLocalCollection.prototype.update = function (selector, mod, options, callback) {\r\n  var self = this;\r\n  if (! callback && options instanceof Function) {\r\n    callback = options;\r\n    options = null;\r\n  }\r\n  if (!options) options = {};\r\n\r\n  var matcher = new Minimongo.Matcher(selector, self);\r\n\r\n  // Save the original results of any query that we might need to\r\n  // _recomputeResults on, because _modifyAndNotify will mutate the objects in\r\n  // it. (We don't need to save the original results of paused queries because\r\n  // they already have a resultsSnapshot and we won't be diffing in\r\n  // _recomputeResults.)\r\n  var qidToOriginalResults = {};\r\n  _.each(self.queries, function (query, qid) {\r\n    // XXX for now, skip/limit implies ordered observe, so query.results is\r\n    // always an array\r\n    if ((query.cursor.skip || query.cursor.limit) && !query.paused)\r\n      qidToOriginalResults[qid] = EJSON.clone(query.results);\r\n  });\r\n  var recomputeQids = {};\r\n\r\n  var updateCount = 0;\r\n\r\n  self._eachPossiblyMatchingDoc(selector, function (doc, id) {\r\n    var queryResult = matcher.documentMatches(doc);\r\n    if (queryResult.result) {\r\n      // XXX Should we save the original even if mod ends up being a no-op?\r\n      self._saveOriginal(id, doc);\r\n      self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);\r\n      ++updateCount;\r\n      if (!options.multi)\r\n        return false;  // break\r\n    }\r\n    return true;\r\n  });\r\n\r\n  _.each(recomputeQids, function (dummy, qid) {\r\n    var query = self.queries[qid];\r\n    if (query)\r\n      LocalCollection._recomputeResults(query,\r\n                                        qidToOriginalResults[qid]);\r\n  });\r\n  self._observeQueue.drain();\r\n\r\n  // If we are doing an upsert, and we didn't modify any documents yet, then\r\n  // it's time to do an insert. Figure out what document we are inserting, and\r\n  // generate an id for it.\r\n  var insertedId;\r\n  if (updateCount === 0 && options.upsert) {\r\n    var newDoc = LocalCollection._removeDollarOperators(selector);\r\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\r\n    if (! newDoc._id && options.insertedId)\r\n      newDoc._id = options.insertedId;\r\n    insertedId = self.insert(newDoc);\r\n    updateCount = 1;\r\n  }\r\n\r\n  // Return the number of affected documents, or in the upsert case, an object\r\n  // containing the number of affected docs and the id of the doc that was\r\n  // inserted, if any.\r\n  var result;\r\n  if (options._returnObject) {\r\n    result = {\r\n      numberAffected: updateCount\r\n    };\r\n    if (insertedId !== undefined)\r\n      result.insertedId = insertedId;\r\n  } else {\r\n    result = updateCount;\r\n  }\r\n\r\n  if (callback)\r\n    Meteor.defer(function () {\r\n      callback(null, result);\r\n    });\r\n  return result;\r\n};\r\n\r\n// A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\r\n// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:\r\n// true }).\r\nLocalCollection.prototype.upsert = function (selector, mod, options, callback) {\r\n  var self = this;\r\n  if (! callback && typeof options === \"function\") {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return self.update(selector, mod, _.extend({}, options, {\r\n    upsert: true,\r\n    _returnObject: true\r\n  }), callback);\r\n};\r\n\r\nLocalCollection.prototype._modifyAndNotify = function (\r\n    doc, mod, recomputeQids, arrayIndices) {\r\n  var self = this;\r\n\r\n  var matched_before = {};\r\n  for (var qid in self.queries) {\r\n    var query = self.queries[qid];\r\n    if (query.ordered) {\r\n      matched_before[qid] = query.matcher.documentMatches(doc).result;\r\n    } else {\r\n      // Because we don't support skip or limit (yet) in unordered queries, we\r\n      // can just do a direct lookup.\r\n      matched_before[qid] = query.results.has(doc._id);\r\n    }\r\n  }\r\n\r\n  var old_doc = EJSON.clone(doc);\r\n\r\n  LocalCollection._modify(doc, mod, {arrayIndices: arrayIndices});\r\n\r\n  for (qid in self.queries) {\r\n    query = self.queries[qid];\r\n    var before = matched_before[qid];\r\n    var afterMatch = query.matcher.documentMatches(doc);\r\n    var after = afterMatch.result;\r\n    if (after && query.distances && afterMatch.distance !== undefined)\r\n      query.distances.set(doc._id, afterMatch.distance);\r\n\r\n    if (query.cursor.skip || query.cursor.limit) {\r\n      // We need to recompute any query where the doc may have been in the\r\n      // cursor's window either before or after the update. (Note that if skip\r\n      // or limit is set, \"before\" and \"after\" being true do not necessarily\r\n      // mean that the document is in the cursor's output after skip/limit is\r\n      // applied... but if they are false, then the document definitely is NOT\r\n      // in the output. So it's safe to skip recompute if neither before or\r\n      // after are true.)\r\n      if (before || after)\r\n        recomputeQids[qid] = true;\r\n    } else if (before && !after) {\r\n      LocalCollection._removeFromResults(query, doc);\r\n    } else if (!before && after) {\r\n      LocalCollection._insertInResults(query, doc);\r\n    } else if (before && after) {\r\n      LocalCollection._updateInResults(query, doc, old_doc);\r\n    }\r\n  }\r\n};\r\n\r\n// XXX the sorted-query logic below is laughably inefficient. we'll\r\n// need to come up with a better datastructure for this.\r\n//\r\n// XXX the logic for observing with a skip or a limit is even more\r\n// laughably inefficient. we recompute the whole results every time!\r\n\r\nLocalCollection._insertInResults = function (query, doc) {\r\n  var fields = EJSON.clone(doc);\r\n  delete fields._id;\r\n  if (query.ordered) {\r\n    if (!query.sorter) {\r\n      query.addedBefore(doc._id, fields, null);\r\n      query.results.push(doc);\r\n    } else {\r\n      var i = LocalCollection._insertInSortedList(\r\n        query.sorter.getComparator({distances: query.distances}),\r\n        query.results, doc);\r\n      var next = query.results[i+1];\r\n      if (next)\r\n        next = next._id;\r\n      else\r\n        next = null;\r\n      query.addedBefore(doc._id, fields, next);\r\n    }\r\n    query.added(doc._id, fields);\r\n  } else {\r\n    query.added(doc._id, fields);\r\n    query.results.set(doc._id, doc);\r\n  }\r\n};\r\n\r\nLocalCollection._removeFromResults = function (query, doc) {\r\n  if (query.ordered) {\r\n    var i = LocalCollection._findInOrderedResults(query, doc);\r\n    query.removed(doc._id);\r\n    query.results.splice(i, 1);\r\n  } else {\r\n    var id = doc._id;  // in case callback mutates doc\r\n    query.removed(doc._id);\r\n    query.results.remove(id);\r\n  }\r\n};\r\n\r\nLocalCollection._updateInResults = function (query, doc, old_doc) {\r\n  if (!EJSON.equals(doc._id, old_doc._id))\r\n    throw new Error(\"Can't change a doc's _id while updating\");\r\n  var changedFields = LocalCollection._makeChangedFields(doc, old_doc);\r\n  if (!query.ordered) {\r\n    if (!_.isEmpty(changedFields)) {\r\n      query.changed(doc._id, changedFields);\r\n      query.results.set(doc._id, doc);\r\n    }\r\n    return;\r\n  }\r\n\r\n  var orig_idx = LocalCollection._findInOrderedResults(query, doc);\r\n\r\n  if (!_.isEmpty(changedFields))\r\n    query.changed(doc._id, changedFields);\r\n  if (!query.sorter)\r\n    return;\r\n\r\n  // just take it out and put it back in again, and see if the index\r\n  // changes\r\n  query.results.splice(orig_idx, 1);\r\n  var new_idx = LocalCollection._insertInSortedList(\r\n    query.sorter.getComparator({distances: query.distances}),\r\n    query.results, doc);\r\n  if (orig_idx !== new_idx) {\r\n    var next = query.results[new_idx+1];\r\n    if (next)\r\n      next = next._id;\r\n    else\r\n      next = null;\r\n    query.movedBefore && query.movedBefore(doc._id, next);\r\n  }\r\n};\r\n\r\n// Recomputes the results of a query and runs observe callbacks for the\r\n// difference between the previous results and the current results (unless\r\n// paused). Used for skip/limit queries.\r\n//\r\n// When this is used by insert or remove, it can just use query.results for the\r\n// old results (and there's no need to pass in oldResults), because these\r\n// operations don't mutate the documents in the collection. Update needs to pass\r\n// in an oldResults which was deep-copied before the modifier was applied.\r\nLocalCollection._recomputeResults = function (query, oldResults) {\r\n  if (!oldResults)\r\n    oldResults = query.results;\r\n  if (query.distances)\r\n    query.distances.clear();\r\n  query.results = query.cursor._getRawObjects({\r\n    ordered: query.ordered, distances: query.distances});\r\n\r\n  if (!query.paused) {\r\n    LocalCollection._diffQueryChanges(\r\n      query.ordered, oldResults, query.results, query);\r\n  }\r\n};\r\n\r\n\r\nLocalCollection._findInOrderedResults = function (query, doc) {\r\n  if (!query.ordered)\r\n    throw new Error(\"Can't call _findInOrderedResults on unordered query\");\r\n  for (var i = 0; i < query.results.length; i++)\r\n    if (query.results[i] === doc)\r\n      return i;\r\n  throw Error(\"object missing from query\");\r\n};\r\n\r\n// This binary search puts a value between any equal values, and the first\r\n// lesser value.\r\nLocalCollection._binarySearch = function (cmp, array, value) {\r\n  var first = 0, rangeLength = array.length;\r\n\r\n  while (rangeLength > 0) {\r\n    var halfRange = Math.floor(rangeLength/2);\r\n    if (cmp(value, array[first + halfRange]) >= 0) {\r\n      first += halfRange + 1;\r\n      rangeLength -= halfRange + 1;\r\n    } else {\r\n      rangeLength = halfRange;\r\n    }\r\n  }\r\n  return first;\r\n};\r\n\r\nLocalCollection._insertInSortedList = function (cmp, array, value) {\r\n  if (array.length === 0) {\r\n    array.push(value);\r\n    return 0;\r\n  }\r\n\r\n  var idx = LocalCollection._binarySearch(cmp, array, value);\r\n  array.splice(idx, 0, value);\r\n  return idx;\r\n};\r\n\r\n// To track what documents are affected by a piece of code, call saveOriginals()\r\n// before it and retrieveOriginals() after it. retrieveOriginals returns an\r\n// object whose keys are the ids of the documents that were affected since the\r\n// call to saveOriginals(), and the values are equal to the document's contents\r\n// at the time of saveOriginals. (In the case of an inserted document, undefined\r\n// is the value.) You must alternate between calls to saveOriginals() and\r\n// retrieveOriginals().\r\nLocalCollection.prototype.saveOriginals = function () {\r\n  var self = this;\r\n  if (self._savedOriginals)\r\n    throw new Error(\"Called saveOriginals twice without retrieveOriginals\");\r\n  self._savedOriginals = new LocalCollection._IdMap;\r\n};\r\nLocalCollection.prototype.retrieveOriginals = function () {\r\n  var self = this;\r\n  if (!self._savedOriginals)\r\n    throw new Error(\"Called retrieveOriginals without saveOriginals\");\r\n\r\n  var originals = self._savedOriginals;\r\n  self._savedOriginals = null;\r\n  return originals;\r\n};\r\n\r\nLocalCollection.prototype._saveOriginal = function (id, doc) {\r\n  var self = this;\r\n  // Are we even trying to save originals?\r\n  if (!self._savedOriginals)\r\n    return;\r\n  // Have we previously mutated the original (and so 'doc' is not actually\r\n  // original)?  (Note the 'has' check rather than truth: we store undefined\r\n  // here for inserted docs!)\r\n  if (self._savedOriginals.has(id))\r\n    return;\r\n  self._savedOriginals.set(id, EJSON.clone(doc));\r\n};\r\n\r\n// Pause the observers. No callbacks from observers will fire until\r\n// 'resumeObservers' is called.\r\nLocalCollection.prototype.pauseObservers = function () {\r\n  // No-op if already paused.\r\n  if (this.paused)\r\n    return;\r\n\r\n  // Set the 'paused' flag such that new observer messages don't fire.\r\n  this.paused = true;\r\n\r\n  // Take a snapshot of the query results for each query.\r\n  for (var qid in this.queries) {\r\n    var query = this.queries[qid];\r\n\r\n    query.resultsSnapshot = EJSON.clone(query.results);\r\n  }\r\n};\r\n\r\n// Resume the observers. Observers immediately receive change\r\n// notifications to bring them to the current state of the\r\n// database. Note that this is not just replaying all the changes that\r\n// happened during the pause, it is a smarter 'coalesced' diff.\r\nLocalCollection.prototype.resumeObservers = function () {\r\n  var self = this;\r\n  // No-op if not paused.\r\n  if (!this.paused)\r\n    return;\r\n\r\n  // Unset the 'paused' flag. Make sure to do this first, otherwise\r\n  // observer methods won't actually fire when we trigger them.\r\n  this.paused = false;\r\n\r\n  for (var qid in this.queries) {\r\n    var query = self.queries[qid];\r\n    // Diff the current results against the snapshot and send to observers.\r\n    // pass the query object for its observer callbacks.\r\n    LocalCollection._diffQueryChanges(\r\n      query.ordered, query.resultsSnapshot, query.results, query);\r\n    query.resultsSnapshot = null;\r\n  }\r\n  self._observeQueue.drain();\r\n};\r\n\r\n\r\n// NB: used by livedata\r\nLocalCollection._idStringify = function (id) {\r\n  if (id instanceof LocalCollection._ObjectID) {\r\n    return id.valueOf();\r\n  } else if (typeof id === 'string') {\r\n    if (id === \"\") {\r\n      return id;\r\n    } else if (id.substr(0, 1) === \"-\" || // escape previously dashed strings\r\n               id.substr(0, 1) === \"~\" || // escape escaped numbers, true, false\r\n               LocalCollection._looksLikeObjectID(id) || // escape object-id-form strings\r\n               id.substr(0, 1) === '{') { // escape object-form strings, for maybe implementing later\r\n      return \"-\" + id;\r\n    } else {\r\n      return id; // other strings go through unchanged.\r\n    }\r\n  } else if (id === undefined) {\r\n    return '-';\r\n  } else if (typeof id === 'object' && id !== null) {\r\n    throw new Error(\"Meteor does not currently support objects other than ObjectID as ids\");\r\n  } else { // Numbers, true, false, null\r\n    return \"~\" + JSON.stringify(id);\r\n  }\r\n};\r\n\r\n\r\n// NB: used by livedata\r\nLocalCollection._idParse = function (id) {\r\n  if (id === \"\") {\r\n    return id;\r\n  } else if (id === '-') {\r\n    return undefined;\r\n  } else if (id.substr(0, 1) === '-') {\r\n    return id.substr(1);\r\n  } else if (id.substr(0, 1) === '~') {\r\n    return JSON.parse(id.substr(1));\r\n  } else if (LocalCollection._looksLikeObjectID(id)) {\r\n    return new LocalCollection._ObjectID(id);\r\n  } else {\r\n    return id;\r\n  }\r\n};\r\n\r\nLocalCollection._makeChangedFields = function (newDoc, oldDoc) {\r\n  var fields = {};\r\n  LocalCollection._diffObjects(oldDoc, newDoc, {\r\n    leftOnly: function (key, value) {\r\n      fields[key] = undefined;\r\n    },\r\n    rightOnly: function (key, value) {\r\n      fields[key] = value;\r\n    },\r\n    both: function (key, leftValue, rightValue) {\r\n      if (!EJSON.equals(leftValue, rightValue))\r\n        fields[key] = rightValue;\r\n    }\r\n  });\r\n  return fields;\r\n};\r\n","// Wrap a transform function to return objects that have the _id field\r\n// of the untransformed document. This ensures that subsystems such as\r\n// the observe-sequence package that call `observe` can keep track of\r\n// the documents identities.\r\n//\r\n// - Require that it returns objects\r\n// - If the return value has an _id field, verify that it matches the\r\n//   original _id field\r\n// - If the return value doesn't have an _id field, add it back.\r\nLocalCollection.wrapTransform = function (transform) {\r\n  if (!transform)\r\n    return null;\r\n\r\n  return function (doc) {\r\n    if (!_.has(doc, '_id')) {\r\n      // XXX do we ever have a transform on the oplog's collection? because that\r\n      // collection has no _id.\r\n      throw new Error(\"can only transform documents with _id\");\r\n    }\r\n\r\n    var id = doc._id;\r\n    // XXX consider making deps a weak dependency and checking Package.deps here\r\n    var transformed = Deps.nonreactive(function () {\r\n      return transform(doc);\r\n    });\r\n\r\n    if (!isPlainObject(transformed)) {\r\n      throw new Error(\"transform must return object\");\r\n    }\r\n\r\n    if (_.has(transformed, '_id')) {\r\n      if (!EJSON.equals(transformed._id, id)) {\r\n        throw new Error(\"transformed document can't have different _id\");\r\n      }\r\n    } else {\r\n      transformed._id = id;\r\n    }\r\n    return transformed;\r\n  };\r\n};\r\n\r\n","// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as\r\n// arrays.\r\n// XXX maybe this should be EJSON.isArray\r\nisArray = function (x) {\r\n  return _.isArray(x) && !EJSON.isBinary(x);\r\n};\r\n\r\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\r\n// RegExp\r\n// XXX note that _type(undefined) === 3!!!!\r\nisPlainObject = LocalCollection._isPlainObject = function (x) {\r\n  return x && LocalCollection._f._type(x) === 3;\r\n};\r\n\r\nisIndexable = function (x) {\r\n  return isArray(x) || isPlainObject(x);\r\n};\r\n\r\n// Returns true if this is an object with at least one key and all keys begin\r\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\r\n// others don't.\r\nisOperatorObject = function (valueSelector, inconsistentOK) {\r\n  if (!isPlainObject(valueSelector))\r\n    return false;\r\n\r\n  var theseAreOperators = undefined;\r\n  _.each(valueSelector, function (value, selKey) {\r\n    var thisIsOperator = selKey.substr(0, 1) === '$';\r\n    if (theseAreOperators === undefined) {\r\n      theseAreOperators = thisIsOperator;\r\n    } else if (theseAreOperators !== thisIsOperator) {\r\n      if (!inconsistentOK)\r\n        throw new Error(\"Inconsistent operator: \" +\r\n                        JSON.stringify(valueSelector));\r\n      theseAreOperators = false;\r\n    }\r\n  });\r\n  return !!theseAreOperators;  // {} has no operators\r\n};\r\n\r\n\r\n// string can be converted to integer\r\nisNumericKey = function (s) {\r\n  return /^[0-9]+$/.test(s);\r\n};\r\n","// The minimongo selector compiler!\r\n\r\n// Terminology:\r\n//  - a \"selector\" is the EJSON object representing a selector\r\n//  - a \"matcher\" is its compiled form (whether a full Minimongo.Matcher\r\n//    object or one of the component lambdas that matches parts of it)\r\n//  - a \"result object\" is an object with a \"result\" field and maybe\r\n//    distance and arrayIndices.\r\n//  - a \"branched value\" is an object with a \"value\" field and maybe\r\n//    \"dontIterate\" and \"arrayIndices\".\r\n//  - a \"document\" is a top-level object that can be stored in a collection.\r\n//  - a \"lookup function\" is a function that takes in a document and returns\r\n//    an array of \"branched values\".\r\n//  - a \"branched matcher\" maps from an array of branched values to a result\r\n//    object.\r\n//  - an \"element matcher\" maps from a single value to a bool.\r\n\r\n// Main entry point.\r\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\r\n//   if (matcher.documentMatches({a: 7})) ...\r\nMinimongo.Matcher = function (selector) {\r\n  var self = this;\r\n  // A set (object mapping string -> *) of all of the document paths looked\r\n  // at by the selector. Also includes the empty string if it may look at any\r\n  // path (eg, $where).\r\n  self._paths = {};\r\n  // Set to true if compilation finds a $near.\r\n  self._hasGeoQuery = false;\r\n  // Set to true if compilation finds a $where.\r\n  self._hasWhere = false;\r\n  // Set to false if compilation finds anything other than a simple equality or\r\n  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with\r\n  // scalars as operands.\r\n  self._isSimple = true;\r\n  // Set to a dummy document which always matches this Matcher. Or set to null\r\n  // if such document is too hard to find.\r\n  self._matchingDocument = undefined;\r\n  // A clone of the original selector. It may just be a function if the user\r\n  // passed in a function; otherwise is definitely an object (eg, IDs are\r\n  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\r\n  // Sorter._useWithMatcher.\r\n  self._selector = null;\r\n  self._docMatcher = self._compileSelector(selector);\r\n};\r\n\r\n_.extend(Minimongo.Matcher.prototype, {\r\n  documentMatches: function (doc) {\r\n    if (!doc || typeof doc !== \"object\") {\r\n      throw Error(\"documentMatches needs a document\");\r\n    }\r\n    return this._docMatcher(doc);\r\n  },\r\n  hasGeoQuery: function () {\r\n    return this._hasGeoQuery;\r\n  },\r\n  hasWhere: function () {\r\n    return this._hasWhere;\r\n  },\r\n  isSimple: function () {\r\n    return this._isSimple;\r\n  },\r\n\r\n  // Given a selector, return a function that takes one argument, a\r\n  // document. It returns a result object.\r\n  _compileSelector: function (selector) {\r\n    var self = this;\r\n    // you can pass a literal function instead of a selector\r\n    if (selector instanceof Function) {\r\n      self._isSimple = false;\r\n      self._selector = selector;\r\n      self._recordPathUsed('');\r\n      return function (doc) {\r\n        return {result: !!selector.call(doc)};\r\n      };\r\n    }\r\n\r\n    // shorthand -- scalars match _id\r\n    if (LocalCollection._selectorIsId(selector)) {\r\n      self._selector = {_id: selector};\r\n      self._recordPathUsed('_id');\r\n      return function (doc) {\r\n        return {result: EJSON.equals(doc._id, selector)};\r\n      };\r\n    }\r\n\r\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\r\n    // likely programmer error, and not what you want, particularly for\r\n    // destructive operations.\r\n    if (!selector || (('_id' in selector) && !selector._id)) {\r\n      self._isSimple = false;\r\n      return nothingMatcher;\r\n    }\r\n\r\n    // Top level can't be an array or true or binary.\r\n    if (typeof(selector) === 'boolean' || isArray(selector) ||\r\n        EJSON.isBinary(selector))\r\n      throw new Error(\"Invalid selector: \" + selector);\r\n\r\n    self._selector = EJSON.clone(selector);\r\n    return compileDocumentSelector(selector, self, {isRoot: true});\r\n  },\r\n  _recordPathUsed: function (path) {\r\n    this._paths[path] = true;\r\n  },\r\n  // Returns a list of key paths the given selector is looking for. It includes\r\n  // the empty string if there is a $where.\r\n  _getPaths: function () {\r\n    return _.keys(this._paths);\r\n  }\r\n});\r\n\r\n\r\n// Takes in a selector that could match a full document (eg, the original\r\n// selector). Returns a function mapping document->result object.\r\n//\r\n// matcher is the Matcher object we are compiling.\r\n//\r\n// If this is the root document selector (ie, not wrapped in $and or the like),\r\n// then isRoot is true. (This is used by $near.)\r\nvar compileDocumentSelector = function (docSelector, matcher, options) {\r\n  options = options || {};\r\n  var docMatchers = [];\r\n  _.each(docSelector, function (subSelector, key) {\r\n    if (key.substr(0, 1) === '$') {\r\n      // Outer operators are either logical operators (they recurse back into\r\n      // this function), or $where.\r\n      if (!_.has(LOGICAL_OPERATORS, key))\r\n        throw new Error(\"Unrecognized logical operator: \" + key);\r\n      matcher._isSimple = false;\r\n      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher,\r\n                                              options.inElemMatch));\r\n    } else {\r\n      // Record this path, but only if we aren't in an elemMatcher, since in an\r\n      // elemMatch this is a path inside an object in an array, not in the doc\r\n      // root.\r\n      if (!options.inElemMatch)\r\n        matcher._recordPathUsed(key);\r\n      var lookUpByIndex = makeLookupFunction(key);\r\n      var valueMatcher =\r\n        compileValueSelector(subSelector, matcher, options.isRoot);\r\n      docMatchers.push(function (doc) {\r\n        var branchValues = lookUpByIndex(doc);\r\n        return valueMatcher(branchValues);\r\n      });\r\n    }\r\n  });\r\n\r\n  return andDocumentMatchers(docMatchers);\r\n};\r\n\r\n// Takes in a selector that could match a key-indexed value in a document; eg,\r\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\r\n// indicate equality).  Returns a branched matcher: a function mapping\r\n// [branched value]->result object.\r\nvar compileValueSelector = function (valueSelector, matcher, isRoot) {\r\n  if (valueSelector instanceof RegExp) {\r\n    matcher._isSimple = false;\r\n    return convertElementMatcherToBranchedMatcher(\r\n      regexpElementMatcher(valueSelector));\r\n  } else if (isOperatorObject(valueSelector)) {\r\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\r\n  } else {\r\n    return convertElementMatcherToBranchedMatcher(\r\n      equalityElementMatcher(valueSelector));\r\n  }\r\n};\r\n\r\n// Given an element matcher (which evaluates a single value), returns a branched\r\n// value (which evaluates the element matcher on all the branches and returns a\r\n// more structured return value possibly including arrayIndices).\r\nvar convertElementMatcherToBranchedMatcher = function (\r\n    elementMatcher, options) {\r\n  options = options || {};\r\n  return function (branches) {\r\n    var expanded = branches;\r\n    if (!options.dontExpandLeafArrays) {\r\n      expanded = expandArraysInBranches(\r\n        branches, options.dontIncludeLeafArrays);\r\n    }\r\n    var ret = {};\r\n    ret.result = _.any(expanded, function (element) {\r\n      var matched = elementMatcher(element.value);\r\n\r\n      // Special case for $elemMatch: it means \"true, and use this as an array\r\n      // index if I didn't already have one\".\r\n      if (typeof matched === 'number') {\r\n        // XXX This code dates from when we only stored a single array index\r\n        // (for the outermost array). Should we be also including deeper array\r\n        // indices from the $elemMatch match?\r\n        if (!element.arrayIndices)\r\n          element.arrayIndices = [matched];\r\n        matched = true;\r\n      }\r\n\r\n      // If some element matched, and it's tagged with array indices, include\r\n      // those indices in our result object.\r\n      if (matched && element.arrayIndices)\r\n        ret.arrayIndices = element.arrayIndices;\r\n\r\n      return matched;\r\n    });\r\n    return ret;\r\n  };\r\n};\r\n\r\n// Takes a RegExp object and returns an element matcher.\r\nregexpElementMatcher = function (regexp) {\r\n  return function (value) {\r\n    if (value instanceof RegExp) {\r\n      // Comparing two regexps means seeing if the regexps are identical\r\n      // (really!). Underscore knows how.\r\n      return _.isEqual(value, regexp);\r\n    }\r\n    // Regexps only work against strings.\r\n    if (typeof value !== 'string')\r\n      return false;\r\n    return regexp.test(value);\r\n  };\r\n};\r\n\r\n// Takes something that is not an operator object and returns an element matcher\r\n// for equality with that thing.\r\nequalityElementMatcher = function (elementSelector) {\r\n  if (isOperatorObject(elementSelector))\r\n    throw Error(\"Can't create equalityValueSelector for operator object\");\r\n\r\n  // Special-case: null and undefined are equal (if you got undefined in there\r\n  // somewhere, or if you got it due to some branch being non-existent in the\r\n  // weird special case), even though they aren't with EJSON.equals.\r\n  if (elementSelector == null) {  // undefined or null\r\n    return function (value) {\r\n      return value == null;  // undefined or null\r\n    };\r\n  }\r\n\r\n  return function (value) {\r\n    return LocalCollection._f._equal(elementSelector, value);\r\n  };\r\n};\r\n\r\n// Takes an operator object (an object with $ keys) and returns a branched\r\n// matcher for it.\r\nvar operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {\r\n  // Each valueSelector works separately on the various branches.  So one\r\n  // operator can match one branch and another can match another branch.  This\r\n  // is OK.\r\n\r\n  var operatorMatchers = [];\r\n  _.each(valueSelector, function (operand, operator) {\r\n    // XXX we should actually implement $eq, which is new in 2.6\r\n    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) &&\r\n      _.isNumber(operand);\r\n    var simpleInequality = operator === '$ne' && !_.isObject(operand);\r\n    var simpleInclusion = _.contains(['$in', '$nin'], operator) &&\r\n      _.isArray(operand) && !_.any(operand, _.isObject);\r\n\r\n    if (! (operator === '$eq' || simpleRange ||\r\n           simpleInclusion || simpleInequality)) {\r\n      matcher._isSimple = false;\r\n    }\r\n\r\n    if (_.has(VALUE_OPERATORS, operator)) {\r\n      operatorMatchers.push(\r\n        VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));\r\n    } else if (_.has(ELEMENT_OPERATORS, operator)) {\r\n      var options = ELEMENT_OPERATORS[operator];\r\n      operatorMatchers.push(\r\n        convertElementMatcherToBranchedMatcher(\r\n          options.compileElementSelector(\r\n            operand, valueSelector, matcher),\r\n          options));\r\n    } else {\r\n      throw new Error(\"Unrecognized operator: \" + operator);\r\n    }\r\n  });\r\n\r\n  return andBranchedMatchers(operatorMatchers);\r\n};\r\n\r\nvar compileArrayOfDocumentSelectors = function (\r\n    selectors, matcher, inElemMatch) {\r\n  if (!isArray(selectors) || _.isEmpty(selectors))\r\n    throw Error(\"$and/$or/$nor must be nonempty array\");\r\n  return _.map(selectors, function (subSelector) {\r\n    if (!isPlainObject(subSelector))\r\n      throw Error(\"$or/$and/$nor entries need to be full objects\");\r\n    return compileDocumentSelector(\r\n      subSelector, matcher, {inElemMatch: inElemMatch});\r\n  });\r\n};\r\n\r\n// Operators that appear at the top level of a document selector.\r\nvar LOGICAL_OPERATORS = {\r\n  $and: function (subSelector, matcher, inElemMatch) {\r\n    var matchers = compileArrayOfDocumentSelectors(\r\n      subSelector, matcher, inElemMatch);\r\n    return andDocumentMatchers(matchers);\r\n  },\r\n\r\n  $or: function (subSelector, matcher, inElemMatch) {\r\n    var matchers = compileArrayOfDocumentSelectors(\r\n      subSelector, matcher, inElemMatch);\r\n\r\n    // Special case: if there is only one matcher, use it directly, *preserving*\r\n    // any arrayIndices it returns.\r\n    if (matchers.length === 1)\r\n      return matchers[0];\r\n\r\n    return function (doc) {\r\n      var result = _.any(matchers, function (f) {\r\n        return f(doc).result;\r\n      });\r\n      // $or does NOT set arrayIndices when it has multiple\r\n      // sub-expressions. (Tested against MongoDB.)\r\n      return {result: result};\r\n    };\r\n  },\r\n\r\n  $nor: function (subSelector, matcher, inElemMatch) {\r\n    var matchers = compileArrayOfDocumentSelectors(\r\n      subSelector, matcher, inElemMatch);\r\n    return function (doc) {\r\n      var result = _.all(matchers, function (f) {\r\n        return !f(doc).result;\r\n      });\r\n      // Never set arrayIndices, because we only match if nothing in particular\r\n      // \"matched\" (and because this is consistent with MongoDB).\r\n      return {result: result};\r\n    };\r\n  },\r\n\r\n  $where: function (selectorValue, matcher) {\r\n    // Record that *any* path may be used.\r\n    matcher._recordPathUsed('');\r\n    matcher._hasWhere = true;\r\n    if (!(selectorValue instanceof Function)) {\r\n      // XXX MongoDB seems to have more complex logic to decide where or or not\r\n      // to add \"return\"; not sure exactly what it is.\r\n      selectorValue = Function(\"obj\", \"return \" + selectorValue);\r\n    }\r\n    return function (doc) {\r\n      // We make the document available as both `this` and `obj`.\r\n      // XXX not sure what we should do if this throws\r\n      return {result: selectorValue.call(doc, doc)};\r\n    };\r\n  },\r\n\r\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\r\n  // query logs); it has no effect on the actual selection.\r\n  $comment: function () {\r\n    return function () {\r\n      return {result: true};\r\n    };\r\n  }\r\n};\r\n\r\n// Returns a branched matcher that matches iff the given matcher does not.\r\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\r\n// means that ALL branch values need to fail to match innerBranchedMatcher.\r\nvar invertBranchedMatcher = function (branchedMatcher) {\r\n  return function (branchValues) {\r\n    var invertMe = branchedMatcher(branchValues);\r\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\r\n    // say \"update the array element that does not match something\", at least\r\n    // in mongo-land.\r\n    return {result: !invertMe.result};\r\n  };\r\n};\r\n\r\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\r\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\r\n// \"match each branched value independently and combine with\r\n// convertElementMatcherToBranchedMatcher\".\r\nvar VALUE_OPERATORS = {\r\n  $not: function (operand, valueSelector, matcher) {\r\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\r\n  },\r\n  $ne: function (operand) {\r\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\r\n      equalityElementMatcher(operand)));\r\n  },\r\n  $nin: function (operand) {\r\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(\r\n      ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\r\n  },\r\n  $exists: function (operand) {\r\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {\r\n      return value !== undefined;\r\n    });\r\n    return operand ? exists : invertBranchedMatcher(exists);\r\n  },\r\n  // $options just provides options for $regex; its logic is inside $regex\r\n  $options: function (operand, valueSelector) {\r\n    if (!_.has(valueSelector, '$regex'))\r\n      throw Error(\"$options needs a $regex\");\r\n    return everythingMatcher;\r\n  },\r\n  // $maxDistance is basically an argument to $near\r\n  $maxDistance: function (operand, valueSelector) {\r\n    if (!valueSelector.$near)\r\n      throw Error(\"$maxDistance needs a $near\");\r\n    return everythingMatcher;\r\n  },\r\n  $all: function (operand, valueSelector, matcher) {\r\n    if (!isArray(operand))\r\n      throw Error(\"$all requires array\");\r\n    // Not sure why, but this seems to be what MongoDB does.\r\n    if (_.isEmpty(operand))\r\n      return nothingMatcher;\r\n\r\n    var branchedMatchers = [];\r\n    _.each(operand, function (criterion) {\r\n      // XXX handle $all/$elemMatch combination\r\n      if (isOperatorObject(criterion))\r\n        throw Error(\"no $ expressions in $all\");\r\n      // This is always a regexp or equality selector.\r\n      branchedMatchers.push(compileValueSelector(criterion, matcher));\r\n    });\r\n    // andBranchedMatchers does NOT require all selectors to return true on the\r\n    // SAME branch.\r\n    return andBranchedMatchers(branchedMatchers);\r\n  },\r\n  $near: function (operand, valueSelector, matcher, isRoot) {\r\n    if (!isRoot)\r\n      throw Error(\"$near can't be inside another $ operator\");\r\n    matcher._hasGeoQuery = true;\r\n\r\n    // There are two kinds of geodata in MongoDB: coordinate pairs and\r\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\r\n    // marked with a $geometry property.\r\n\r\n    var maxDistance, point, distance;\r\n    if (isPlainObject(operand) && _.has(operand, '$geometry')) {\r\n      // GeoJSON \"2dsphere\" mode.\r\n      maxDistance = operand.$maxDistance;\r\n      point = operand.$geometry;\r\n      distance = function (value) {\r\n        // XXX: for now, we don't calculate the actual distance between, say,\r\n        // polygon and circle. If people care about this use-case it will get\r\n        // a priority.\r\n        if (!value || !value.type)\r\n          return null;\r\n        if (value.type === \"Point\") {\r\n          return GeoJSON.pointDistance(point, value);\r\n        } else {\r\n          return GeoJSON.geometryWithinRadius(value, point, maxDistance)\r\n            ? 0 : maxDistance + 1;\r\n        }\r\n      };\r\n    } else {\r\n      maxDistance = valueSelector.$maxDistance;\r\n      if (!isArray(operand) && !isPlainObject(operand))\r\n        throw Error(\"$near argument must be coordinate pair or GeoJSON\");\r\n      point = pointToArray(operand);\r\n      distance = function (value) {\r\n        if (!isArray(value) && !isPlainObject(value))\r\n          return null;\r\n        return distanceCoordinatePairs(point, value);\r\n      };\r\n    }\r\n\r\n    return function (branchedValues) {\r\n      // There might be multiple points in the document that match the given\r\n      // field. Only one of them needs to be within $maxDistance, but we need to\r\n      // evaluate all of them and use the nearest one for the implicit sort\r\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\r\n      //\r\n      // Note: This differs from MongoDB's implementation, where a document will\r\n      // actually show up *multiple times* in the result set, with one entry for\r\n      // each within-$maxDistance branching point.\r\n      branchedValues = expandArraysInBranches(branchedValues);\r\n      var result = {result: false};\r\n      _.each(branchedValues, function (branch) {\r\n        var curDistance = distance(branch.value);\r\n        // Skip branches that aren't real points or are too far away.\r\n        if (curDistance === null || curDistance > maxDistance)\r\n          return;\r\n        // Skip anything that's a tie.\r\n        if (result.distance !== undefined && result.distance <= curDistance)\r\n          return;\r\n        result.result = true;\r\n        result.distance = curDistance;\r\n        if (!branch.arrayIndices)\r\n          delete result.arrayIndices;\r\n        else\r\n          result.arrayIndices = branch.arrayIndices;\r\n      });\r\n      return result;\r\n    };\r\n  }\r\n};\r\n\r\n// Helpers for $near.\r\nvar distanceCoordinatePairs = function (a, b) {\r\n  a = pointToArray(a);\r\n  b = pointToArray(b);\r\n  var x = a[0] - b[0];\r\n  var y = a[1] - b[1];\r\n  if (_.isNaN(x) || _.isNaN(y))\r\n    return null;\r\n  return Math.sqrt(x * x + y * y);\r\n};\r\n// Makes sure we get 2 elements array and assume the first one to be x and\r\n// the second one to y no matter what user passes.\r\n// In case user passes { lon: x, lat: y } returns [x, y]\r\nvar pointToArray = function (point) {\r\n  return _.map(point, _.identity);\r\n};\r\n\r\n// Helper for $lt/$gt/$lte/$gte.\r\nvar makeInequality = function (cmpValueComparator) {\r\n  return {\r\n    compileElementSelector: function (operand) {\r\n      // Arrays never compare false with non-arrays for any inequality.\r\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\r\n      //     it seems to have been reverted.\r\n      //     See https://jira.mongodb.org/browse/SERVER-11444\r\n      if (isArray(operand)) {\r\n        return function () {\r\n          return false;\r\n        };\r\n      }\r\n\r\n      // Special case: consider undefined and null the same (so true with\r\n      // $gte/$lte).\r\n      if (operand === undefined)\r\n        operand = null;\r\n\r\n      var operandType = LocalCollection._f._type(operand);\r\n\r\n      return function (value) {\r\n        if (value === undefined)\r\n          value = null;\r\n        // Comparisons are never true among things of different type (except\r\n        // null vs undefined).\r\n        if (LocalCollection._f._type(value) !== operandType)\r\n          return false;\r\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n// Each element selector contains:\r\n//  - compileElementSelector, a function with args:\r\n//    - operand - the \"right hand side\" of the operator\r\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\r\n//      $options)\r\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\r\n//      more things)\r\n//    returning a function mapping a single value to bool.\r\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\r\n//    being called\r\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\r\n//    expandArraysInBranches if it is called\r\nELEMENT_OPERATORS = {\r\n  $lt: makeInequality(function (cmpValue) {\r\n    return cmpValue < 0;\r\n  }),\r\n  $gt: makeInequality(function (cmpValue) {\r\n    return cmpValue > 0;\r\n  }),\r\n  $lte: makeInequality(function (cmpValue) {\r\n    return cmpValue <= 0;\r\n  }),\r\n  $gte: makeInequality(function (cmpValue) {\r\n    return cmpValue >= 0;\r\n  }),\r\n  $mod: {\r\n    compileElementSelector: function (operand) {\r\n      if (!(isArray(operand) && operand.length === 2\r\n            && typeof(operand[0]) === 'number'\r\n            && typeof(operand[1]) === 'number')) {\r\n        throw Error(\"argument to $mod must be an array of two numbers\");\r\n      }\r\n      // XXX could require to be ints or round or something\r\n      var divisor = operand[0];\r\n      var remainder = operand[1];\r\n      return function (value) {\r\n        return typeof value === 'number' && value % divisor === remainder;\r\n      };\r\n    }\r\n  },\r\n  $in: {\r\n    compileElementSelector: function (operand) {\r\n      if (!isArray(operand))\r\n        throw Error(\"$in needs an array\");\r\n\r\n      var elementMatchers = [];\r\n      _.each(operand, function (option) {\r\n        if (option instanceof RegExp)\r\n          elementMatchers.push(regexpElementMatcher(option));\r\n        else if (isOperatorObject(option))\r\n          throw Error(\"cannot nest $ under $in\");\r\n        else\r\n          elementMatchers.push(equalityElementMatcher(option));\r\n      });\r\n\r\n      return function (value) {\r\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\r\n        if (value === undefined)\r\n          value = null;\r\n        return _.any(elementMatchers, function (e) {\r\n          return e(value);\r\n        });\r\n      };\r\n    }\r\n  },\r\n  $size: {\r\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\r\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\r\n    // possible value.\r\n    dontExpandLeafArrays: true,\r\n    compileElementSelector: function (operand) {\r\n      if (typeof operand === 'string') {\r\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\r\n        // does.\r\n        operand = 0;\r\n      } else if (typeof operand !== 'number') {\r\n        throw Error(\"$size needs a number\");\r\n      }\r\n      return function (value) {\r\n        return isArray(value) && value.length === operand;\r\n      };\r\n    }\r\n  },\r\n  $type: {\r\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\r\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\r\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\r\n    // should *not* include it itself.\r\n    dontIncludeLeafArrays: true,\r\n    compileElementSelector: function (operand) {\r\n      if (typeof operand !== 'number')\r\n        throw Error(\"$type needs a number\");\r\n      return function (value) {\r\n        return value !== undefined\r\n          && LocalCollection._f._type(value) === operand;\r\n      };\r\n    }\r\n  },\r\n  $regex: {\r\n    compileElementSelector: function (operand, valueSelector) {\r\n      if (!(typeof operand === 'string' || operand instanceof RegExp))\r\n        throw Error(\"$regex has to be a string or RegExp\");\r\n\r\n      var regexp;\r\n      if (valueSelector.$options !== undefined) {\r\n        // Options passed in $options (even the empty string) always overrides\r\n        // options in the RegExp object itself. (See also\r\n        // Meteor.Collection._rewriteSelector.)\r\n\r\n        // Be clear that we only support the JS-supported options, not extended\r\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\r\n        // by transforming the regexp, but not today...\r\n        if (/[^gim]/.test(valueSelector.$options))\r\n          throw new Error(\"Only the i, m, and g regexp options are supported\");\r\n\r\n        var regexSource = operand instanceof RegExp ? operand.source : operand;\r\n        regexp = new RegExp(regexSource, valueSelector.$options);\r\n      } else if (operand instanceof RegExp) {\r\n        regexp = operand;\r\n      } else {\r\n        regexp = new RegExp(operand);\r\n      }\r\n      return regexpElementMatcher(regexp);\r\n    }\r\n  },\r\n  $elemMatch: {\r\n    dontExpandLeafArrays: true,\r\n    compileElementSelector: function (operand, valueSelector, matcher) {\r\n      if (!isPlainObject(operand))\r\n        throw Error(\"$elemMatch need an object\");\r\n\r\n      var subMatcher, isDocMatcher;\r\n      if (isOperatorObject(operand, true)) {\r\n        subMatcher = compileValueSelector(operand, matcher);\r\n        isDocMatcher = false;\r\n      } else {\r\n        // This is NOT the same as compileValueSelector(operand), and not just\r\n        // because of the slightly different calling convention.\r\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\r\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\r\n        subMatcher = compileDocumentSelector(operand, matcher,\r\n                                             {inElemMatch: true});\r\n        isDocMatcher = true;\r\n      }\r\n\r\n      return function (value) {\r\n        if (!isArray(value))\r\n          return false;\r\n        for (var i = 0; i < value.length; ++i) {\r\n          var arrayElement = value[i];\r\n          var arg;\r\n          if (isDocMatcher) {\r\n            // We can only match {$elemMatch: {b: 3}} against objects.\r\n            // (We can also match against arrays, if there's numeric indices,\r\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\r\n            if (!isPlainObject(arrayElement) && !isArray(arrayElement))\r\n              return false;\r\n            arg = arrayElement;\r\n          } else {\r\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\r\n            // {a: [8]} but not {a: [[8]]}\r\n            arg = [{value: arrayElement, dontIterate: true}];\r\n          }\r\n          // XXX support $near in $elemMatch by propagating $distance?\r\n          if (subMatcher(arg).result)\r\n            return i;   // specially understood to mean \"use as arrayIndices\"\r\n        }\r\n        return false;\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// makeLookupFunction(key) returns a lookup function.\r\n//\r\n// A lookup function takes in a document and returns an array of matching\r\n// branches.  If no arrays are found while looking up the key, this array will\r\n// have exactly one branches (possibly 'undefined', if some segment of the key\r\n// was not found).\r\n//\r\n// If arrays are found in the middle, this can have more than one element, since\r\n// we \"branch\". When we \"branch\", if there are more key segments to look up,\r\n// then we only pursue branches that are plain objects (not arrays or scalars).\r\n// This means we can actually end up with no branches!\r\n//\r\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\r\n// dotted member of the key). We just return that array; if you want to\r\n// effectively \"branch\" over the array's values, post-process the lookup\r\n// function with expandArraysInBranches.\r\n//\r\n// Each branch is an object with keys:\r\n//  - value: the value at the branch\r\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\r\n//    that expandArraysInBranches should NOT expand. This specifically happens\r\n//    when there is a numeric index in the key, and ensures the\r\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\r\n//    match {a: [[5]]}.\r\n//  - arrayIndices: if any array indexing was done during lookup (either due to\r\n//    explicit numeric indices or implicit branching), this will be an array of\r\n//    the array indices used, from outermost to innermost; it is falsey or\r\n//    absent if no array index is used. If an explicit numeric index is used,\r\n//    the index will be followed in arrayIndices by the string 'x'.\r\n//\r\n//    Note: arrayIndices is used for two purposes. First, it is used to\r\n//    implement the '$' modifier feature, which only ever looks at its first\r\n//    element.\r\n//\r\n//    Second, it is used for sort key generation, which needs to be able to tell\r\n//    the difference between different paths. Moreover, it needs to\r\n//    differentiate between explicit and implicit branching, which is why\r\n//    there's the somewhat hacky 'x' entry: this means that explicit and\r\n//    implicit array lookups will have different full arrayIndices paths. (That\r\n//    code only requires that different paths have different arrayIndices; it\r\n//    doesn't actually \"parse\" arrayIndices. As an alternative, arrayIndices\r\n//    could contain objects with flags like \"implicit\", but I think that only\r\n//    makes the code surrounding them more complex.)\r\n//\r\n//    (By the way, this field ends up getting passed around a lot without\r\n//    cloning, so never mutate any arrayIndices field/var in this package!)\r\n//\r\n//\r\n// At the top level, you may only pass in a plain object or array.\r\n//\r\n// See the test 'minimongo - lookup' for some examples of what lookup functions\r\n// return.\r\nmakeLookupFunction = function (key) {\r\n  var parts = key.split('.');\r\n  var firstPart = parts.length ? parts[0] : '';\r\n  var firstPartIsNumeric = isNumericKey(firstPart);\r\n  var lookupRest;\r\n  if (parts.length > 1) {\r\n    lookupRest = makeLookupFunction(parts.slice(1).join('.'));\r\n  }\r\n\r\n  var elideUnnecessaryFields = function (retVal) {\r\n    if (!retVal.dontIterate)\r\n      delete retVal.dontIterate;\r\n    if (retVal.arrayIndices && !retVal.arrayIndices.length)\r\n      delete retVal.arrayIndices;\r\n    return retVal;\r\n  };\r\n\r\n  // Doc will always be a plain object or an array.\r\n  // apply an explicit numeric index, an array.\r\n  return function (doc, arrayIndices) {\r\n    if (!arrayIndices)\r\n      arrayIndices = [];\r\n\r\n    if (isArray(doc)) {\r\n      // If we're being asked to do an invalid lookup into an array (non-integer\r\n      // or out-of-bounds), return no results (which is different from returning\r\n      // a single undefined result, in that `null` equality checks won't match).\r\n      if (!(firstPartIsNumeric && firstPart < doc.length))\r\n        return [];\r\n\r\n      // Remember that we used this array index. Include an 'x' to indicate that\r\n      // the previous index came from being considered as an explicit array\r\n      // index (not branching).\r\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\r\n    }\r\n\r\n    // Do our first lookup.\r\n    var firstLevel = doc[firstPart];\r\n\r\n    // If there is no deeper to dig, return what we found.\r\n    //\r\n    // If what we found is an array, most value selectors will choose to treat\r\n    // the elements of the array as matchable values in their own right, but\r\n    // that's done outside of the lookup function. (Exceptions to this are $size\r\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\r\n    // [[1, 2]]}.)\r\n    //\r\n    // That said, if we just did an *explicit* array lookup (on doc) to find\r\n    // firstLevel, and firstLevel is an array too, we do NOT want value\r\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\r\n    // So in that case, we mark the return value as \"don't iterate\".\r\n    if (!lookupRest) {\r\n      return [elideUnnecessaryFields({\r\n        value: firstLevel,\r\n        dontIterate: isArray(doc) && isArray(firstLevel),\r\n        arrayIndices: arrayIndices})];\r\n    }\r\n\r\n    // We need to dig deeper.  But if we can't, because what we've found is not\r\n    // an array or plain object, we're done. If we just did a numeric index into\r\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\r\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\r\n    // return a single `undefined` (which can, for example, match via equality\r\n    // with `null`).\r\n    if (!isIndexable(firstLevel)) {\r\n      if (isArray(doc))\r\n        return [];\r\n      return [elideUnnecessaryFields({value: undefined,\r\n                                      arrayIndices: arrayIndices})];\r\n    }\r\n\r\n    var result = [];\r\n    var appendToResult = function (more) {\r\n      Array.prototype.push.apply(result, more);\r\n    };\r\n\r\n    // Dig deeper: look up the rest of the parts on whatever we've found.\r\n    // (lookupRest is smart enough to not try to do invalid lookups into\r\n    // firstLevel if it's an array.)\r\n    appendToResult(lookupRest(firstLevel, arrayIndices));\r\n\r\n    // If we found an array, then in *addition* to potentially treating the next\r\n    // part as a literal integer lookup, we should also \"branch\": try to look up\r\n    // the rest of the parts on each array element in parallel.\r\n    //\r\n    // In this case, we *only* dig deeper into array elements that are plain\r\n    // objects. (Recall that we only got this far if we have further to dig.)\r\n    // This makes sense: we certainly don't dig deeper into non-indexable\r\n    // objects. And it would be weird to dig into an array: it's simpler to have\r\n    // a rule that explicit integer indexes only apply to an outer array, not to\r\n    // an array you find after a branching search.\r\n    if (isArray(firstLevel)) {\r\n      _.each(firstLevel, function (branch, arrayIndex) {\r\n        if (isPlainObject(branch)) {\r\n          appendToResult(lookupRest(\r\n            branch,\r\n            arrayIndices.concat(arrayIndex)));\r\n        }\r\n      });\r\n    }\r\n\r\n    return result;\r\n  };\r\n};\r\nMinimongoTest.makeLookupFunction = makeLookupFunction;\r\n\r\nexpandArraysInBranches = function (branches, skipTheArrays) {\r\n  var branchesOut = [];\r\n  _.each(branches, function (branch) {\r\n    var thisIsArray = isArray(branch.value);\r\n    // We include the branch itself, *UNLESS* we it's an array that we're going\r\n    // to iterate and we're told to skip arrays.  (That's right, we include some\r\n    // arrays even skipTheArrays is true: these are arrays that were found via\r\n    // explicit numerical indices.)\r\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\r\n      branchesOut.push({\r\n        value: branch.value,\r\n        arrayIndices: branch.arrayIndices\r\n      });\r\n    }\r\n    if (thisIsArray && !branch.dontIterate) {\r\n      _.each(branch.value, function (leaf, i) {\r\n        branchesOut.push({\r\n          value: leaf,\r\n          arrayIndices: (branch.arrayIndices || []).concat(i)\r\n        });\r\n      });\r\n    }\r\n  });\r\n  return branchesOut;\r\n};\r\n\r\nvar nothingMatcher = function (docOrBranchedValues) {\r\n  return {result: false};\r\n};\r\n\r\nvar everythingMatcher = function (docOrBranchedValues) {\r\n  return {result: true};\r\n};\r\n\r\n\r\n// NB: We are cheating and using this function to implement \"AND\" for both\r\n// \"document matchers\" and \"branched matchers\". They both return result objects\r\n// but the argument is different: for the former it's a whole doc, whereas for\r\n// the latter it's an array of \"branched values\".\r\nvar andSomeMatchers = function (subMatchers) {\r\n  if (subMatchers.length === 0)\r\n    return everythingMatcher;\r\n  if (subMatchers.length === 1)\r\n    return subMatchers[0];\r\n\r\n  return function (docOrBranches) {\r\n    var ret = {};\r\n    ret.result = _.all(subMatchers, function (f) {\r\n      var subResult = f(docOrBranches);\r\n      // Copy a 'distance' number out of the first sub-matcher that has\r\n      // one. Yes, this means that if there are multiple $near fields in a\r\n      // query, something arbitrary happens; this appears to be consistent with\r\n      // Mongo.\r\n      if (subResult.result && subResult.distance !== undefined\r\n          && ret.distance === undefined) {\r\n        ret.distance = subResult.distance;\r\n      }\r\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\r\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\r\n      // wins.\r\n      if (subResult.result && subResult.arrayIndices) {\r\n        ret.arrayIndices = subResult.arrayIndices;\r\n      }\r\n      return subResult.result;\r\n    });\r\n\r\n    // If we didn't actually match, forget any extra metadata we came up with.\r\n    if (!ret.result) {\r\n      delete ret.distance;\r\n      delete ret.arrayIndices;\r\n    }\r\n    return ret;\r\n  };\r\n};\r\n\r\nvar andDocumentMatchers = andSomeMatchers;\r\nvar andBranchedMatchers = andSomeMatchers;\r\n\r\n\r\n// helpers used by compiled selector code\r\nLocalCollection._f = {\r\n  // XXX for _all and _in, consider building 'inquery' at compile time..\r\n\r\n  _type: function (v) {\r\n    if (typeof v === \"number\")\r\n      return 1;\r\n    if (typeof v === \"string\")\r\n      return 2;\r\n    if (typeof v === \"boolean\")\r\n      return 8;\r\n    if (isArray(v))\r\n      return 4;\r\n    if (v === null)\r\n      return 10;\r\n    if (v instanceof RegExp)\r\n      // note that typeof(/x/) === \"object\"\r\n      return 11;\r\n    if (typeof v === \"function\")\r\n      return 13;\r\n    if (v instanceof Date)\r\n      return 9;\r\n    if (EJSON.isBinary(v))\r\n      return 5;\r\n    if (v instanceof LocalCollection._ObjectID)\r\n      return 7;\r\n    return 3; // object\r\n\r\n    // XXX support some/all of these:\r\n    // 14, symbol\r\n    // 15, javascript code with scope\r\n    // 16, 18: 32-bit/64-bit integer\r\n    // 17, timestamp\r\n    // 255, minkey\r\n    // 127, maxkey\r\n  },\r\n\r\n  // deep equality test: use for literal document and array matches\r\n  _equal: function (a, b) {\r\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\r\n  },\r\n\r\n  // maps a type code to a value that can be used to sort values of\r\n  // different types\r\n  _typeorder: function (t) {\r\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\r\n    // XXX what is the correct sort position for Javascript code?\r\n    // ('100' in the matrix below)\r\n    // XXX minkey/maxkey\r\n    return [-1,  // (not a type)\r\n            1,   // number\r\n            2,   // string\r\n            3,   // object\r\n            4,   // array\r\n            5,   // binary\r\n            -1,  // deprecated\r\n            6,   // ObjectID\r\n            7,   // bool\r\n            8,   // Date\r\n            0,   // null\r\n            9,   // RegExp\r\n            -1,  // deprecated\r\n            100, // JS code\r\n            2,   // deprecated (symbol)\r\n            100, // JS code\r\n            1,   // 32-bit int\r\n            8,   // Mongo timestamp\r\n            1    // 64-bit int\r\n           ][t];\r\n  },\r\n\r\n  // compare two values of unknown type according to BSON ordering\r\n  // semantics. (as an extension, consider 'undefined' to be less than\r\n  // any other value.) return negative if a is less, positive if b is\r\n  // less, or 0 if equal\r\n  _cmp: function (a, b) {\r\n    if (a === undefined)\r\n      return b === undefined ? 0 : -1;\r\n    if (b === undefined)\r\n      return 1;\r\n    var ta = LocalCollection._f._type(a);\r\n    var tb = LocalCollection._f._type(b);\r\n    var oa = LocalCollection._f._typeorder(ta);\r\n    var ob = LocalCollection._f._typeorder(tb);\r\n    if (oa !== ob)\r\n      return oa < ob ? -1 : 1;\r\n    if (ta !== tb)\r\n      // XXX need to implement this if we implement Symbol or integers, or\r\n      // Timestamp\r\n      throw Error(\"Missing type coercion logic in _cmp\");\r\n    if (ta === 7) { // ObjectID\r\n      // Convert to string.\r\n      ta = tb = 2;\r\n      a = a.toHexString();\r\n      b = b.toHexString();\r\n    }\r\n    if (ta === 9) { // Date\r\n      // Convert to millis.\r\n      ta = tb = 1;\r\n      a = a.getTime();\r\n      b = b.getTime();\r\n    }\r\n\r\n    if (ta === 1) // double\r\n      return a - b;\r\n    if (tb === 2) // string\r\n      return a < b ? -1 : (a === b ? 0 : 1);\r\n    if (ta === 3) { // Object\r\n      // this could be much more efficient in the expected case ...\r\n      var to_array = function (obj) {\r\n        var ret = [];\r\n        for (var key in obj) {\r\n          ret.push(key);\r\n          ret.push(obj[key]);\r\n        }\r\n        return ret;\r\n      };\r\n      return LocalCollection._f._cmp(to_array(a), to_array(b));\r\n    }\r\n    if (ta === 4) { // Array\r\n      for (var i = 0; ; i++) {\r\n        if (i === a.length)\r\n          return (i === b.length) ? 0 : -1;\r\n        if (i === b.length)\r\n          return 1;\r\n        var s = LocalCollection._f._cmp(a[i], b[i]);\r\n        if (s !== 0)\r\n          return s;\r\n      }\r\n    }\r\n    if (ta === 5) { // binary\r\n      // Surprisingly, a small binary blob is always less than a large one in\r\n      // Mongo.\r\n      if (a.length !== b.length)\r\n        return a.length - b.length;\r\n      for (i = 0; i < a.length; i++) {\r\n        if (a[i] < b[i])\r\n          return -1;\r\n        if (a[i] > b[i])\r\n          return 1;\r\n      }\r\n      return 0;\r\n    }\r\n    if (ta === 8) { // boolean\r\n      if (a) return b ? 0 : 1;\r\n      return b ? -1 : 0;\r\n    }\r\n    if (ta === 10) // null\r\n      return 0;\r\n    if (ta === 11) // regexp\r\n      throw Error(\"Sorting not supported on regular expression\"); // XXX\r\n    // 13: javascript code\r\n    // 14: symbol\r\n    // 15: javascript code with scope\r\n    // 16: 32-bit integer\r\n    // 17: timestamp\r\n    // 18: 64-bit integer\r\n    // 255: minkey\r\n    // 127: maxkey\r\n    if (ta === 13) // javascript code\r\n      throw Error(\"Sorting not supported on Javascript code\"); // XXX\r\n    throw Error(\"Unknown type to sort\");\r\n  }\r\n};\r\n\r\n// Oddball function used by upsert.\r\nLocalCollection._removeDollarOperators = function (selector) {\r\n  var selectorDoc = {};\r\n  for (var k in selector)\r\n    if (k.substr(0, 1) !== '$')\r\n      selectorDoc[k] = selector[k];\r\n  return selectorDoc;\r\n};\r\n","// Give a sort spec, which can be in any of these forms:\r\n//   {\"key1\": 1, \"key2\": -1}\r\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\r\n//   [\"key1\", [\"key2\", \"desc\"]]\r\n//\r\n// (.. with the first form being dependent on the key enumeration\r\n// behavior of your javascript VM, which usually does what you mean in\r\n// this case if the key names don't look like integers ..)\r\n//\r\n// return a function that takes two objects, and returns -1 if the\r\n// first object comes first in order, 1 if the second object comes\r\n// first, or 0 if neither object comes before the other.\r\n\r\nMinimongo.Sorter = function (spec, options) {\r\n  var self = this;\r\n  options = options || {};\r\n\r\n  self._sortSpecParts = [];\r\n\r\n  var addSpecPart = function (path, ascending) {\r\n    if (!path)\r\n      throw Error(\"sort keys must be non-empty\");\r\n    if (path.charAt(0) === '$')\r\n      throw Error(\"unsupported sort key: \" + path);\r\n    self._sortSpecParts.push({\r\n      path: path,\r\n      lookup: makeLookupFunction(path),\r\n      ascending: ascending\r\n    });\r\n  };\r\n\r\n  if (spec instanceof Array) {\r\n    for (var i = 0; i < spec.length; i++) {\r\n      if (typeof spec[i] === \"string\") {\r\n        addSpecPart(spec[i], true);\r\n      } else {\r\n        addSpecPart(spec[i][0], spec[i][1] !== \"desc\");\r\n      }\r\n    }\r\n  } else if (typeof spec === \"object\") {\r\n    _.each(spec, function (value, key) {\r\n      addSpecPart(key, value >= 0);\r\n    });\r\n  } else {\r\n    throw Error(\"Bad sort specification: \" + JSON.stringify(spec));\r\n  }\r\n\r\n  // To implement affectedByModifier, we piggy-back on top of Matcher's\r\n  // affectedByModifier code; we create a selector that is affected by the same\r\n  // modifiers as this sort order. This is only implemented on the server.\r\n  if (self.affectedByModifier) {\r\n    var selector = {};\r\n    _.each(self._sortSpecParts, function (spec) {\r\n      selector[spec.path] = 1;\r\n    });\r\n    self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\r\n  }\r\n\r\n  self._keyComparator = composeComparators(\r\n    _.map(self._sortSpecParts, function (spec, i) {\r\n      return self._keyFieldComparator(i);\r\n    }));\r\n\r\n  // If you specify a matcher for this Sorter, _keyFilter may be set to a\r\n  // function which selects whether or not a given \"sort key\" (tuple of values\r\n  // for the different sort spec fields) is compatible with the selector.\r\n  self._keyFilter = null;\r\n  options.matcher && self._useWithMatcher(options.matcher);\r\n};\r\n\r\n// In addition to these methods, sorter_project.js defines combineIntoProjection\r\n// on the server only.\r\n_.extend(Minimongo.Sorter.prototype, {\r\n  getComparator: function (options) {\r\n    var self = this;\r\n\r\n    // If we have no distances, just use the comparator from the source\r\n    // specification (which defaults to \"everything is equal\".\r\n    if (!options || !options.distances) {\r\n      return self._getBaseComparator();\r\n    }\r\n\r\n    var distances = options.distances;\r\n\r\n    // Return a comparator which first tries the sort specification, and if that\r\n    // says \"it's equal\", breaks ties using $near distances.\r\n    return composeComparators([self._getBaseComparator(), function (a, b) {\r\n      if (!distances.has(a._id))\r\n        throw Error(\"Missing distance for \" + a._id);\r\n      if (!distances.has(b._id))\r\n        throw Error(\"Missing distance for \" + b._id);\r\n      return distances.get(a._id) - distances.get(b._id);\r\n    }]);\r\n  },\r\n\r\n  _getPaths: function () {\r\n    var self = this;\r\n    return _.pluck(self._sortSpecParts, 'path');\r\n  },\r\n\r\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\r\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\r\n  // sort fields mean we're finding the max for that field.)\r\n  //\r\n  // Note that this is NOT \"find the minimum value of the first field, the\r\n  // minimum value of the second field, etc\"... it's \"choose the\r\n  // lexicographically minimum value of the key vector, allowing only keys which\r\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\r\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\r\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\r\n  _getMinKeyFromDoc: function (doc) {\r\n    var self = this;\r\n    var minKey = null;\r\n\r\n    self._generateKeysFromDoc(doc, function (key) {\r\n      if (!self._keyCompatibleWithSelector(key))\r\n        return;\r\n\r\n      if (minKey === null) {\r\n        minKey = key;\r\n        return;\r\n      }\r\n      if (self._compareKeys(key, minKey) < 0) {\r\n        minKey = key;\r\n      }\r\n    });\r\n\r\n    // This could happen if our key filter somehow filters out all the keys even\r\n    // though somehow the selector matches.\r\n    if (minKey === null)\r\n      throw Error(\"sort selector found no keys in doc?\");\r\n    return minKey;\r\n  },\r\n\r\n  _keyCompatibleWithSelector: function (key) {\r\n    var self = this;\r\n    return !self._keyFilter || self._keyFilter(key);\r\n  },\r\n\r\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\r\n  // 'cb' with the key.\r\n  _generateKeysFromDoc: function (doc, cb) {\r\n    var self = this;\r\n\r\n    if (self._sortSpecParts.length === 0)\r\n      throw new Error(\"can't generate keys without a spec\");\r\n\r\n    // maps index -> ({'' -> value} or {path -> value})\r\n    var valuesByIndexAndPath = [];\r\n\r\n    var pathFromIndices = function (indices) {\r\n      return indices.join(',') + ',';\r\n    };\r\n\r\n    var knownPaths = null;\r\n\r\n    _.each(self._sortSpecParts, function (spec, whichField) {\r\n      // Expand any leaf arrays that we find, and ignore those arrays\r\n      // themselves.  (We never sort based on an array itself.)\r\n      var branches = expandArraysInBranches(spec.lookup(doc), true);\r\n\r\n      // If there are no values for a key (eg, key goes to an empty array),\r\n      // pretend we found one null value.\r\n      if (!branches.length)\r\n        branches = [{value: null}];\r\n\r\n      var usedPaths = false;\r\n      valuesByIndexAndPath[whichField] = {};\r\n      _.each(branches, function (branch) {\r\n        if (!branch.arrayIndices) {\r\n          // If there are no array indices for a branch, then it must be the\r\n          // only branch, because the only thing that produces multiple branches\r\n          // is the use of arrays.\r\n          if (branches.length > 1)\r\n            throw Error(\"multiple branches but no array used?\");\r\n          valuesByIndexAndPath[whichField][''] = branch.value;\r\n          return;\r\n        }\r\n\r\n        usedPaths = true;\r\n        var path = pathFromIndices(branch.arrayIndices);\r\n        if (_.has(valuesByIndexAndPath[whichField], path))\r\n          throw Error(\"duplicate path: \" + path);\r\n        valuesByIndexAndPath[whichField][path] = branch.value;\r\n\r\n        // If two sort fields both go into arrays, they have to go into the\r\n        // exact same arrays and we have to find the same paths.  This is\r\n        // roughly the same condition that makes MongoDB throw this strange\r\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\r\n        // b:1} then a and b cannot both be arrays.\r\n        //\r\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\r\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\r\n        // #NestedArraySort\r\n        // XXX achieve full compatibility here\r\n        if (knownPaths && !_.has(knownPaths, path)) {\r\n          throw Error(\"cannot index parallel arrays\");\r\n        }\r\n      });\r\n\r\n      if (knownPaths) {\r\n        // Similarly to above, paths must match everywhere, unless this is a\r\n        // non-array field.\r\n        if (!_.has(valuesByIndexAndPath[whichField], '') &&\r\n            _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {\r\n          throw Error(\"cannot index parallel arrays!\");\r\n        }\r\n      } else if (usedPaths) {\r\n        knownPaths = {};\r\n        _.each(valuesByIndexAndPath[whichField], function (x, path) {\r\n          knownPaths[path] = true;\r\n        });\r\n      }\r\n    });\r\n\r\n    if (!knownPaths) {\r\n      // Easy case: no use of arrays.\r\n      var soleKey = _.map(valuesByIndexAndPath, function (values) {\r\n        if (!_.has(values, ''))\r\n          throw Error(\"no value in sole key case?\");\r\n        return values[''];\r\n      });\r\n      cb(soleKey);\r\n      return;\r\n    }\r\n\r\n    _.each(knownPaths, function (x, path) {\r\n      var key = _.map(valuesByIndexAndPath, function (values) {\r\n        if (_.has(values, ''))\r\n          return values[''];\r\n        if (!_.has(values, path))\r\n          throw Error(\"missing path?\");\r\n        return values[path];\r\n      });\r\n      cb(key);\r\n    });\r\n  },\r\n\r\n  // Takes in two keys: arrays whose lengths match the number of spec\r\n  // parts. Returns negative, 0, or positive based on using the sort spec to\r\n  // compare fields.\r\n  _compareKeys: function (key1, key2) {\r\n    var self = this;\r\n    if (key1.length !== self._sortSpecParts.length ||\r\n        key2.length !== self._sortSpecParts.length) {\r\n      throw Error(\"Key has wrong length\");\r\n    }\r\n\r\n    return self._keyComparator(key1, key2);\r\n  },\r\n\r\n  // Given an index 'i', returns a comparator that compares two key arrays based\r\n  // on field 'i'.\r\n  _keyFieldComparator: function (i) {\r\n    var self = this;\r\n    var invert = !self._sortSpecParts[i].ascending;\r\n    return function (key1, key2) {\r\n      var compare = LocalCollection._f._cmp(key1[i], key2[i]);\r\n      if (invert)\r\n        compare = -compare;\r\n      return compare;\r\n    };\r\n  },\r\n\r\n  // Returns a comparator that represents the sort specification (but not\r\n  // including a possible geoquery distance tie-breaker).\r\n  _getBaseComparator: function () {\r\n    var self = this;\r\n\r\n    // If we're only sorting on geoquery distance and no specs, just say\r\n    // everything is equal.\r\n    if (!self._sortSpecParts.length) {\r\n      return function (doc1, doc2) {\r\n        return 0;\r\n      };\r\n    }\r\n\r\n    return function (doc1, doc2) {\r\n      var key1 = self._getMinKeyFromDoc(doc1);\r\n      var key2 = self._getMinKeyFromDoc(doc2);\r\n      return self._compareKeys(key1, key2);\r\n    };\r\n  },\r\n\r\n  // In MongoDB, if you have documents\r\n  //    {_id: 'x', a: [1, 10]} and\r\n  //    {_id: 'y', a: [5, 15]},\r\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\r\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\r\n  // match the selector, and 5 comes before 10).\r\n  //\r\n  // The way this works is pretty subtle!  For example, if the documents\r\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\r\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\r\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\r\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\r\n  // both follow this rule (y before x).  (ie, you do have to apply this\r\n  // through $elemMatch.)\r\n  //\r\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\r\n  // skip sort keys that don't match the selector. The logic here is pretty\r\n  // subtle and undocumented; we've gotten as close as we can figure out based\r\n  // on our understanding of Mongo's behavior.\r\n  _useWithMatcher: function (matcher) {\r\n    var self = this;\r\n\r\n    if (self._keyFilter)\r\n      throw Error(\"called _useWithMatcher twice?\");\r\n\r\n    // If we are only sorting by distance, then we're not going to bother to\r\n    // build a key filter.\r\n    // XXX figure out how geoqueries interact with this stuff\r\n    if (_.isEmpty(self._sortSpecParts))\r\n      return;\r\n\r\n    var selector = matcher._selector;\r\n\r\n    // If the user just passed a literal function to find(), then we can't get a\r\n    // key filter from it.\r\n    if (selector instanceof Function)\r\n      return;\r\n\r\n    var constraintsByPath = {};\r\n    _.each(self._sortSpecParts, function (spec, i) {\r\n      constraintsByPath[spec.path] = [];\r\n    });\r\n\r\n    _.each(selector, function (subSelector, key) {\r\n      // XXX support $and and $or\r\n\r\n      var constraints = constraintsByPath[key];\r\n      if (!constraints)\r\n        return;\r\n\r\n      // XXX it looks like the real MongoDB implementation isn't \"does the\r\n      // regexp match\" but \"does the value fall into a range named by the\r\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\r\n      // \"does the regexp match\" is a good approximation.\r\n      if (subSelector instanceof RegExp) {\r\n        // As far as we can tell, using either of the options that both we and\r\n        // MongoDB support ('i' and 'm') disables use of the key filter. This\r\n        // makes sense: MongoDB mostly appears to be calculating ranges of an\r\n        // index to use, which means it only cares about regexps that match\r\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the\r\n        // literal prefix of the regexp from actually meaning one range.\r\n        if (subSelector.ignoreCase || subSelector.multiline)\r\n          return;\r\n        constraints.push(regexpElementMatcher(subSelector));\r\n        return;\r\n      }\r\n\r\n      if (isOperatorObject(subSelector)) {\r\n        _.each(subSelector, function (operand, operator) {\r\n          if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {\r\n            // XXX this depends on us knowing that these operators don't use any\r\n            // of the arguments to compileElementSelector other than operand.\r\n            constraints.push(\r\n              ELEMENT_OPERATORS[operator].compileElementSelector(operand));\r\n          }\r\n\r\n          // See comments in the RegExp block above.\r\n          if (operator === '$regex' && !subSelector.$options) {\r\n            constraints.push(\r\n              ELEMENT_OPERATORS.$regex.compileElementSelector(\r\n                operand, subSelector));\r\n          }\r\n\r\n          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\r\n        });\r\n        return;\r\n      }\r\n\r\n      // OK, it's an equality thing.\r\n      constraints.push(equalityElementMatcher(subSelector));\r\n    });\r\n\r\n    // It appears that the first sort field is treated differently from the\r\n    // others; we shouldn't create a key filter unless the first sort field is\r\n    // restricted, though after that point we can restrict the other sort fields\r\n    // or not as we wish.\r\n    if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path]))\r\n      return;\r\n\r\n    self._keyFilter = function (key) {\r\n      return _.all(self._sortSpecParts, function (specPart, index) {\r\n        return _.all(constraintsByPath[specPart.path], function (f) {\r\n          return f(key[index]);\r\n        });\r\n      });\r\n    };\r\n  }\r\n});\r\n\r\n// Given an array of comparators\r\n// (functions (a,b)->(negative or positive or zero)), returns a single\r\n// comparator which uses each comparator in order and returns the first\r\n// non-zero value.\r\nvar composeComparators = function (comparatorArray) {\r\n  return function (a, b) {\r\n    for (var i = 0; i < comparatorArray.length; ++i) {\r\n      var compare = comparatorArray[i](a, b);\r\n      if (compare !== 0)\r\n        return compare;\r\n    }\r\n    return 0;\r\n  };\r\n};\r\n","// Knows how to compile a fields projection to a predicate function.\r\n// @returns - Function: a closure that filters out an object according to the\r\n//            fields projection rules:\r\n//            @param obj - Object: MongoDB-styled document\r\n//            @returns - Object: a document with the fields filtered out\r\n//                       according to projection rules. Doesn't retain subfields\r\n//                       of passed argument.\r\nLocalCollection._compileProjection = function (fields) {\r\n  LocalCollection._checkSupportedProjection(fields);\r\n\r\n  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;\r\n  var details = projectionDetails(fields);\r\n\r\n  // returns transformed doc according to ruleTree\r\n  var transform = function (doc, ruleTree) {\r\n    // Special case for \"sets\"\r\n    if (_.isArray(doc))\r\n      return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });\r\n\r\n    var res = details.including ? {} : EJSON.clone(doc);\r\n    _.each(ruleTree, function (rule, key) {\r\n      if (!_.has(doc, key))\r\n        return;\r\n      if (_.isObject(rule)) {\r\n        // For sub-objects/subsets we branch\r\n        if (_.isObject(doc[key]))\r\n          res[key] = transform(doc[key], rule);\r\n        // Otherwise we don't even touch this subfield\r\n      } else if (details.including)\r\n        res[key] = EJSON.clone(doc[key]);\r\n      else\r\n        delete res[key];\r\n    });\r\n\r\n    return res;\r\n  };\r\n\r\n  return function (obj) {\r\n    var res = transform(obj, details.tree);\r\n\r\n    if (_idProjection && _.has(obj, '_id'))\r\n      res._id = obj._id;\r\n    if (!_idProjection && _.has(res, '_id'))\r\n      delete res._id;\r\n    return res;\r\n  };\r\n};\r\n\r\n// Traverses the keys of passed projection and constructs a tree where all\r\n// leaves are either all True or all False\r\n// @returns Object:\r\n//  - tree - Object - tree representation of keys involved in projection\r\n//  (exception for '_id' as it is a special case handled separately)\r\n//  - including - Boolean - \"take only certain fields\" type of projection\r\nprojectionDetails = function (fields) {\r\n  // Find the non-_id keys (_id is handled specially because it is included unless\r\n  // explicitly excluded). Sort the keys, so that our code to detect overlaps\r\n  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.\r\n  var fieldsKeys = _.keys(fields).sort();\r\n\r\n  // If there are other rules other than '_id', treat '_id' differently in a\r\n  // separate case. If '_id' is the only rule, use it to understand if it is\r\n  // including/excluding projection.\r\n  if (fieldsKeys.length > 0 && !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id'))\r\n    fieldsKeys = _.reject(fieldsKeys, function (key) { return key === '_id'; });\r\n\r\n  var including = null; // Unknown\r\n\r\n  _.each(fieldsKeys, function (keyPath) {\r\n    var rule = !!fields[keyPath];\r\n    if (including === null)\r\n      including = rule;\r\n    if (including !== rule)\r\n      // This error message is copies from MongoDB shell\r\n      throw MinimongoError(\"You cannot currently mix including and excluding fields.\");\r\n  });\r\n\r\n\r\n  var projectionRulesTree = pathsToTree(\r\n    fieldsKeys,\r\n    function (path) { return including; },\r\n    function (node, path, fullPath) {\r\n      // Check passed projection fields' keys: If you have two rules such as\r\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\r\n      // that happens, there is a probability you are doing something wrong,\r\n      // framework should notify you about such mistake earlier on cursor\r\n      // compilation step than later during runtime.  Note, that real mongo\r\n      // doesn't do anything about it and the later rule appears in projection\r\n      // project, more priority it takes.\r\n      //\r\n      // Example, assume following in mongo shell:\r\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\r\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\r\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23 } }\r\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\r\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23, \"c\" : 44 } }\r\n      //\r\n      // Note, how second time the return set of keys is different.\r\n\r\n      var currentPath = fullPath;\r\n      var anotherPath = path;\r\n      throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath +\r\n                           \" found in fields option, using both of them may trigger \" +\r\n                           \"unexpected behavior. Did you mean to use only one of them?\");\r\n    });\r\n\r\n  return {\r\n    tree: projectionRulesTree,\r\n    including: including\r\n  };\r\n};\r\n\r\n// paths - Array: list of mongo style paths\r\n// newLeafFn - Function: of form function(path) should return a scalar value to\r\n//                       put into list created for that path\r\n// conflictFn - Function: of form function(node, path, fullPath) is called\r\n//                        when building a tree path for 'fullPath' node on\r\n//                        'path' was already a leaf with a value. Must return a\r\n//                        conflict resolution.\r\n// initial tree - Optional Object: starting tree.\r\n// @returns - Object: tree represented as a set of nested objects\r\npathsToTree = function (paths, newLeafFn, conflictFn, tree) {\r\n  tree = tree || {};\r\n  _.each(paths, function (keyPath) {\r\n    var treePos = tree;\r\n    var pathArr = keyPath.split('.');\r\n\r\n    // use _.all just for iteration with break\r\n    var success = _.all(pathArr.slice(0, -1), function (key, idx) {\r\n      if (!_.has(treePos, key))\r\n        treePos[key] = {};\r\n      else if (!_.isObject(treePos[key])) {\r\n        treePos[key] = conflictFn(treePos[key],\r\n                                  pathArr.slice(0, idx + 1).join('.'),\r\n                                  keyPath);\r\n        // break out of loop if we are failing for this path\r\n        if (!_.isObject(treePos[key]))\r\n          return false;\r\n      }\r\n\r\n      treePos = treePos[key];\r\n      return true;\r\n    });\r\n\r\n    if (success) {\r\n      var lastKey = _.last(pathArr);\r\n      if (!_.has(treePos, lastKey))\r\n        treePos[lastKey] = newLeafFn(keyPath);\r\n      else\r\n        treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);\r\n    }\r\n  });\r\n\r\n  return tree;\r\n};\r\n\r\nLocalCollection._checkSupportedProjection = function (fields) {\r\n  if (!_.isObject(fields) || _.isArray(fields))\r\n    throw MinimongoError(\"fields option must be an object\");\r\n\r\n  _.each(fields, function (val, keyPath) {\r\n    if (_.contains(keyPath.split('.'), '$'))\r\n      throw MinimongoError(\"Minimongo doesn't support $ operator in projections yet.\");\r\n    if (_.indexOf([1, 0, true, false], val) === -1)\r\n      throw MinimongoError(\"Projection values should be one of 1, 0, true, or false\");\r\n  });\r\n};\r\n\r\n","// XXX need a strategy for passing the binding of $ into this\r\n// function, from the compiled selector\r\n//\r\n// maybe just {key.up.to.just.before.dollarsign: array_index}\r\n//\r\n// XXX atomicity: if one modification fails, do we roll back the whole\r\n// change?\r\n//\r\n// options:\r\n//   - isInsert is set when _modify is being called to compute the document to\r\n//     insert as part of an upsert operation. We use this primarily to figure\r\n//     out when to set the fields in $setOnInsert, if present.\r\nLocalCollection._modify = function (doc, mod, options) {\r\n  options = options || {};\r\n  if (!isPlainObject(mod))\r\n    throw MinimongoError(\"Modifier must be an object\");\r\n  var isModifier = isOperatorObject(mod);\r\n\r\n  var newDoc;\r\n\r\n  if (!isModifier) {\r\n    if (mod._id && !EJSON.equals(doc._id, mod._id))\r\n      throw MinimongoError(\"Cannot change the _id of a document\");\r\n\r\n    // replace the whole document\r\n    for (var k in mod) {\r\n      if (/\\./.test(k))\r\n        throw MinimongoError(\r\n          \"When replacing document, field name may not contain '.'\");\r\n    }\r\n    newDoc = mod;\r\n  } else {\r\n    // apply modifiers to the doc.\r\n    newDoc = EJSON.clone(doc);\r\n\r\n    _.each(mod, function (operand, op) {\r\n      var modFunc = MODIFIERS[op];\r\n      // Treat $setOnInsert as $set if this is an insert.\r\n      if (options.isInsert && op === '$setOnInsert')\r\n        modFunc = MODIFIERS['$set'];\r\n      if (!modFunc)\r\n        throw MinimongoError(\"Invalid modifier specified \" + op);\r\n      _.each(operand, function (arg, keypath) {\r\n        // XXX mongo doesn't allow mod field names to end in a period,\r\n        // but I don't see why.. it allows '' as a key, as does JS\r\n        if (keypath.length && keypath[keypath.length-1] === '.')\r\n          throw MinimongoError(\r\n            \"Invalid mod field name, may not end in a period\");\r\n\r\n        if (keypath === '_id')\r\n          throw MinimongoError(\"Mod on _id not allowed\");\r\n\r\n        var keyparts = keypath.split('.');\r\n        var noCreate = _.has(NO_CREATE_MODIFIERS, op);\r\n        var forbidArray = (op === \"$rename\");\r\n        var target = findModTarget(newDoc, keyparts, {\r\n          noCreate: NO_CREATE_MODIFIERS[op],\r\n          forbidArray: (op === \"$rename\"),\r\n          arrayIndices: options.arrayIndices\r\n        });\r\n        var field = keyparts.pop();\r\n        modFunc(target, field, arg, keypath, newDoc);\r\n      });\r\n    });\r\n  }\r\n\r\n  // move new document into place.\r\n  _.each(_.keys(doc), function (k) {\r\n    // Note: this used to be for (var k in doc) however, this does not\r\n    // work right in Opera. Deleting from a doc while iterating over it\r\n    // would sometimes cause opera to skip some keys.\r\n\r\n    // isInsert: if we're constructing a document to insert (via upsert)\r\n    // and we're in replacement mode, not modify mode, DON'T take the\r\n    // _id from the query.  This matches mongo's behavior.\r\n    if (k !== '_id' || options.isInsert)\r\n      delete doc[k];\r\n  });\r\n  _.each(newDoc, function (v, k) {\r\n    doc[k] = v;\r\n  });\r\n};\r\n\r\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\r\n// and then you would operate on the 'e' property of the returned\r\n// object.\r\n//\r\n// if options.noCreate is falsey, creates intermediate levels of\r\n// structure as necessary, like mkdir -p (and raises an exception if\r\n// that would mean giving a non-numeric property to an array.) if\r\n// options.noCreate is true, return undefined instead.\r\n//\r\n// may modify the last element of keyparts to signal to the caller that it needs\r\n// to use a different value to index into the returned object (for example,\r\n// ['a', '01'] -> ['a', 1]).\r\n//\r\n// if forbidArray is true, return null if the keypath goes through an array.\r\n//\r\n// if options.arrayIndices is set, use its first element for the (first) '$' in\r\n// the path.\r\nvar findModTarget = function (doc, keyparts, options) {\r\n  options = options || {};\r\n  var usedArrayIndex = false;\r\n  for (var i = 0; i < keyparts.length; i++) {\r\n    var last = (i === keyparts.length - 1);\r\n    var keypart = keyparts[i];\r\n    var indexable = isIndexable(doc);\r\n    if (!indexable) {\r\n      if (options.noCreate)\r\n        return undefined;\r\n      var e = MinimongoError(\r\n        \"cannot use the part '\" + keypart + \"' to traverse \" + doc);\r\n      e.setPropertyError = true;\r\n      throw e;\r\n    }\r\n    if (doc instanceof Array) {\r\n      if (options.forbidArray)\r\n        return null;\r\n      if (keypart === '$') {\r\n        if (usedArrayIndex)\r\n          throw MinimongoError(\"Too many positional (i.e. '$') elements\");\r\n        if (!options.arrayIndices || !options.arrayIndices.length) {\r\n          throw MinimongoError(\"The positional operator did not find the \" +\r\n                               \"match needed from the query\");\r\n        }\r\n        keypart = options.arrayIndices[0];\r\n        usedArrayIndex = true;\r\n      } else if (isNumericKey(keypart)) {\r\n        keypart = parseInt(keypart);\r\n      } else {\r\n        if (options.noCreate)\r\n          return undefined;\r\n        throw MinimongoError(\r\n          \"can't append to array using string field name [\"\r\n                    + keypart + \"]\");\r\n      }\r\n      if (last)\r\n        // handle 'a.01'\r\n        keyparts[i] = keypart;\r\n      if (options.noCreate && keypart >= doc.length)\r\n        return undefined;\r\n      while (doc.length < keypart)\r\n        doc.push(null);\r\n      if (!last) {\r\n        if (doc.length === keypart)\r\n          doc.push({});\r\n        else if (typeof doc[keypart] !== \"object\")\r\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] +\r\n                      \"' of list value \" + JSON.stringify(doc[keypart]));\r\n      }\r\n    } else {\r\n      if (keypart.length && keypart.substr(0, 1) === '$')\r\n        throw MinimongoError(\"can't set field named \" + keypart);\r\n      if (!(keypart in doc)) {\r\n        if (options.noCreate)\r\n          return undefined;\r\n        if (!last)\r\n          doc[keypart] = {};\r\n      }\r\n    }\r\n\r\n    if (last)\r\n      return doc;\r\n    doc = doc[keypart];\r\n  }\r\n\r\n  // notreached\r\n};\r\n\r\nvar NO_CREATE_MODIFIERS = {\r\n  $unset: true,\r\n  $pop: true,\r\n  $rename: true,\r\n  $pull: true,\r\n  $pullAll: true\r\n};\r\n\r\nvar MODIFIERS = {\r\n  $inc: function (target, field, arg) {\r\n    if (typeof arg !== \"number\")\r\n      throw MinimongoError(\"Modifier $inc allowed for numbers only\");\r\n    if (field in target) {\r\n      if (typeof target[field] !== \"number\")\r\n        throw MinimongoError(\"Cannot apply $inc modifier to non-number\");\r\n      target[field] += arg;\r\n    } else {\r\n      target[field] = arg;\r\n    }\r\n  },\r\n  $set: function (target, field, arg) {\r\n    if (!_.isObject(target)) { // not an array or an object\r\n      var e = MinimongoError(\"Cannot set property on non-object field\");\r\n      e.setPropertyError = true;\r\n      throw e;\r\n    }\r\n    if (target === null) {\r\n      var e = MinimongoError(\"Cannot set property on null\");\r\n      e.setPropertyError = true;\r\n      throw e;\r\n    }\r\n    target[field] = EJSON.clone(arg);\r\n  },\r\n  $setOnInsert: function (target, field, arg) {\r\n    // converted to `$set` in `_modify`\r\n  },\r\n  $unset: function (target, field, arg) {\r\n    if (target !== undefined) {\r\n      if (target instanceof Array) {\r\n        if (field in target)\r\n          target[field] = null;\r\n      } else\r\n        delete target[field];\r\n    }\r\n  },\r\n  $push: function (target, field, arg) {\r\n    if (target[field] === undefined)\r\n      target[field] = [];\r\n    if (!(target[field] instanceof Array))\r\n      throw MinimongoError(\"Cannot apply $push modifier to non-array\");\r\n\r\n    if (!(arg && arg.$each)) {\r\n      // Simple mode: not $each\r\n      target[field].push(EJSON.clone(arg));\r\n      return;\r\n    }\r\n\r\n    // Fancy mode: $each (and maybe $slice and $sort)\r\n    var toPush = arg.$each;\r\n    if (!(toPush instanceof Array))\r\n      throw MinimongoError(\"$each must be an array\");\r\n\r\n    // Parse $slice.\r\n    var slice = undefined;\r\n    if ('$slice' in arg) {\r\n      if (typeof arg.$slice !== \"number\")\r\n        throw MinimongoError(\"$slice must be a numeric value\");\r\n      // XXX should check to make sure integer\r\n      if (arg.$slice > 0)\r\n        throw MinimongoError(\"$slice in $push must be zero or negative\");\r\n      slice = arg.$slice;\r\n    }\r\n\r\n    // Parse $sort.\r\n    var sortFunction = undefined;\r\n    if (arg.$sort) {\r\n      if (slice === undefined)\r\n        throw MinimongoError(\"$sort requires $slice to be present\");\r\n      // XXX this allows us to use a $sort whose value is an array, but that's\r\n      // actually an extension of the Node driver, so it won't work\r\n      // server-side. Could be confusing!\r\n      // XXX is it correct that we don't do geo-stuff here?\r\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\r\n      for (var i = 0; i < toPush.length; i++) {\r\n        if (LocalCollection._f._type(toPush[i]) !== 3) {\r\n          throw MinimongoError(\"$push like modifiers using $sort \" +\r\n                      \"require all elements to be objects\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // Actually push.\r\n    for (var j = 0; j < toPush.length; j++)\r\n      target[field].push(EJSON.clone(toPush[j]));\r\n\r\n    // Actually sort.\r\n    if (sortFunction)\r\n      target[field].sort(sortFunction);\r\n\r\n    // Actually slice.\r\n    if (slice !== undefined) {\r\n      if (slice === 0)\r\n        target[field] = [];  // differs from Array.slice!\r\n      else\r\n        target[field] = target[field].slice(slice);\r\n    }\r\n  },\r\n  $pushAll: function (target, field, arg) {\r\n    if (!(typeof arg === \"object\" && arg instanceof Array))\r\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      target[field] = arg;\r\n    else if (!(x instanceof Array))\r\n      throw MinimongoError(\"Cannot apply $pushAll modifier to non-array\");\r\n    else {\r\n      for (var i = 0; i < arg.length; i++)\r\n        x.push(arg[i]);\r\n    }\r\n  },\r\n  $addToSet: function (target, field, arg) {\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      target[field] = [arg];\r\n    else if (!(x instanceof Array))\r\n      throw MinimongoError(\"Cannot apply $addToSet modifier to non-array\");\r\n    else {\r\n      var isEach = false;\r\n      if (typeof arg === \"object\") {\r\n        for (var k in arg) {\r\n          if (k === \"$each\")\r\n            isEach = true;\r\n          break;\r\n        }\r\n      }\r\n      var values = isEach ? arg[\"$each\"] : [arg];\r\n      _.each(values, function (value) {\r\n        for (var i = 0; i < x.length; i++)\r\n          if (LocalCollection._f._equal(value, x[i]))\r\n            return;\r\n        x.push(EJSON.clone(value));\r\n      });\r\n    }\r\n  },\r\n  $pop: function (target, field, arg) {\r\n    if (target === undefined)\r\n      return;\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      return;\r\n    else if (!(x instanceof Array))\r\n      throw MinimongoError(\"Cannot apply $pop modifier to non-array\");\r\n    else {\r\n      if (typeof arg === 'number' && arg < 0)\r\n        x.splice(0, 1);\r\n      else\r\n        x.pop();\r\n    }\r\n  },\r\n  $pull: function (target, field, arg) {\r\n    if (target === undefined)\r\n      return;\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      return;\r\n    else if (!(x instanceof Array))\r\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");\r\n    else {\r\n      var out = [];\r\n      if (typeof arg === \"object\" && !(arg instanceof Array)) {\r\n        // XXX would be much nicer to compile this once, rather than\r\n        // for each document we modify.. but usually we're not\r\n        // modifying that many documents, so we'll let it slide for\r\n        // now\r\n\r\n        // XXX Minimongo.Matcher isn't up for the job, because we need\r\n        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\r\n        // like {$gt: 4} is not normally a complete selector.\r\n        // same issue as $elemMatch possibly?\r\n        var matcher = new Minimongo.Matcher(arg);\r\n        for (var i = 0; i < x.length; i++)\r\n          if (!matcher.documentMatches(x[i]).result)\r\n            out.push(x[i]);\r\n      } else {\r\n        for (var i = 0; i < x.length; i++)\r\n          if (!LocalCollection._f._equal(x[i], arg))\r\n            out.push(x[i]);\r\n      }\r\n      target[field] = out;\r\n    }\r\n  },\r\n  $pullAll: function (target, field, arg) {\r\n    if (!(typeof arg === \"object\" && arg instanceof Array))\r\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\r\n    if (target === undefined)\r\n      return;\r\n    var x = target[field];\r\n    if (x === undefined)\r\n      return;\r\n    else if (!(x instanceof Array))\r\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");\r\n    else {\r\n      var out = [];\r\n      for (var i = 0; i < x.length; i++) {\r\n        var exclude = false;\r\n        for (var j = 0; j < arg.length; j++) {\r\n          if (LocalCollection._f._equal(x[i], arg[j])) {\r\n            exclude = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!exclude)\r\n          out.push(x[i]);\r\n      }\r\n      target[field] = out;\r\n    }\r\n  },\r\n  $rename: function (target, field, arg, keypath, doc) {\r\n    if (keypath === arg)\r\n      // no idea why mongo has this restriction..\r\n      throw MinimongoError(\"$rename source must differ from target\");\r\n    if (target === null)\r\n      throw MinimongoError(\"$rename source field invalid\");\r\n    if (typeof arg !== \"string\")\r\n      throw MinimongoError(\"$rename target must be a string\");\r\n    if (target === undefined)\r\n      return;\r\n    var v = target[field];\r\n    delete target[field];\r\n\r\n    var keyparts = arg.split('.');\r\n    var target2 = findModTarget(doc, keyparts, {forbidArray: true});\r\n    if (target2 === null)\r\n      throw MinimongoError(\"$rename target field invalid\");\r\n    var field2 = keyparts.pop();\r\n    target2[field2] = v;\r\n  },\r\n  $bit: function (target, field, arg) {\r\n    // XXX mongo only supports $bit on integers, and we only support\r\n    // native javascript numbers (doubles) so far, so we can't support $bit\r\n    throw MinimongoError(\"$bit is not supported\");\r\n  }\r\n};\r\n","\r\n// ordered: bool.\r\n// old_results and new_results: collections of documents.\r\n//    if ordered, they are arrays.\r\n//    if unordered, they are IdMaps\r\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults,\r\n                                       observer) {\r\n  if (ordered)\r\n    LocalCollection._diffQueryOrderedChanges(\r\n      oldResults, newResults, observer);\r\n  else\r\n    LocalCollection._diffQueryUnorderedChanges(\r\n      oldResults, newResults, observer);\r\n};\r\n\r\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults,\r\n                                                       observer) {\r\n  if (observer.movedBefore) {\r\n    throw new Error(\"_diffQueryUnordered called with a movedBefore observer!\");\r\n  }\r\n\r\n  newResults.forEach(function (newDoc, id) {\r\n    var oldDoc = oldResults.get(id);\r\n    if (oldDoc) {\r\n      if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {\r\n        observer.changed(\r\n          id, LocalCollection._makeChangedFields(newDoc, oldDoc));\r\n      }\r\n    } else if (observer.added) {\r\n      var fields = EJSON.clone(newDoc);\r\n      delete fields._id;\r\n      observer.added(newDoc._id, fields);\r\n    }\r\n  });\r\n\r\n  if (observer.removed) {\r\n    oldResults.forEach(function (oldDoc, id) {\r\n      if (!newResults.has(id))\r\n        observer.removed(id);\r\n    });\r\n  }\r\n};\r\n\r\n\r\nLocalCollection._diffQueryOrderedChanges = function (old_results, new_results, observer) {\r\n\r\n  var new_presence_of_id = {};\r\n  _.each(new_results, function (doc) {\r\n    if (new_presence_of_id[doc._id])\r\n      Meteor._debug(\"Duplicate _id in new_results\");\r\n    new_presence_of_id[doc._id] = true;\r\n  });\r\n\r\n  var old_index_of_id = {};\r\n  _.each(old_results, function (doc, i) {\r\n    if (doc._id in old_index_of_id)\r\n      Meteor._debug(\"Duplicate _id in old_results\");\r\n    old_index_of_id[doc._id] = i;\r\n  });\r\n\r\n  // ALGORITHM:\r\n  //\r\n  // To determine which docs should be considered \"moved\" (and which\r\n  // merely change position because of other docs moving) we run\r\n  // a \"longest common subsequence\" (LCS) algorithm.  The LCS of the\r\n  // old doc IDs and the new doc IDs gives the docs that should NOT be\r\n  // considered moved.\r\n\r\n  // To actually call the appropriate callbacks to get from the old state to the\r\n  // new state:\r\n\r\n  // First, we call removed() on all the items that only appear in the old\r\n  // state.\r\n\r\n  // Then, once we have the items that should not move, we walk through the new\r\n  // results array group-by-group, where a \"group\" is a set of items that have\r\n  // moved, anchored on the end by an item that should not move.  One by one, we\r\n  // move each of those elements into place \"before\" the anchoring end-of-group\r\n  // item, and fire changed events on them if necessary.  Then we fire a changed\r\n  // event on the anchor, and move on to the next group.  There is always at\r\n  // least one group; the last group is anchored by a virtual \"null\" id at the\r\n  // end.\r\n\r\n  // Asymptotically: O(N k) where k is number of ops, or potentially\r\n  // O(N log N) if inner loop of LCS were made to be binary search.\r\n\r\n\r\n  //////// LCS (longest common sequence, with respect to _id)\r\n  // (see Wikipedia article on Longest Increasing Subsequence,\r\n  // where the LIS is taken of the sequence of old indices of the\r\n  // docs in new_results)\r\n  //\r\n  // unmoved: the output of the algorithm; members of the LCS,\r\n  // in the form of indices into new_results\r\n  var unmoved = [];\r\n  // max_seq_len: length of LCS found so far\r\n  var max_seq_len = 0;\r\n  // seq_ends[i]: the index into new_results of the last doc in a\r\n  // common subsequence of length of i+1 <= max_seq_len\r\n  var N = new_results.length;\r\n  var seq_ends = new Array(N);\r\n  // ptrs:  the common subsequence ending with new_results[n] extends\r\n  // a common subsequence ending with new_results[ptr[n]], unless\r\n  // ptr[n] is -1.\r\n  var ptrs = new Array(N);\r\n  // virtual sequence of old indices of new results\r\n  var old_idx_seq = function(i_new) {\r\n    return old_index_of_id[new_results[i_new]._id];\r\n  };\r\n  // for each item in new_results, use it to extend a common subsequence\r\n  // of length j <= max_seq_len\r\n  for(var i=0; i<N; i++) {\r\n    if (old_index_of_id[new_results[i]._id] !== undefined) {\r\n      var j = max_seq_len;\r\n      // this inner loop would traditionally be a binary search,\r\n      // but scanning backwards we will likely find a subseq to extend\r\n      // pretty soon, bounded for example by the total number of ops.\r\n      // If this were to be changed to a binary search, we'd still want\r\n      // to scan backwards a bit as an optimization.\r\n      while (j > 0) {\r\n        if (old_idx_seq(seq_ends[j-1]) < old_idx_seq(i))\r\n          break;\r\n        j--;\r\n      }\r\n\r\n      ptrs[i] = (j === 0 ? -1 : seq_ends[j-1]);\r\n      seq_ends[j] = i;\r\n      if (j+1 > max_seq_len)\r\n        max_seq_len = j+1;\r\n    }\r\n  }\r\n\r\n  // pull out the LCS/LIS into unmoved\r\n  var idx = (max_seq_len === 0 ? -1 : seq_ends[max_seq_len-1]);\r\n  while (idx >= 0) {\r\n    unmoved.push(idx);\r\n    idx = ptrs[idx];\r\n  }\r\n  // the unmoved item list is built backwards, so fix that\r\n  unmoved.reverse();\r\n\r\n  // the last group is always anchored by the end of the result list, which is\r\n  // an id of \"null\"\r\n  unmoved.push(new_results.length);\r\n\r\n  _.each(old_results, function (doc) {\r\n    if (!new_presence_of_id[doc._id])\r\n      observer.removed && observer.removed(doc._id);\r\n  });\r\n  // for each group of things in the new_results that is anchored by an unmoved\r\n  // element, iterate through the things before it.\r\n  var startOfGroup = 0;\r\n  _.each(unmoved, function (endOfGroup) {\r\n    var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;\r\n    var oldDoc;\r\n    var newDoc;\r\n    var fields;\r\n    for (var i = startOfGroup; i < endOfGroup; i++) {\r\n      newDoc = new_results[i];\r\n      if (!_.has(old_index_of_id, newDoc._id)) {\r\n        fields = EJSON.clone(newDoc);\r\n        delete fields._id;\r\n        observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);\r\n        observer.added && observer.added(newDoc._id, fields);\r\n      } else {\r\n        // moved\r\n        oldDoc = old_results[old_index_of_id[newDoc._id]];\r\n        fields = LocalCollection._makeChangedFields(newDoc, oldDoc);\r\n        if (!_.isEmpty(fields)) {\r\n          observer.changed && observer.changed(newDoc._id, fields);\r\n        }\r\n        observer.movedBefore && observer.movedBefore(newDoc._id, groupId);\r\n      }\r\n    }\r\n    if (groupId) {\r\n      newDoc = new_results[endOfGroup];\r\n      oldDoc = old_results[old_index_of_id[newDoc._id]];\r\n      fields = LocalCollection._makeChangedFields(newDoc, oldDoc);\r\n      if (!_.isEmpty(fields)) {\r\n        observer.changed && observer.changed(newDoc._id, fields);\r\n      }\r\n    }\r\n    startOfGroup = endOfGroup+1;\r\n  });\r\n\r\n\r\n};\r\n\r\n\r\n// General helper for diff-ing two objects.\r\n// callbacks is an object like so:\r\n// { leftOnly: function (key, leftValue) {...},\r\n//   rightOnly: function (key, rightValue) {...},\r\n//   both: function (key, leftValue, rightValue) {...},\r\n// }\r\nLocalCollection._diffObjects = function (left, right, callbacks) {\r\n  _.each(left, function (leftValue, key) {\r\n    if (_.has(right, key))\r\n      callbacks.both && callbacks.both(key, leftValue, right[key]);\r\n    else\r\n      callbacks.leftOnly && callbacks.leftOnly(key, leftValue);\r\n  });\r\n  if (callbacks.rightOnly) {\r\n    _.each(right, function(rightValue, key) {\r\n      if (!_.has(left, key))\r\n        callbacks.rightOnly(key, rightValue);\r\n    });\r\n  }\r\n};\r\n","LocalCollection._IdMap = function () {\r\n  var self = this;\r\n  IdMap.call(self, LocalCollection._idStringify, LocalCollection._idParse);\r\n};\r\n\r\nMeteor._inherits(LocalCollection._IdMap, IdMap);\r\n\r\n","// XXX maybe move these into another ObserveHelpers package or something\r\n\r\n// _CachingChangeObserver is an object which receives observeChanges callbacks\r\n// and keeps a cache of the current cursor state up to date in self.docs. Users\r\n// of this class should read the docs field but not modify it. You should pass\r\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\r\n// call. Optionally, you can specify your own observeChanges callbacks which are\r\n// invoked immediately before the docs field is updated; this object is made\r\n// available as `this` to those callbacks.\r\nLocalCollection._CachingChangeObserver = function (options) {\r\n  var self = this;\r\n  options = options || {};\r\n\r\n  var orderedFromCallbacks = options.callbacks &&\r\n        LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\r\n  if (_.has(options, 'ordered')) {\r\n    self.ordered = options.ordered;\r\n    if (options.callbacks && options.ordered !== orderedFromCallbacks)\r\n      throw Error(\"ordered option doesn't match callbacks\");\r\n  } else if (options.callbacks) {\r\n    self.ordered = orderedFromCallbacks;\r\n  } else {\r\n    throw Error(\"must provide ordered or callbacks\");\r\n  }\r\n  var callbacks = options.callbacks || {};\r\n\r\n  if (self.ordered) {\r\n    self.docs = new OrderedDict(LocalCollection._idStringify);\r\n    self.applyChange = {\r\n      addedBefore: function (id, fields, before) {\r\n        var doc = EJSON.clone(fields);\r\n        doc._id = id;\r\n        callbacks.addedBefore && callbacks.addedBefore.call(\r\n          self, id, fields, before);\r\n        // This line triggers if we provide added with movedBefore.\r\n        callbacks.added && callbacks.added.call(self, id, fields);\r\n        // XXX could `before` be a falsy ID?  Technically\r\n        // idStringify seems to allow for them -- though\r\n        // OrderedDict won't call stringify on a falsy arg.\r\n        self.docs.putBefore(id, doc, before || null);\r\n      },\r\n      movedBefore: function (id, before) {\r\n        var doc = self.docs.get(id);\r\n        callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);\r\n        self.docs.moveBefore(id, before || null);\r\n      }\r\n    };\r\n  } else {\r\n    self.docs = new LocalCollection._IdMap;\r\n    self.applyChange = {\r\n      added: function (id, fields) {\r\n        var doc = EJSON.clone(fields);\r\n        callbacks.added && callbacks.added.call(self, id, fields);\r\n        doc._id = id;\r\n        self.docs.set(id,  doc);\r\n      }\r\n    };\r\n  }\r\n\r\n  // The methods in _IdMap and OrderedDict used by these callbacks are\r\n  // identical.\r\n  self.applyChange.changed = function (id, fields) {\r\n    var doc = self.docs.get(id);\r\n    if (!doc)\r\n      throw new Error(\"Unknown id for changed: \" + id);\r\n    callbacks.changed && callbacks.changed.call(\r\n      self, id, EJSON.clone(fields));\r\n    LocalCollection._applyChanges(doc, fields);\r\n  };\r\n  self.applyChange.removed = function (id) {\r\n    callbacks.removed && callbacks.removed.call(self, id);\r\n    self.docs.remove(id);\r\n  };\r\n};\r\n\r\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\r\n  var transform = cursor.getTransform() || function (doc) {return doc;};\r\n  var suppressed = !!observeCallbacks._suppress_initial;\r\n\r\n  var observeChangesCallbacks;\r\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\r\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\r\n    // linear scans required to generate them.  This lets observers that don't\r\n    // need absolute indices benefit from the other features of this API --\r\n    // relative order, transforms, and applyChanges -- without the speed hit.\r\n    var indices = !observeCallbacks._no_indices;\r\n    observeChangesCallbacks = {\r\n      addedBefore: function (id, fields, before) {\r\n        var self = this;\r\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added))\r\n          return;\r\n        var doc = transform(_.extend(fields, {_id: id}));\r\n        if (observeCallbacks.addedAt) {\r\n          var index = indices\r\n                ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\r\n          observeCallbacks.addedAt(doc, index, before);\r\n        } else {\r\n          observeCallbacks.added(doc);\r\n        }\r\n      },\r\n      changed: function (id, fields) {\r\n        var self = this;\r\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed))\r\n          return;\r\n        var doc = EJSON.clone(self.docs.get(id));\r\n        if (!doc)\r\n          throw new Error(\"Unknown id for changed: \" + id);\r\n        var oldDoc = transform(EJSON.clone(doc));\r\n        LocalCollection._applyChanges(doc, fields);\r\n        doc = transform(doc);\r\n        if (observeCallbacks.changedAt) {\r\n          var index = indices ? self.docs.indexOf(id) : -1;\r\n          observeCallbacks.changedAt(doc, oldDoc, index);\r\n        } else {\r\n          observeCallbacks.changed(doc, oldDoc);\r\n        }\r\n      },\r\n      movedBefore: function (id, before) {\r\n        var self = this;\r\n        if (!observeCallbacks.movedTo)\r\n          return;\r\n        var from = indices ? self.docs.indexOf(id) : -1;\r\n\r\n        var to = indices\r\n              ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\r\n        // When not moving backwards, adjust for the fact that removing the\r\n        // document slides everything back one slot.\r\n        if (to > from)\r\n          --to;\r\n        observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))),\r\n                                 from, to, before || null);\r\n      },\r\n      removed: function (id) {\r\n        var self = this;\r\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed))\r\n          return;\r\n        // technically maybe there should be an EJSON.clone here, but it's about\r\n        // to be removed from self.docs!\r\n        var doc = transform(self.docs.get(id));\r\n        if (observeCallbacks.removedAt) {\r\n          var index = indices ? self.docs.indexOf(id) : -1;\r\n          observeCallbacks.removedAt(doc, index);\r\n        } else {\r\n          observeCallbacks.removed(doc);\r\n        }\r\n      }\r\n    };\r\n  } else {\r\n    observeChangesCallbacks = {\r\n      added: function (id, fields) {\r\n        if (!suppressed && observeCallbacks.added) {\r\n          var doc = _.extend(fields, {_id:  id});\r\n          observeCallbacks.added(transform(doc));\r\n        }\r\n      },\r\n      changed: function (id, fields) {\r\n        var self = this;\r\n        if (observeCallbacks.changed) {\r\n          var oldDoc = self.docs.get(id);\r\n          var doc = EJSON.clone(oldDoc);\r\n          LocalCollection._applyChanges(doc, fields);\r\n          observeCallbacks.changed(transform(doc), transform(oldDoc));\r\n        }\r\n      },\r\n      removed: function (id) {\r\n        var self = this;\r\n        if (observeCallbacks.removed) {\r\n          observeCallbacks.removed(transform(self.docs.get(id)));\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  var changeObserver = new LocalCollection._CachingChangeObserver(\r\n    {callbacks: observeChangesCallbacks});\r\n  var handle = cursor.observeChanges(changeObserver.applyChange);\r\n  suppressed = false;\r\n\r\n  if (changeObserver.ordered) {\r\n    // Fetches the current list of documents, in order, as an array.  Can be\r\n    // called at any time.  Internal API assumed by the `observe-sequence`\r\n    // package (used by Meteor UI for `#each` blocks).  Only defined on ordered\r\n    // observes (those that listen on `addedAt` or similar).  Continues to work\r\n    // after `stop()` is called on the handle.\r\n    //\r\n    // Because we already materialize the full OrderedDict of all documents, it\r\n    // seems nice to provide access to the view rather than making the data\r\n    // consumer reconstitute it.  This gives the consumer a shot at doing\r\n    // something smart with the feed like proxying it, since firing callbacks\r\n    // like `changed` and `movedTo` basically requires omniscience (knowing old\r\n    // and new documents, old and new indices, and the correct value for\r\n    // `before`).\r\n    //\r\n    // NOTE: If called from an observe callback for a certain change, the result\r\n    // is *not* guaranteed to be a snapshot of the cursor up to that\r\n    // change. This is because the callbacks are invoked before updating docs.\r\n    handle._fetch = function () {\r\n      var docsArray = [];\r\n      changeObserver.docs.forEach(function (doc) {\r\n        docsArray.push(transform(EJSON.clone(doc)));\r\n      });\r\n      return docsArray;\r\n    };\r\n  }\r\n\r\n  return handle;\r\n};\r\n","LocalCollection._looksLikeObjectID = function (str) {\r\n  return str.length === 24 && str.match(/^[0-9a-f]*$/);\r\n};\r\n\r\nLocalCollection._ObjectID = function (hexString) {\r\n  //random-based impl of Mongo ObjectID\r\n  var self = this;\r\n  if (hexString) {\r\n    hexString = hexString.toLowerCase();\r\n    if (!LocalCollection._looksLikeObjectID(hexString)) {\r\n      throw new Error(\"Invalid hexadecimal string for creating an ObjectID\");\r\n    }\r\n    // meant to work with _.isEqual(), which relies on structural equality\r\n    self._str = hexString;\r\n  } else {\r\n    self._str = Random.hexString(24);\r\n  }\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.toString = function () {\r\n  var self = this;\r\n  return \"ObjectID(\\\"\" + self._str + \"\\\")\";\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.equals = function (other) {\r\n  var self = this;\r\n  return other instanceof LocalCollection._ObjectID &&\r\n    self.valueOf() === other.valueOf();\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.clone = function () {\r\n  var self = this;\r\n  return new LocalCollection._ObjectID(self._str);\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.typeName = function() {\r\n  return \"oid\";\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.getTimestamp = function() {\r\n  var self = this;\r\n  return parseInt(self._str.substr(0, 8), 16);\r\n};\r\n\r\nLocalCollection._ObjectID.prototype.valueOf =\r\n    LocalCollection._ObjectID.prototype.toJSONValue =\r\n    LocalCollection._ObjectID.prototype.toHexString =\r\n    function () { return this._str; };\r\n\r\n// Is this selector just shorthand for lookup by _id?\r\nLocalCollection._selectorIsId = function (selector) {\r\n  return (typeof selector === \"string\") ||\r\n    (typeof selector === \"number\") ||\r\n    selector instanceof LocalCollection._ObjectID;\r\n};\r\n\r\n// Is the selector just lookup by _id (shorthand or not)?\r\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\r\n  return LocalCollection._selectorIsId(selector) ||\r\n    (selector && typeof selector === \"object\" &&\r\n     selector._id && LocalCollection._selectorIsId(selector._id) &&\r\n     _.size(selector) === 1);\r\n};\r\n\r\n// If this is a selector which explicitly constrains the match by ID to a finite\r\n// number of documents, returns a list of their IDs.  Otherwise returns\r\n// null. Note that the selector may have other restrictions so it may not even\r\n// match those document!  We care about $in and $and since those are generated\r\n// access-controlled update and remove.\r\nLocalCollection._idsMatchedBySelector = function (selector) {\r\n  // Is the selector just an ID?\r\n  if (LocalCollection._selectorIsId(selector))\r\n    return [selector];\r\n  if (!selector)\r\n    return null;\r\n\r\n  // Do we have an _id clause?\r\n  if (_.has(selector, '_id')) {\r\n    // Is the _id clause just an ID?\r\n    if (LocalCollection._selectorIsId(selector._id))\r\n      return [selector._id];\r\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\r\n    if (selector._id && selector._id.$in\r\n        && _.isArray(selector._id.$in)\r\n        && !_.isEmpty(selector._id.$in)\r\n        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {\r\n      return selector._id.$in;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // If this is a top-level $and, and any of the clauses constrain their\r\n  // documents, then the whole selector is constrained by any one clause's\r\n  // constraint. (Well, by their intersection, but that seems unlikely.)\r\n  if (selector.$and && _.isArray(selector.$and)) {\r\n    for (var i = 0; i < selector.$and.length; ++i) {\r\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\r\n      if (subIds)\r\n        return subIds;\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nEJSON.addType(\"oid\",  function (str) {\r\n  return new LocalCollection._ObjectID(str);\r\n});\r\n"]}