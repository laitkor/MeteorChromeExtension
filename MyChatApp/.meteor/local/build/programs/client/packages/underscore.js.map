)]}'
{"version":3,"file":"\\packages\\underscore.js","sources":["underscore/pre.js","underscore/underscore.js","underscore/post.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gF;AACA,sE;AACA,a;;;;;;;;;;;;;;;;;;;ACFA,0B;AACA,8B;AACA,yF;AACA,kE;;AAEA,a;;AAEA,mB;AACA,mB;;AAEA,oF;AACA,kB;;AAEA,iD;AACA,kC;;AAEA,8E;AACA,mB;;AAEA,0D;AACA,gG;;AAEA,0E;AACA,K;AACA,uC;AACA,wC;AACA,yC;AACA,yC;AACA,+C;;AAEA,6E;AACA,uB;AACA,K;AACA,4C;AACA,wC;AACA,2C;AACA,gD;AACA,2C;AACA,0C;AACA,yC;AACA,4C;AACA,gD;AACA,uC;AACA,qC;AACA,wC;;AAEA,oE;AACA,yB;AACA,qC;AACA,gD;AACA,wB;AACA,I;;AAEA,uD;AACA,qE;AACA,qE;AACA,0C;AACA,uC;AACA,0D;AACA,mC;AACA,K;AACA,kB;AACA,U;AACA,e;AACA,G;;AAEA,qB;AACA,sB;;AAEA,yB;AACA,yB;;AAEA,+D;AACA,iE;AACA,iE;AACA,mB;AACA,qC;AACA,uD;AACA,I;AACA,0E;AACA,kD;AACA,iC;AACA,mC;AACA,+F;AACA,M;AACA,G;;AAEA,gF;AACA,8E;AACA,mD;AACA,gD;AACA,uD;AACA,uC;AACA,sC;AACA,6D;AACA,kE;AACA,I;;AAEA,8D;AACA,0E;AACA,mE;AACA,oE;AACA,4B;AACA,yD;AACA,qC;AACA,qC;AACA,6D;AACA,uE;AACA,O;AACA,Y;AACA,6B;AACA,8D;AACA,mF;AACA,O;AACA,K;AACA,I;;AAEA,iE;AACA,+D;AACA,wD;AACA,qB;AACA,oC;AACA,8E;AACA,4C;AACA,+D;AACA,O;AACA,mB;AACA,I;;AAEA,kE;;AAEA,8E;AACA,8E;AACA,0E;AACA,uC;AACA,8B;AACA,sD;AACA,wD;AACA,yE;AACA,K;AACA,4C;AACA,qB;AACA,qB;AACA,uB;AACA,c;AACA,gE;AACA,O;AACA,O;AACA,mD;AACA,gB;AACA,I;;AAEA,oE;AACA,uE;AACA,oE;AACA,uC;AACA,8B;AACA,qE;AACA,wD;AACA,mF;AACA,K;AACA,4B;AACA,+B;AACA,6B;AACA,2B;AACA,K;AACA,4C;AACA,+C;AACA,qB;AACA,0B;AACA,uB;AACA,c;AACA,qE;AACA,O;AACA,O;AACA,mD;AACA,gB;AACA,I;;AAEA,2E;AACA,wD;AACA,e;AACA,2C;AACA,uD;AACA,uB;AACA,oB;AACA,O;AACA,O;AACA,kB;AACA,I;;AAEA,oD;AACA,kE;AACA,yB;AACA,0D;AACA,qB;AACA,oC;AACA,0F;AACA,4C;AACA,0E;AACA,O;AACA,mB;AACA,I;;AAEA,0D;AACA,+C;AACA,uD;AACA,yD;AACA,gB;AACA,I;;AAEA,8D;AACA,iE;AACA,sB;AACA,sD;AACA,wC;AACA,sB;AACA,mC;AACA,sF;AACA,4C;AACA,2F;AACA,O;AACA,oB;AACA,I;;AAEA,0E;AACA,gE;AACA,sB;AACA,+D;AACA,wC;AACA,uB;AACA,mC;AACA,kF;AACA,4C;AACA,0F;AACA,O;AACA,oB;AACA,I;;AAEA,2E;AACA,0B;AACA,kD;AACA,kC;AACA,yF;AACA,qC;AACA,8B;AACA,O;AACA,I;;AAEA,oE;AACA,oC;AACA,wC;AACA,sC;AACA,uC;AACA,kE;AACA,O;AACA,I;;AAEA,4E;AACA,gC;AACA,6D;AACA,I;;AAEA,iF;AACA,2C;AACA,yC;AACA,qD;AACA,8D;AACA,8B;AACA,oD;AACA,O;AACA,kB;AACA,O;AACA,I;;AAEA,iF;AACA,2C;AACA,sC;AACA,qC;AACA,I;;AAEA,+D;AACA,mE;AACA,0E;AACA,4C;AACA,kF;AACA,uC;AACA,K;AACA,sD;AACA,0D;AACA,4C;AACA,mF;AACA,oF;AACA,O;AACA,wB;AACA,I;;AAEA,+D;AACA,4C;AACA,kF;AACA,uC;AACA,K;AACA,qD;AACA,wD;AACA,4C;AACA,mF;AACA,oF;AACA,O;AACA,wB;AACA,I;;AAEA,uD;AACA,+E;AACA,6B;AACA,a;AACA,kB;AACA,sB;AACA,+B;AACA,+B;AACA,2C;AACA,6B;AACA,O;AACA,oB;AACA,I;;AAEA,8C;AACA,+E;AACA,gE;AACA,sC;AACA,wC;AACA,2C;AACA,K;AACA,mD;AACA,I;;AAEA,uD;AACA,wC;AACA,6E;AACA,I;;AAEA,qE;AACA,4C;AACA,yC;AACA,4D;AACA,c;AACA,qB;AACA,qB;AACA,4D;AACA,Q;AACA,mC;AACA,4B;AACA,6B;AACA,oB;AACA,4C;AACA,6C;AACA,O;AACA,sC;AACA,iB;AACA,I;;AAEA,mE;AACA,kC;AACA,0C;AACA,sB;AACA,wE;AACA,wC;AACA,4D;AACA,qC;AACA,S;AACA,oB;AACA,M;AACA,I;;AAEA,8E;AACA,2D;AACA,kD;AACA,wE;AACA,K;;AAEA,8E;AACA,yD;AACA,kD;AACA,wB;AACA,K;;AAEA,0E;AACA,0E;AACA,e;AACA,2C;AACA,yD;AACA,K;;AAEA,wE;AACA,8E;AACA,2D;AACA,wE;AACA,4C;AACA,qC;AACA,wB;AACA,mC;AACA,8E;AACA,K;AACA,e;AACA,I;;AAEA,6D;AACA,6B;AACA,wB;AACA,+C;AACA,2D;AACA,yB;AACA,I;;AAEA,gD;AACA,0B;AACA,8B;AACA,mE;AACA,I;;AAEA,oB;AACA,oB;;AAEA,6E;AACA,2E;AACA,oC;AACA,yD;AACA,qC;AACA,qE;AACA,I;;AAEA,6E;AACA,sE;AACA,gF;AACA,a;AACA,yC;AACA,+E;AACA,I;;AAEA,2E;AACA,6E;AACA,sC;AACA,qC;AACA,+B;AACA,qC;AACA,Y;AACA,8D;AACA,K;AACA,I;;AAEA,uF;AACA,4E;AACA,kD;AACA,0C;AACA,wD;AACA,2D;AACA,I;;AAEA,6C;AACA,+B;AACA,uC;AACA,I;;AAEA,+D;AACA,kD;AACA,+C;AACA,yC;AACA,K;AACA,iC;AACA,qD;AACA,8E;AACA,c;AACA,2B;AACA,O;AACA,O;AACA,kB;AACA,I;;AAEA,8E;AACA,wC;AACA,uC;AACA,I;;AAEA,gF;AACA,+B;AACA,yD;AACA,I;;AAEA,4E;AACA,kE;AACA,yB;AACA,oE;AACA,iC;AACA,yB;AACA,0B;AACA,uB;AACA,K;AACA,qE;AACA,qB;AACA,kB;AACA,0C;AACA,8F;AACA,yB;AACA,mC;AACA,O;AACA,O;AACA,mB;AACA,I;;AAEA,gF;AACA,0B;AACA,wB;AACA,8C;AACA,I;;AAEA,qE;AACA,sB;AACA,oC;AACA,wC;AACA,mD;AACA,4C;AACA,2C;AACA,S;AACA,O;AACA,I;;AAEA,wE;AACA,mE;AACA,kC;AACA,kE;AACA,gF;AACA,I;;AAEA,2E;AACA,0B;AACA,sB;AACA,+D;AACA,oC;AACA,sC;AACA,8C;AACA,K;AACA,mB;AACA,I;;AAEA,8E;AACA,gF;AACA,8B;AACA,qC;AACA,gC;AACA,oB;AACA,4D;AACA,mB;AACA,oC;AACA,c;AACA,wC;AACA,O;AACA,K;AACA,kB;AACA,I;;AAEA,kF;AACA,6E;AACA,sE;AACA,mE;AACA,iE;AACA,2C;AACA,+C;AACA,iC;AACA,qC;AACA,mB;AACA,wC;AACA,uE;AACA,c;AACA,uC;AACA,0C;AACA,O;AACA,K;AACA,+F;AACA,4D;AACA,c;AACA,I;;AAEA,uE;AACA,+C;AACA,iC;AACA,gC;AACA,uE;AACA,gF;AACA,K;AACA,6C;AACA,gD;AACA,c;AACA,I;;AAEA,8E;AACA,8C;AACA,qF;AACA,yC;AACA,gC;AACA,wB;AACA,gB;AACA,K;AACA,6B;;AAEA,+D;AACA,gB;AACA,kC;;AAEA,yB;AACA,2B;AACA,oB;AACA,K;;AAEA,iB;AACA,I;;AAEA,8B;AACA,uB;;AAEA,yD;AACA,0B;;AAEA,gF;AACA,2E;AACA,e;AACA,oC;AACA,oB;AACA,wG;AACA,iD;AACA,oC;AACA,+B;AACA,mG;AACA,sC;AACA,0B;AACA,4B;AACA,wE;AACA,mD;AACA,kB;AACA,M;AACA,I;;AAEA,8E;AACA,uE;AACA,8B;AACA,wC;AACA,uB;AACA,kE;AACA,M;AACA,I;;AAEA,6E;AACA,qD;AACA,6B;AACA,yC;AACA,qF;AACA,+D;AACA,e;AACA,I;;AAEA,0D;AACA,sC;AACA,kB;AACA,oC;AACA,uB;AACA,8C;AACA,sF;AACA,M;AACA,I;;AAEA,2E;AACA,oC;AACA,kC;AACA,wC;AACA,0E;AACA,I;;AAEA,6E;AACA,a;AACA,4B;AACA,wE;AACA,I;;AAEA,gF;AACA,6E;AACA,8E;AACA,yE;AACA,0E;AACA,8C;AACA,8B;AACA,uB;AACA,qB;AACA,8B;AACA,4B;AACA,0D;AACA,qB;AACA,yC;AACA,M;AACA,uB;AACA,yB;AACA,iE;AACA,8C;AACA,qB;AACA,uB;AACA,2B;AACA,8B;AACA,uB;AACA,uB;AACA,2C;AACA,0D;AACA,+C;AACA,O;AACA,oB;AACA,M;AACA,I;;AAEA,8E;AACA,8E;AACA,0E;AACA,2C;AACA,gD;AACA,kD;AACA,uB;AACA,qB;AACA,uB;AACA,6B;AACA,8B;AACA,4C;AACA,0B;AACA,mD;AACA,gB;AACA,yB;AACA,6D;AACA,S;AACA,Q;AACA,0C;AACA,qB;AACA,0C;AACA,O;AACA,sD;AACA,oB;AACA,M;AACA,I;;AAEA,6E;AACA,uD;AACA,2B;AACA,0B;AACA,uB;AACA,2B;AACA,iB;AACA,yC;AACA,kB;AACA,kB;AACA,M;AACA,I;;AAEA,oE;AACA,qE;AACA,iD;AACA,oC;AACA,uB;AACA,wB;AACA,kC;AACA,uC;AACA,M;AACA,I;;AAEA,4E;AACA,6D;AACA,0B;AACA,0B;AACA,uB;AACA,2B;AACA,mD;AACA,4C;AACA,O;AACA,qB;AACA,M;AACA,I;;AAEA,8E;AACA,mC;AACA,uB;AACA,wB;AACA,2C;AACA,O;AACA,M;AACA,I;;AAEA,qB;AACA,qB;;AAEA,kD;AACA,yD;AACA,wC;AACA,mE;AACA,kB;AACA,6D;AACA,gB;AACA,I;;AAEA,mD;AACA,4B;AACA,2B;AACA,6B;AACA,mC;AACA,sC;AACA,+B;AACA,K;AACA,kB;AACA,I;;AAEA,2D;AACA,2B;AACA,2B;AACA,6B;AACA,kC;AACA,sC;AACA,yC;AACA,K;AACA,iB;AACA,I;;AAEA,8E;AACA,4B;AACA,oB;AACA,2B;AACA,4D;AACA,qC;AACA,K;AACA,kB;AACA,I;;AAEA,wE;AACA,yB;AACA,2C;AACA,mB;AACA,0B;AACA,kD;AACA,K;AACA,wB;AACA,I;;AAEA,0E;AACA,4B;AACA,qD;AACA,mB;AACA,kC;AACA,mC;AACA,S;AACA,O;AACA,O;AACA,e;AACA,I;;AAEA,4E;AACA,0B;AACA,kB;AACA,kE;AACA,8B;AACA,2C;AACA,O;AACA,gB;AACA,I;;AAEA,qE;AACA,0B;AACA,kB;AACA,kE;AACA,0B;AACA,uD;AACA,K;AACA,gB;AACA,I;;AAEA,oD;AACA,8B;AACA,qD;AACA,mB;AACA,kC;AACA,6D;AACA,S;AACA,O;AACA,O;AACA,e;AACA,I;;AAEA,sD;AACA,2B;AACA,qC;AACA,4D;AACA,I;;AAEA,4D;AACA,2E;AACA,0E;AACA,sC;AACA,qB;AACA,e;AACA,I;;AAEA,0D;AACA,2C;AACA,0E;AACA,8F;AACA,kD;AACA,oE;AACA,+C;AACA,kC;AACA,uC;AACA,uC;AACA,iC;AACA,qC;AACA,oD;AACA,wB;AACA,qE;AACA,6B;AACA,4F;AACA,2C;AACA,8B;AACA,6B;AACA,0F;AACA,gC;AACA,uE;AACA,2B;AACA,8B;AACA,6F;AACA,gG;AACA,uC;AACA,wB;AACA,iE;AACA,6B;AACA,sC;AACA,sC;AACA,4C;AACA,4C;AACA,K;AACA,mE;AACA,gF;AACA,kF;AACA,+B;AACA,sB;AACA,8E;AACA,kC;AACA,0D;AACA,K;AACA,4E;AACA,iC;AACA,qD;AACA,+E;AACA,gF;AACA,mB;AACA,K;AACA,8D;AACA,mB;AACA,mB;AACA,gC;AACA,8C;AACA,wC;AACA,8E;AACA,sB;AACA,gC;AACA,mB;AACA,sE;AACA,wB;AACA,sE;AACA,S;AACA,O;AACA,Y;AACA,8B;AACA,0B;AACA,4B;AACA,qD;AACA,iB;AACA,sC;AACA,qF;AACA,S;AACA,O;AACA,wE;AACA,mB;AACA,wB;AACA,gD;AACA,S;AACA,uB;AACA,O;AACA,K;AACA,mE;AACA,iB;AACA,iB;AACA,kB;AACA,I;;AAEA,iE;AACA,8B;AACA,4B;AACA,I;;AAEA,+C;AACA,wD;AACA,6B;AACA,iC;AACA,mE;AACA,2D;AACA,gB;AACA,I;;AAEA,oC;AACA,+B;AACA,yC;AACA,I;;AAEA,+B;AACA,8C;AACA,8C;AACA,kD;AACA,I;;AAEA,mC;AACA,8B;AACA,+B;AACA,I;;AAEA,4F;AACA,wF;AACA,oC;AACA,2D;AACA,M;AACA,K;;AAEA,0E;AACA,kD;AACA,kC;AACA,mC;AACA,6C;AACA,M;AACA,G;;AAEA,0C;AACA,oC;AACA,kC;AACA,uC;AACA,M;AACA,G;;AAEA,uC;AACA,8B;AACA,oD;AACA,I;;AAEA,oF;AACA,2B;AACA,0C;AACA,I;;AAEA,gC;AACA,+B;AACA,qF;AACA,I;;AAEA,oC;AACA,4B;AACA,wB;AACA,I;;AAEA,mC;AACA,iC;AACA,0B;AACA,I;;AAEA,8E;AACA,oD;AACA,8B;AACA,yC;AACA,I;;AAEA,sB;AACA,sB;;AAEA,8E;AACA,kE;AACA,6B;AACA,gC;AACA,gB;AACA,I;;AAEA,6D;AACA,gC;AACA,iB;AACA,I;;AAEA,gC;AACA,4C;AACA,sC;AACA,qE;AACA,iB;AACA,I;;AAEA,6D;AACA,iC;AACA,sB;AACA,gB;AACA,c;AACA,K;AACA,6D;AACA,I;;AAEA,wC;AACA,mB;AACA,a;AACA,mB;AACA,kB;AACA,kB;AACA,oB;AACA,mB;AACA,K;AACA,I;AACA,kD;;AAEA,qE;AACA,uB;AACA,6E;AACA,+E;AACA,I;;AAEA,8E;AACA,mD;AACA,kC;AACA,oC;AACA,2E;AACA,wC;AACA,S;AACA,M;AACA,K;;AAEA,+E;AACA,+C;AACA,yC;AACA,sC;AACA,iC;AACA,4D;AACA,I;;AAEA,4D;AACA,2B;AACA,2C;AACA,qC;AACA,sC;AACA,mC;AACA,oC;AACA,sD;AACA,Q;AACA,O;AACA,I;;AAEA,4E;AACA,kC;AACA,oB;AACA,iC;AACA,8B;AACA,qC;AACA,I;;AAEA,0E;AACA,+D;AACA,wB;AACA,oC;AACA,qC;AACA,oC;AACA,I;;AAEA,wE;AACA,qE;AACA,6B;AACA,uB;;AAEA,yE;AACA,oB;AACA,iB;AACA,kB;AACA,mB;AACA,kB;AACA,kB;AACA,kB;AACA,sB;AACA,qB;AACA,I;;AAEA,+C;;AAEA,yE;AACA,8E;AACA,2D;AACA,+C;AACA,e;AACA,4D;;AAEA,sE;AACA,8B;AACA,0C;AACA,+C;AACA,2C;AACA,6B;;AAEA,2E;AACA,kB;AACA,0B;AACA,kF;AACA,yC;AACA,6E;;AAEA,mB;AACA,4E;AACA,O;AACA,wB;AACA,uE;AACA,O;AACA,qB;AACA,iD;AACA,O;AACA,oC;AACA,mB;AACA,O;AACA,qB;;AAEA,wE;AACA,yE;;AAEA,yD;AACA,2D;AACA,+B;;AAEA,S;AACA,qE;AACA,iB;AACA,wB;AACA,c;AACA,K;;AAEA,qC;AACA,mC;AACA,wC;AACA,M;;AAEA,gF;AACA,yF;;AAEA,oB;AACA,I;;AAEA,gE;AACA,2B;AACA,0B;AACA,I;;AAEA,Q;AACA,oB;AACA,4E;AACA,yE;AACA,0D;;AAEA,+D;AACA,8B;AACA,8C;AACA,I;;AAEA,+D;AACA,a;;AAEA,oD;AACA,yF;AACA,kC;AACA,oC;AACA,8B;AACA,mC;AACA,mF;AACA,oC;AACA,M;AACA,K;;AAEA,qD;AACA,oD;AACA,kC;AACA,oC;AACA,uE;AACA,M;AACA,K;;AAEA,yB;;AAEA,kD;AACA,uB;AACA,yB;AACA,kB;AACA,M;;AAEA,6D;AACA,uB;AACA,2B;AACA,K;;AAEA,K;;AAEA,c;;;;;;;;;;;;;;;;;;;ACrxCA,8E;AACA,gE;AACA,c","sourcesContent":["// Define an object named exports. This will cause underscore.js to put `_` as a\r\n// field on it, instead of in the global namespace.  See also post.js.\r\nexports = {};\r\n","//     Underscore.js 1.5.2\r\n//     http://underscorejs.org\r\n//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n//     Underscore may be freely distributed under the MIT license.\r\n\r\n(function() {\r\n\r\n  // Baseline setup\r\n  // --------------\r\n\r\n  // Establish the root object, `window` in the browser, or `exports` on the server.\r\n  var root = this;\r\n\r\n  // Save the previous value of the `_` variable.\r\n  var previousUnderscore = root._;\r\n\r\n  // Establish the object that gets returned to break out of a loop iteration.\r\n  var breaker = {};\r\n\r\n  // Save bytes in the minified (but not gzipped) version:\r\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\r\n\r\n  // Create quick reference variables for speed access to core prototypes.\r\n  var\r\n    push             = ArrayProto.push,\r\n    slice            = ArrayProto.slice,\r\n    concat           = ArrayProto.concat,\r\n    toString         = ObjProto.toString,\r\n    hasOwnProperty   = ObjProto.hasOwnProperty;\r\n\r\n  // All **ECMAScript 5** native function implementations that we hope to use\r\n  // are declared here.\r\n  var\r\n    nativeForEach      = ArrayProto.forEach,\r\n    nativeMap          = ArrayProto.map,\r\n    nativeReduce       = ArrayProto.reduce,\r\n    nativeReduceRight  = ArrayProto.reduceRight,\r\n    nativeFilter       = ArrayProto.filter,\r\n    nativeEvery        = ArrayProto.every,\r\n    nativeSome         = ArrayProto.some,\r\n    nativeIndexOf      = ArrayProto.indexOf,\r\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\r\n    nativeIsArray      = Array.isArray,\r\n    nativeKeys         = Object.keys,\r\n    nativeBind         = FuncProto.bind;\r\n\r\n  // Create a safe reference to the Underscore object for use below.\r\n  var _ = function(obj) {\r\n    if (obj instanceof _) return obj;\r\n    if (!(this instanceof _)) return new _(obj);\r\n    this._wrapped = obj;\r\n  };\r\n\r\n  // Export the Underscore object for **Node.js**, with\r\n  // backwards-compatibility for the old `require()` API. If we're in\r\n  // the browser, add `_` as a global object via a string identifier,\r\n  // for Closure Compiler \"advanced\" mode.\r\n  if (typeof exports !== 'undefined') {\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n      exports = module.exports = _;\r\n    }\r\n    exports._ = _;\r\n  } else {\r\n    root._ = _;\r\n  }\r\n\r\n  // Current version.\r\n  _.VERSION = '1.5.2';\r\n\r\n  // Collection Functions\r\n  // --------------------\r\n\r\n  // METEOR CHANGE: Define _isArguments instead of depending on\r\n  // _.isArguments which is defined using each. In looksLikeArray\r\n  // (which each depends on), we then use _isArguments instead of\r\n  // _.isArguments.\r\n  var _isArguments = function (obj) {\r\n    return toString.call(obj) === '[object Arguments]';\r\n  };\r\n  // Define a fallback version of the method in browsers (ahem, IE), where\r\n  // there isn't any inspectable \"Arguments\" type.\r\n  if (!_isArguments(arguments)) {\r\n    _isArguments = function (obj) {\r\n      return !!(obj && hasOwnProperty.call(obj, 'callee') && typeof obj.callee === 'function');\r\n    };\r\n  }\r\n\r\n  // METEOR CHANGE: _.each({length: 5}) should be treated like an object, not an\r\n  // array. This looksLikeArray function is introduced by Meteor, and replaces\r\n  // all instances of `obj.length === +obj.length`.\r\n  // https://github.com/meteor/meteor/issues/594\r\n  // https://github.com/jashkenas/underscore/issues/770\r\n  var looksLikeArray = function (obj) {\r\n    return (obj.length === +obj.length\r\n            // _.isArguments not yet necessarily defined here\r\n            && (_isArguments(obj) || obj.constructor !== Object));\r\n  };\r\n\r\n  // The cornerstone, an `each` implementation, aka `forEach`.\r\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\r\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\r\n  var each = _.each = _.forEach = function(obj, iterator, context) {\r\n    if (obj == null) return;\r\n    if (nativeForEach && obj.forEach === nativeForEach) {\r\n      obj.forEach(iterator, context);\r\n    } else if (looksLikeArray(obj)) {\r\n      for (var i = 0, length = obj.length; i < length; i++) {\r\n        if (iterator.call(context, obj[i], i, obj) === breaker) return;\r\n      }\r\n    } else {\r\n      var keys = _.keys(obj);\r\n      for (var i = 0, length = keys.length; i < length; i++) {\r\n        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Return the results of applying the iterator to each element.\r\n  // Delegates to **ECMAScript 5**'s native `map` if available.\r\n  _.map = _.collect = function(obj, iterator, context) {\r\n    var results = [];\r\n    if (obj == null) return results;\r\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\r\n    each(obj, function(value, index, list) {\r\n      results.push(iterator.call(context, value, index, list));\r\n    });\r\n    return results;\r\n  };\r\n\r\n  var reduceError = 'Reduce of empty array with no initial value';\r\n\r\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\r\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\r\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\r\n    var initial = arguments.length > 2;\r\n    if (obj == null) obj = [];\r\n    if (nativeReduce && obj.reduce === nativeReduce) {\r\n      if (context) iterator = _.bind(iterator, context);\r\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\r\n    }\r\n    each(obj, function(value, index, list) {\r\n      if (!initial) {\r\n        memo = value;\r\n        initial = true;\r\n      } else {\r\n        memo = iterator.call(context, memo, value, index, list);\r\n      }\r\n    });\r\n    if (!initial) throw new TypeError(reduceError);\r\n    return memo;\r\n  };\r\n\r\n  // The right-associative version of reduce, also known as `foldr`.\r\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\r\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\r\n    var initial = arguments.length > 2;\r\n    if (obj == null) obj = [];\r\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\r\n      if (context) iterator = _.bind(iterator, context);\r\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\r\n    }\r\n    var length = obj.length;\r\n    if (!looksLikeArray(obj)) {\r\n      var keys = _.keys(obj);\r\n      length = keys.length;\r\n    }\r\n    each(obj, function(value, index, list) {\r\n      index = keys ? keys[--length] : --length;\r\n      if (!initial) {\r\n        memo = obj[index];\r\n        initial = true;\r\n      } else {\r\n        memo = iterator.call(context, memo, obj[index], index, list);\r\n      }\r\n    });\r\n    if (!initial) throw new TypeError(reduceError);\r\n    return memo;\r\n  };\r\n\r\n  // Return the first value which passes a truth test. Aliased as `detect`.\r\n  _.find = _.detect = function(obj, iterator, context) {\r\n    var result;\r\n    any(obj, function(value, index, list) {\r\n      if (iterator.call(context, value, index, list)) {\r\n        result = value;\r\n        return true;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  // Return all the elements that pass a truth test.\r\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\r\n  // Aliased as `select`.\r\n  _.filter = _.select = function(obj, iterator, context) {\r\n    var results = [];\r\n    if (obj == null) return results;\r\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\r\n    each(obj, function(value, index, list) {\r\n      if (iterator.call(context, value, index, list)) results.push(value);\r\n    });\r\n    return results;\r\n  };\r\n\r\n  // Return all the elements for which a truth test fails.\r\n  _.reject = function(obj, iterator, context) {\r\n    return _.filter(obj, function(value, index, list) {\r\n      return !iterator.call(context, value, index, list);\r\n    }, context);\r\n  };\r\n\r\n  // Determine whether all of the elements match a truth test.\r\n  // Delegates to **ECMAScript 5**'s native `every` if available.\r\n  // Aliased as `all`.\r\n  _.every = _.all = function(obj, iterator, context) {\r\n    iterator || (iterator = _.identity);\r\n    var result = true;\r\n    if (obj == null) return result;\r\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\r\n    each(obj, function(value, index, list) {\r\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\r\n    });\r\n    return !!result;\r\n  };\r\n\r\n  // Determine if at least one element in the object matches a truth test.\r\n  // Delegates to **ECMAScript 5**'s native `some` if available.\r\n  // Aliased as `any`.\r\n  var any = _.some = _.any = function(obj, iterator, context) {\r\n    iterator || (iterator = _.identity);\r\n    var result = false;\r\n    if (obj == null) return result;\r\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\r\n    each(obj, function(value, index, list) {\r\n      if (result || (result = iterator.call(context, value, index, list))) return breaker;\r\n    });\r\n    return !!result;\r\n  };\r\n\r\n  // Determine if the array or object contains a given value (using `===`).\r\n  // Aliased as `include`.\r\n  _.contains = _.include = function(obj, target) {\r\n    if (obj == null) return false;\r\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\r\n    return any(obj, function(value) {\r\n      return value === target;\r\n    });\r\n  };\r\n\r\n  // Invoke a method (with arguments) on every item in a collection.\r\n  _.invoke = function(obj, method) {\r\n    var args = slice.call(arguments, 2);\r\n    var isFunc = _.isFunction(method);\r\n    return _.map(obj, function(value) {\r\n      return (isFunc ? method : value[method]).apply(value, args);\r\n    });\r\n  };\r\n\r\n  // Convenience version of a common use case of `map`: fetching a property.\r\n  _.pluck = function(obj, key) {\r\n    return _.map(obj, function(value){ return value[key]; });\r\n  };\r\n\r\n  // Convenience version of a common use case of `filter`: selecting only objects\r\n  // containing specific `key:value` pairs.\r\n  _.where = function(obj, attrs, first) {\r\n    if (_.isEmpty(attrs)) return first ? void 0 : [];\r\n    return _[first ? 'find' : 'filter'](obj, function(value) {\r\n      for (var key in attrs) {\r\n        if (attrs[key] !== value[key]) return false;\r\n      }\r\n      return true;\r\n    });\r\n  };\r\n\r\n  // Convenience version of a common use case of `find`: getting the first object\r\n  // containing specific `key:value` pairs.\r\n  _.findWhere = function(obj, attrs) {\r\n    return _.where(obj, attrs, true);\r\n  };\r\n\r\n  // Return the maximum element or (element-based computation).\r\n  // Can't optimize arrays of integers longer than 65,535 elements.\r\n  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)\r\n  _.max = function(obj, iterator, context) {\r\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\r\n      return Math.max.apply(Math, obj);\r\n    }\r\n    if (!iterator && _.isEmpty(obj)) return -Infinity;\r\n    var result = {computed : -Infinity, value: -Infinity};\r\n    each(obj, function(value, index, list) {\r\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\r\n      computed > result.computed && (result = {value : value, computed : computed});\r\n    });\r\n    return result.value;\r\n  };\r\n\r\n  // Return the minimum element (or element-based computation).\r\n  _.min = function(obj, iterator, context) {\r\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\r\n      return Math.min.apply(Math, obj);\r\n    }\r\n    if (!iterator && _.isEmpty(obj)) return Infinity;\r\n    var result = {computed : Infinity, value: Infinity};\r\n    each(obj, function(value, index, list) {\r\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\r\n      computed < result.computed && (result = {value : value, computed : computed});\r\n    });\r\n    return result.value;\r\n  };\r\n\r\n  // Shuffle an array, using the modern version of the \r\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\r\n  _.shuffle = function(obj) {\r\n    var rand;\r\n    var index = 0;\r\n    var shuffled = [];\r\n    each(obj, function(value) {\r\n      rand = _.random(index++);\r\n      shuffled[index - 1] = shuffled[rand];\r\n      shuffled[rand] = value;\r\n    });\r\n    return shuffled;\r\n  };\r\n\r\n  // Sample **n** random values from an array.\r\n  // If **n** is not specified, returns a single random element from the array.\r\n  // The internal `guard` argument allows it to work with `map`.\r\n  _.sample = function(obj, n, guard) {\r\n    if (arguments.length < 2 || guard) {\r\n      return obj[_.random(obj.length - 1)];\r\n    }\r\n    return _.shuffle(obj).slice(0, Math.max(0, n));\r\n  };\r\n\r\n  // An internal function to generate lookup iterators.\r\n  var lookupIterator = function(value) {\r\n    return _.isFunction(value) ? value : function(obj){ return obj[value]; };\r\n  };\r\n\r\n  // Sort the object's values by a criterion produced by an iterator.\r\n  _.sortBy = function(obj, value, context) {\r\n    var iterator = lookupIterator(value);\r\n    return _.pluck(_.map(obj, function(value, index, list) {\r\n      return {\r\n        value: value,\r\n        index: index,\r\n        criteria: iterator.call(context, value, index, list)\r\n      };\r\n    }).sort(function(left, right) {\r\n      var a = left.criteria;\r\n      var b = right.criteria;\r\n      if (a !== b) {\r\n        if (a > b || a === void 0) return 1;\r\n        if (a < b || b === void 0) return -1;\r\n      }\r\n      return left.index - right.index;\r\n    }), 'value');\r\n  };\r\n\r\n  // An internal function used for aggregate \"group by\" operations.\r\n  var group = function(behavior) {\r\n    return function(obj, value, context) {\r\n      var result = {};\r\n      var iterator = value == null ? _.identity : lookupIterator(value);\r\n      each(obj, function(value, index) {\r\n        var key = iterator.call(context, value, index, obj);\r\n        behavior(result, key, value);\r\n      });\r\n      return result;\r\n    };\r\n  };\r\n\r\n  // Groups the object's values by a criterion. Pass either a string attribute\r\n  // to group by, or a function that returns the criterion.\r\n  _.groupBy = group(function(result, key, value) {\r\n    (_.has(result, key) ? result[key] : (result[key] = [])).push(value);\r\n  });\r\n\r\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\r\n  // when you know that your index values will be unique.\r\n  _.indexBy = group(function(result, key, value) {\r\n    result[key] = value;\r\n  });\r\n\r\n  // Counts instances of an object that group by a certain criterion. Pass\r\n  // either a string attribute to count by, or a function that returns the\r\n  // criterion.\r\n  _.countBy = group(function(result, key) {\r\n    _.has(result, key) ? result[key]++ : result[key] = 1;\r\n  });\r\n\r\n  // Use a comparator function to figure out the smallest index at which\r\n  // an object should be inserted so as to maintain order. Uses binary search.\r\n  _.sortedIndex = function(array, obj, iterator, context) {\r\n    iterator = iterator == null ? _.identity : lookupIterator(iterator);\r\n    var value = iterator.call(context, obj);\r\n    var low = 0, high = array.length;\r\n    while (low < high) {\r\n      var mid = (low + high) >>> 1;\r\n      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;\r\n    }\r\n    return low;\r\n  };\r\n\r\n  // Safely create a real, live array from anything iterable.\r\n  _.toArray = function(obj) {\r\n    if (!obj) return [];\r\n    if (_.isArray(obj)) return slice.call(obj);\r\n    if (looksLikeArray(obj)) return _.map(obj, _.identity);\r\n    return _.values(obj);\r\n  };\r\n\r\n  // Return the number of elements in an object.\r\n  _.size = function(obj) {\r\n    if (obj == null) return 0;\r\n    return (looksLikeArray(obj)) ? obj.length : _.keys(obj).length;\r\n  };\r\n\r\n  // Array Functions\r\n  // ---------------\r\n\r\n  // Get the first element of an array. Passing **n** will return the first N\r\n  // values in the array. Aliased as `head` and `take`. The **guard** check\r\n  // allows it to work with `_.map`.\r\n  _.first = _.head = _.take = function(array, n, guard) {\r\n    if (array == null) return void 0;\r\n    return (n == null) || guard ? array[0] : slice.call(array, 0, n);\r\n  };\r\n\r\n  // Returns everything but the last entry of the array. Especially useful on\r\n  // the arguments object. Passing **n** will return all the values in\r\n  // the array, excluding the last N. The **guard** check allows it to work with\r\n  // `_.map`.\r\n  _.initial = function(array, n, guard) {\r\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\r\n  };\r\n\r\n  // Get the last element of an array. Passing **n** will return the last N\r\n  // values in the array. The **guard** check allows it to work with `_.map`.\r\n  _.last = function(array, n, guard) {\r\n    if (array == null) return void 0;\r\n    if ((n == null) || guard) {\r\n      return array[array.length - 1];\r\n    } else {\r\n      return slice.call(array, Math.max(array.length - n, 0));\r\n    }\r\n  };\r\n\r\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\r\n  // Especially useful on the arguments object. Passing an **n** will return\r\n  // the rest N values in the array. The **guard**\r\n  // check allows it to work with `_.map`.\r\n  _.rest = _.tail = _.drop = function(array, n, guard) {\r\n    return slice.call(array, (n == null) || guard ? 1 : n);\r\n  };\r\n\r\n  // Trim out all falsy values from an array.\r\n  _.compact = function(array) {\r\n    return _.filter(array, _.identity);\r\n  };\r\n\r\n  // Internal implementation of a recursive `flatten` function.\r\n  var flatten = function(input, shallow, output) {\r\n    if (shallow && _.every(input, _.isArray)) {\r\n      return concat.apply(output, input);\r\n    }\r\n    each(input, function(value) {\r\n      if (_.isArray(value) || _.isArguments(value)) {\r\n        shallow ? push.apply(output, value) : flatten(value, shallow, output);\r\n      } else {\r\n        output.push(value);\r\n      }\r\n    });\r\n    return output;\r\n  };\r\n\r\n  // Flatten out an array, either recursively (by default), or just one level.\r\n  _.flatten = function(array, shallow) {\r\n    return flatten(array, shallow, []);\r\n  };\r\n\r\n  // Return a version of the array that does not contain the specified value(s).\r\n  _.without = function(array) {\r\n    return _.difference(array, slice.call(arguments, 1));\r\n  };\r\n\r\n  // Produce a duplicate-free version of the array. If the array has already\r\n  // been sorted, you have the option of using a faster algorithm.\r\n  // Aliased as `unique`.\r\n  _.uniq = _.unique = function(array, isSorted, iterator, context) {\r\n    if (_.isFunction(isSorted)) {\r\n      context = iterator;\r\n      iterator = isSorted;\r\n      isSorted = false;\r\n    }\r\n    var initial = iterator ? _.map(array, iterator, context) : array;\r\n    var results = [];\r\n    var seen = [];\r\n    each(initial, function(value, index) {\r\n      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {\r\n        seen.push(value);\r\n        results.push(array[index]);\r\n      }\r\n    });\r\n    return results;\r\n  };\r\n\r\n  // Produce an array that contains the union: each distinct element from all of\r\n  // the passed-in arrays.\r\n  _.union = function() {\r\n    return _.uniq(_.flatten(arguments, true));\r\n  };\r\n\r\n  // Produce an array that contains every item shared between all the\r\n  // passed-in arrays.\r\n  _.intersection = function(array) {\r\n    var rest = slice.call(arguments, 1);\r\n    return _.filter(_.uniq(array), function(item) {\r\n      return _.every(rest, function(other) {\r\n        return _.indexOf(other, item) >= 0;\r\n      });\r\n    });\r\n  };\r\n\r\n  // Take the difference between one array and a number of other arrays.\r\n  // Only the elements present in just the first array will remain.\r\n  _.difference = function(array) {\r\n    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));\r\n    return _.filter(array, function(value){ return !_.contains(rest, value); });\r\n  };\r\n\r\n  // Zip together multiple lists into a single array -- elements that share\r\n  // an index go together.\r\n  _.zip = function() {\r\n    var length = _.max(_.pluck(arguments, \"length\").concat(0));\r\n    var results = new Array(length);\r\n    for (var i = 0; i < length; i++) {\r\n      results[i] = _.pluck(arguments, '' + i);\r\n    }\r\n    return results;\r\n  };\r\n\r\n  // Converts lists into objects. Pass either a single array of `[key, value]`\r\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\r\n  // the corresponding values.\r\n  _.object = function(list, values) {\r\n    if (list == null) return {};\r\n    var result = {};\r\n    for (var i = 0, length = list.length; i < length; i++) {\r\n      if (values) {\r\n        result[list[i]] = values[i];\r\n      } else {\r\n        result[list[i][0]] = list[i][1];\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\r\n  // we need this function. Return the position of the first occurrence of an\r\n  // item in an array, or -1 if the item is not included in the array.\r\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\r\n  // If the array is large and already in sort order, pass `true`\r\n  // for **isSorted** to use binary search.\r\n  _.indexOf = function(array, item, isSorted) {\r\n    if (array == null) return -1;\r\n    var i = 0, length = array.length;\r\n    if (isSorted) {\r\n      if (typeof isSorted == 'number') {\r\n        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);\r\n      } else {\r\n        i = _.sortedIndex(array, item);\r\n        return array[i] === item ? i : -1;\r\n      }\r\n    }\r\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);\r\n    for (; i < length; i++) if (array[i] === item) return i;\r\n    return -1;\r\n  };\r\n\r\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\r\n  _.lastIndexOf = function(array, item, from) {\r\n    if (array == null) return -1;\r\n    var hasIndex = from != null;\r\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {\r\n      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);\r\n    }\r\n    var i = (hasIndex ? from : array.length);\r\n    while (i--) if (array[i] === item) return i;\r\n    return -1;\r\n  };\r\n\r\n  // Generate an integer Array containing an arithmetic progression. A port of\r\n  // the native Python `range()` function. See\r\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\r\n  _.range = function(start, stop, step) {\r\n    if (arguments.length <= 1) {\r\n      stop = start || 0;\r\n      start = 0;\r\n    }\r\n    step = arguments[2] || 1;\r\n\r\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\r\n    var idx = 0;\r\n    var range = new Array(length);\r\n\r\n    while(idx < length) {\r\n      range[idx++] = start;\r\n      start += step;\r\n    }\r\n\r\n    return range;\r\n  };\r\n\r\n  // Function (ahem) Functions\r\n  // ------------------\r\n\r\n  // Reusable constructor function for prototype setting.\r\n  var ctor = function(){};\r\n\r\n  // Create a function bound to a given object (assigning `this`, and arguments,\r\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\r\n  // available.\r\n  _.bind = function(func, context) {\r\n    var args, bound;\r\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\r\n    if (!_.isFunction(func)) throw new TypeError;\r\n    args = slice.call(arguments, 2);\r\n    return bound = function() {\r\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\r\n      ctor.prototype = func.prototype;\r\n      var self = new ctor;\r\n      ctor.prototype = null;\r\n      var result = func.apply(self, args.concat(slice.call(arguments)));\r\n      if (Object(result) === result) return result;\r\n      return self;\r\n    };\r\n  };\r\n\r\n  // Partially apply a function by creating a version that has had some of its\r\n  // arguments pre-filled, without changing its dynamic `this` context.\r\n  _.partial = function(func) {\r\n    var args = slice.call(arguments, 1);\r\n    return function() {\r\n      return func.apply(this, args.concat(slice.call(arguments)));\r\n    };\r\n  };\r\n\r\n  // Bind all of an object's methods to that object. Useful for ensuring that\r\n  // all callbacks defined on an object belong to it.\r\n  _.bindAll = function(obj) {\r\n    var funcs = slice.call(arguments, 1);\r\n    if (funcs.length === 0) throw new Error(\"bindAll must be passed function names\");\r\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\r\n    return obj;\r\n  };\r\n\r\n  // Memoize an expensive function by storing its results.\r\n  _.memoize = function(func, hasher) {\r\n    var memo = {};\r\n    hasher || (hasher = _.identity);\r\n    return function() {\r\n      var key = hasher.apply(this, arguments);\r\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\r\n    };\r\n  };\r\n\r\n  // Delays a function for the given number of milliseconds, and then calls\r\n  // it with the arguments supplied.\r\n  _.delay = function(func, wait) {\r\n    var args = slice.call(arguments, 2);\r\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\r\n  };\r\n\r\n  // Defers a function, scheduling it to run after the current call stack has\r\n  // cleared.\r\n  _.defer = function(func) {\r\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\r\n  };\r\n\r\n  // Returns a function, that, when invoked, will only be triggered at most once\r\n  // during a given window of time. Normally, the throttled function will run\r\n  // as much as it can, without ever going more than once per `wait` duration;\r\n  // but if you'd like to disable the execution on the leading edge, pass\r\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\r\n  _.throttle = function(func, wait, options) {\r\n    var context, args, result;\r\n    var timeout = null;\r\n    var previous = 0;\r\n    options || (options = {});\r\n    var later = function() {\r\n      previous = options.leading === false ? 0 : new Date;\r\n      timeout = null;\r\n      result = func.apply(context, args);\r\n    };\r\n    return function() {\r\n      var now = new Date;\r\n      if (!previous && options.leading === false) previous = now;\r\n      var remaining = wait - (now - previous);\r\n      context = this;\r\n      args = arguments;\r\n      if (remaining <= 0) {\r\n        clearTimeout(timeout);\r\n        timeout = null;\r\n        previous = now;\r\n        result = func.apply(context, args);\r\n      } else if (!timeout && options.trailing !== false) {\r\n        timeout = setTimeout(later, remaining);\r\n      }\r\n      return result;\r\n    };\r\n  };\r\n\r\n  // Returns a function, that, as long as it continues to be invoked, will not\r\n  // be triggered. The function will be called after it stops being called for\r\n  // N milliseconds. If `immediate` is passed, trigger the function on the\r\n  // leading edge, instead of the trailing.\r\n  _.debounce = function(func, wait, immediate) {\r\n    var timeout, args, context, timestamp, result;\r\n    return function() {\r\n      context = this;\r\n      args = arguments;\r\n      timestamp = new Date();\r\n      var later = function() {\r\n        var last = (new Date()) - timestamp;\r\n        if (last < wait) {\r\n          timeout = setTimeout(later, wait - last);\r\n        } else {\r\n          timeout = null;\r\n          if (!immediate) result = func.apply(context, args);\r\n        }\r\n      };\r\n      var callNow = immediate && !timeout;\r\n      if (!timeout) {\r\n        timeout = setTimeout(later, wait);\r\n      }\r\n      if (callNow) result = func.apply(context, args);\r\n      return result;\r\n    };\r\n  };\r\n\r\n  // Returns a function that will be executed at most one time, no matter how\r\n  // often you call it. Useful for lazy initialization.\r\n  _.once = function(func) {\r\n    var ran = false, memo;\r\n    return function() {\r\n      if (ran) return memo;\r\n      ran = true;\r\n      memo = func.apply(this, arguments);\r\n      func = null;\r\n      return memo;\r\n    };\r\n  };\r\n\r\n  // Returns the first function passed as an argument to the second,\r\n  // allowing you to adjust arguments, run code before and after, and\r\n  // conditionally execute the original function.\r\n  _.wrap = function(func, wrapper) {\r\n    return function() {\r\n      var args = [func];\r\n      push.apply(args, arguments);\r\n      return wrapper.apply(this, args);\r\n    };\r\n  };\r\n\r\n  // Returns a function that is the composition of a list of functions, each\r\n  // consuming the return value of the function that follows.\r\n  _.compose = function() {\r\n    var funcs = arguments;\r\n    return function() {\r\n      var args = arguments;\r\n      for (var i = funcs.length - 1; i >= 0; i--) {\r\n        args = [funcs[i].apply(this, args)];\r\n      }\r\n      return args[0];\r\n    };\r\n  };\r\n\r\n  // Returns a function that will only be executed after being called N times.\r\n  _.after = function(times, func) {\r\n    return function() {\r\n      if (--times < 1) {\r\n        return func.apply(this, arguments);\r\n      }\r\n    };\r\n  };\r\n\r\n  // Object Functions\r\n  // ----------------\r\n\r\n  // Retrieve the names of an object's properties.\r\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\r\n  _.keys = nativeKeys || function(obj) {\r\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\r\n    var keys = [];\r\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\r\n    return keys;\r\n  };\r\n\r\n  // Retrieve the values of an object's properties.\r\n  _.values = function(obj) {\r\n    var keys = _.keys(obj);\r\n    var length = keys.length;\r\n    var values = new Array(length);\r\n    for (var i = 0; i < length; i++) {\r\n      values[i] = obj[keys[i]];\r\n    }\r\n    return values;\r\n  };\r\n\r\n  // Convert an object into a list of `[key, value]` pairs.\r\n  _.pairs = function(obj) {\r\n    var keys = _.keys(obj);\r\n    var length = keys.length;\r\n    var pairs = new Array(length);\r\n    for (var i = 0; i < length; i++) {\r\n      pairs[i] = [keys[i], obj[keys[i]]];\r\n    }\r\n    return pairs;\r\n  };\r\n\r\n  // Invert the keys and values of an object. The values must be serializable.\r\n  _.invert = function(obj) {\r\n    var result = {};\r\n    var keys = _.keys(obj);\r\n    for (var i = 0, length = keys.length; i < length; i++) {\r\n      result[obj[keys[i]]] = keys[i];\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Return a sorted list of the function names available on the object.\r\n  // Aliased as `methods`\r\n  _.functions = _.methods = function(obj) {\r\n    var names = [];\r\n    for (var key in obj) {\r\n      if (_.isFunction(obj[key])) names.push(key);\r\n    }\r\n    return names.sort();\r\n  };\r\n\r\n  // Extend a given object with all the properties in passed-in object(s).\r\n  _.extend = function(obj) {\r\n    each(slice.call(arguments, 1), function(source) {\r\n      if (source) {\r\n        for (var prop in source) {\r\n          obj[prop] = source[prop];\r\n        }\r\n      }\r\n    });\r\n    return obj;\r\n  };\r\n\r\n  // Return a copy of the object only containing the whitelisted properties.\r\n  _.pick = function(obj) {\r\n    var copy = {};\r\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\r\n    each(keys, function(key) {\r\n      if (key in obj) copy[key] = obj[key];\r\n    });\r\n    return copy;\r\n  };\r\n\r\n   // Return a copy of the object without the blacklisted properties.\r\n  _.omit = function(obj) {\r\n    var copy = {};\r\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\r\n    for (var key in obj) {\r\n      if (!_.contains(keys, key)) copy[key] = obj[key];\r\n    }\r\n    return copy;\r\n  };\r\n\r\n  // Fill in a given object with default properties.\r\n  _.defaults = function(obj) {\r\n    each(slice.call(arguments, 1), function(source) {\r\n      if (source) {\r\n        for (var prop in source) {\r\n          if (obj[prop] === void 0) obj[prop] = source[prop];\r\n        }\r\n      }\r\n    });\r\n    return obj;\r\n  };\r\n\r\n  // Create a (shallow-cloned) duplicate of an object.\r\n  _.clone = function(obj) {\r\n    if (!_.isObject(obj)) return obj;\r\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\r\n  };\r\n\r\n  // Invokes interceptor with the obj, and then returns obj.\r\n  // The primary purpose of this method is to \"tap into\" a method chain, in\r\n  // order to perform operations on intermediate results within the chain.\r\n  _.tap = function(obj, interceptor) {\r\n    interceptor(obj);\r\n    return obj;\r\n  };\r\n\r\n  // Internal recursive comparison function for `isEqual`.\r\n  var eq = function(a, b, aStack, bStack) {\r\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\r\n    // A strict comparison is necessary because `null == undefined`.\r\n    if (a == null || b == null) return a === b;\r\n    // Unwrap any wrapped objects.\r\n    if (a instanceof _) a = a._wrapped;\r\n    if (b instanceof _) b = b._wrapped;\r\n    // Compare `[[Class]]` names.\r\n    var className = toString.call(a);\r\n    if (className != toString.call(b)) return false;\r\n    switch (className) {\r\n      // Strings, numbers, dates, and booleans are compared by value.\r\n      case '[object String]':\r\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n        // equivalent to `new String(\"5\")`.\r\n        return a == String(b);\r\n      case '[object Number]':\r\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\r\n        // other numeric values.\r\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\r\n      case '[object Date]':\r\n      case '[object Boolean]':\r\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n        // millisecond representations. Note that invalid dates with millisecond representations\r\n        // of `NaN` are not equivalent.\r\n        return +a == +b;\r\n      // RegExps are compared by their source patterns and flags.\r\n      case '[object RegExp]':\r\n        return a.source == b.source &&\r\n               a.global == b.global &&\r\n               a.multiline == b.multiline &&\r\n               a.ignoreCase == b.ignoreCase;\r\n    }\r\n    if (typeof a != 'object' || typeof b != 'object') return false;\r\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n    var length = aStack.length;\r\n    while (length--) {\r\n      // Linear search. Performance is inversely proportional to the number of\r\n      // unique nested structures.\r\n      if (aStack[length] == a) return bStack[length] == b;\r\n    }\r\n    // Objects with different constructors are not equivalent, but `Object`s\r\n    // from different frames are.\r\n    var aCtor = a.constructor, bCtor = b.constructor;\r\n    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&\r\n                             _.isFunction(bCtor) && (bCtor instanceof bCtor))) {\r\n      return false;\r\n    }\r\n    // Add the first object to the stack of traversed objects.\r\n    aStack.push(a);\r\n    bStack.push(b);\r\n    var size = 0, result = true;\r\n    // Recursively compare objects and arrays.\r\n    if (className == '[object Array]') {\r\n      // Compare array lengths to determine if a deep comparison is necessary.\r\n      size = a.length;\r\n      result = size == b.length;\r\n      if (result) {\r\n        // Deep compare the contents, ignoring non-numeric properties.\r\n        while (size--) {\r\n          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\r\n        }\r\n      }\r\n    } else {\r\n      // Deep compare objects.\r\n      for (var key in a) {\r\n        if (_.has(a, key)) {\r\n          // Count the expected number of properties.\r\n          size++;\r\n          // Deep compare each member.\r\n          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\r\n        }\r\n      }\r\n      // Ensure that both objects contain the same number of properties.\r\n      if (result) {\r\n        for (key in b) {\r\n          if (_.has(b, key) && !(size--)) break;\r\n        }\r\n        result = !size;\r\n      }\r\n    }\r\n    // Remove the first object from the stack of traversed objects.\r\n    aStack.pop();\r\n    bStack.pop();\r\n    return result;\r\n  };\r\n\r\n  // Perform a deep comparison to check if two objects are equal.\r\n  _.isEqual = function(a, b) {\r\n    return eq(a, b, [], []);\r\n  };\r\n\r\n  // Is a given array, string, or object empty?\r\n  // An \"empty\" object has no enumerable own-properties.\r\n  _.isEmpty = function(obj) {\r\n    if (obj == null) return true;\r\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\r\n    for (var key in obj) if (_.has(obj, key)) return false;\r\n    return true;\r\n  };\r\n\r\n  // Is a given value a DOM element?\r\n  _.isElement = function(obj) {\r\n    return !!(obj && obj.nodeType === 1);\r\n  };\r\n\r\n  // Is a given value an array?\r\n  // Delegates to ECMA5's native Array.isArray\r\n  _.isArray = nativeIsArray || function(obj) {\r\n    return toString.call(obj) == '[object Array]';\r\n  };\r\n\r\n  // Is a given variable an object?\r\n  _.isObject = function(obj) {\r\n    return obj === Object(obj);\r\n  };\r\n\r\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\r\n  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\r\n    _['is' + name] = function(obj) {\r\n      return toString.call(obj) == '[object ' + name + ']';\r\n    };\r\n  });\r\n\r\n  // Define a fallback version of the method in browsers (ahem, IE), where\r\n  // there isn't any inspectable \"Arguments\" type.\r\n  if (!_.isArguments(arguments)) {\r\n    _.isArguments = function(obj) {\r\n      return !!(obj && _.has(obj, 'callee'));\r\n    };\r\n  }\r\n\r\n  // Optimize `isFunction` if appropriate.\r\n  if (typeof (/./) !== 'function') {\r\n    _.isFunction = function(obj) {\r\n      return typeof obj === 'function';\r\n    };\r\n  }\r\n\r\n  // Is a given object a finite number?\r\n  _.isFinite = function(obj) {\r\n    return isFinite(obj) && !isNaN(parseFloat(obj));\r\n  };\r\n\r\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\r\n  _.isNaN = function(obj) {\r\n    return _.isNumber(obj) && obj != +obj;\r\n  };\r\n\r\n  // Is a given value a boolean?\r\n  _.isBoolean = function(obj) {\r\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\r\n  };\r\n\r\n  // Is a given value equal to null?\r\n  _.isNull = function(obj) {\r\n    return obj === null;\r\n  };\r\n\r\n  // Is a given variable undefined?\r\n  _.isUndefined = function(obj) {\r\n    return obj === void 0;\r\n  };\r\n\r\n  // Shortcut function for checking if an object has a given property directly\r\n  // on itself (in other words, not on a prototype).\r\n  _.has = function(obj, key) {\r\n    return hasOwnProperty.call(obj, key);\r\n  };\r\n\r\n  // Utility Functions\r\n  // -----------------\r\n\r\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\r\n  // previous owner. Returns a reference to the Underscore object.\r\n  _.noConflict = function() {\r\n    root._ = previousUnderscore;\r\n    return this;\r\n  };\r\n\r\n  // Keep the identity function around for default iterators.\r\n  _.identity = function(value) {\r\n    return value;\r\n  };\r\n\r\n  // Run a function **n** times.\r\n  _.times = function(n, iterator, context) {\r\n    var accum = Array(Math.max(0, n));\r\n    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);\r\n    return accum;\r\n  };\r\n\r\n  // Return a random integer between min and max (inclusive).\r\n  _.random = function(min, max) {\r\n    if (max == null) {\r\n      max = min;\r\n      min = 0;\r\n    }\r\n    return min + Math.floor(Math.random() * (max - min + 1));\r\n  };\r\n\r\n  // List of HTML entities for escaping.\r\n  var entityMap = {\r\n    escape: {\r\n      '&': '&amp;',\r\n      '<': '&lt;',\r\n      '>': '&gt;',\r\n      '\"': '&quot;',\r\n      \"'\": '&#x27;'\r\n    }\r\n  };\r\n  entityMap.unescape = _.invert(entityMap.escape);\r\n\r\n  // Regexes containing the keys and values listed immediately above.\r\n  var entityRegexes = {\r\n    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),\r\n    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')\r\n  };\r\n\r\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\r\n  _.each(['escape', 'unescape'], function(method) {\r\n    _[method] = function(string) {\r\n      if (string == null) return '';\r\n      return ('' + string).replace(entityRegexes[method], function(match) {\r\n        return entityMap[method][match];\r\n      });\r\n    };\r\n  });\r\n\r\n  // If the value of the named `property` is a function then invoke it with the\r\n  // `object` as context; otherwise, return it.\r\n  _.result = function(object, property) {\r\n    if (object == null) return void 0;\r\n    var value = object[property];\r\n    return _.isFunction(value) ? value.call(object) : value;\r\n  };\r\n\r\n  // Add your own custom functions to the Underscore object.\r\n  _.mixin = function(obj) {\r\n    each(_.functions(obj), function(name) {\r\n      var func = _[name] = obj[name];\r\n      _.prototype[name] = function() {\r\n        var args = [this._wrapped];\r\n        push.apply(args, arguments);\r\n        return result.call(this, func.apply(_, args));\r\n      };\r\n    });\r\n  };\r\n\r\n  // Generate a unique integer id (unique within the entire client session).\r\n  // Useful for temporary DOM ids.\r\n  var idCounter = 0;\r\n  _.uniqueId = function(prefix) {\r\n    var id = ++idCounter + '';\r\n    return prefix ? prefix + id : id;\r\n  };\r\n\r\n  // By default, Underscore uses ERB-style template delimiters, change the\r\n  // following template settings to use alternative delimiters.\r\n  _.templateSettings = {\r\n    evaluate    : /<%([\\s\\S]+?)%>/g,\r\n    interpolate : /<%=([\\s\\S]+?)%>/g,\r\n    escape      : /<%-([\\s\\S]+?)%>/g\r\n  };\r\n\r\n  // When customizing `templateSettings`, if you don't want to define an\r\n  // interpolation, evaluation or escaping regex, we need one that is\r\n  // guaranteed not to match.\r\n  var noMatch = /(.)^/;\r\n\r\n  // Certain characters need to be escaped so that they can be put into a\r\n  // string literal.\r\n  var escapes = {\r\n    \"'\":      \"'\",\r\n    '\\\\':     '\\\\',\r\n    '\\r':     'r',\r\n    '\\n':     'n',\r\n    '\\t':     't',\r\n    '\\u2028': 'u2028',\r\n    '\\u2029': 'u2029'\r\n  };\r\n\r\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\r\n\r\n  // JavaScript micro-templating, similar to John Resig's implementation.\r\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\r\n  // and correctly escapes quotes within interpolated code.\r\n  _.template = function(text, data, settings) {\r\n    var render;\r\n    settings = _.defaults({}, settings, _.templateSettings);\r\n\r\n    // Combine delimiters into one regular expression via alternation.\r\n    var matcher = new RegExp([\r\n      (settings.escape || noMatch).source,\r\n      (settings.interpolate || noMatch).source,\r\n      (settings.evaluate || noMatch).source\r\n    ].join('|') + '|$', 'g');\r\n\r\n    // Compile the template source, escaping string literals appropriately.\r\n    var index = 0;\r\n    var source = \"__p+='\";\r\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\r\n      source += text.slice(index, offset)\r\n        .replace(escaper, function(match) { return '\\\\' + escapes[match]; });\r\n\r\n      if (escape) {\r\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\r\n      }\r\n      if (interpolate) {\r\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\r\n      }\r\n      if (evaluate) {\r\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\r\n      }\r\n      index = offset + match.length;\r\n      return match;\r\n    });\r\n    source += \"';\\n\";\r\n\r\n    // If a variable is not specified, place data values in local scope.\r\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\r\n\r\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\r\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\r\n      source + \"return __p;\\n\";\r\n\r\n    try {\r\n      render = new Function(settings.variable || 'obj', '_', source);\r\n    } catch (e) {\r\n      e.source = source;\r\n      throw e;\r\n    }\r\n\r\n    if (data) return render(data, _);\r\n    var template = function(data) {\r\n      return render.call(this, data, _);\r\n    };\r\n\r\n    // Provide the compiled function source as a convenience for precompilation.\r\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\r\n\r\n    return template;\r\n  };\r\n\r\n  // Add a \"chain\" function, which will delegate to the wrapper.\r\n  _.chain = function(obj) {\r\n    return _(obj).chain();\r\n  };\r\n\r\n  // OOP\r\n  // ---------------\r\n  // If Underscore is called as a function, it returns a wrapped object that\r\n  // can be used OO-style. This wrapper holds altered versions of all the\r\n  // underscore functions. Wrapped objects may be chained.\r\n\r\n  // Helper function to continue chaining intermediate results.\r\n  var result = function(obj) {\r\n    return this._chain ? _(obj).chain() : obj;\r\n  };\r\n\r\n  // Add all of the Underscore functions to the wrapper object.\r\n  _.mixin(_);\r\n\r\n  // Add all mutator Array functions to the wrapper.\r\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\r\n    var method = ArrayProto[name];\r\n    _.prototype[name] = function() {\r\n      var obj = this._wrapped;\r\n      method.apply(obj, arguments);\r\n      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];\r\n      return result.call(this, obj);\r\n    };\r\n  });\r\n\r\n  // Add all accessor Array functions to the wrapper.\r\n  each(['concat', 'join', 'slice'], function(name) {\r\n    var method = ArrayProto[name];\r\n    _.prototype[name] = function() {\r\n      return result.call(this, method.apply(this._wrapped, arguments));\r\n    };\r\n  });\r\n\r\n  _.extend(_.prototype, {\r\n\r\n    // Start chaining a wrapped Underscore object.\r\n    chain: function() {\r\n      this._chain = true;\r\n      return this;\r\n    },\r\n\r\n    // Extracts the result from a wrapped and chained object.\r\n    value: function() {\r\n      return this._wrapped;\r\n    }\r\n\r\n  });\r\n\r\n}).call(this);\r\n","// This exports object was created in pre.js.  Now copy the `_` object from it\r\n// into the package-scope variable `_`, which will get exported.\r\n_ = exports._;\r\n"]}