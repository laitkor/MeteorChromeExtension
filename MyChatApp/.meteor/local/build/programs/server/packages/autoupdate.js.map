{"version":3,"file":"\\packages\\autoupdate.js","sources":["autoupdate/autoupdate_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,mE;AACA,sE;AACA,iD;AACA,E;AACA,mE;AACA,qE;AACA,2C;AACA,E;AACA,qE;AACA,mE;AACA,gE;AACA,mE;AACA,gE;AACA,uB;AACA,E;AACA,gE;AACA,sB;AACA,E;AACA,4D;AACA,qE;AACA,sE;AACA,oD;AACA,E;AACA,oE;AACA,mE;AACA,qE;AACA,mE;AACA,e;AACA,E;AACA,iE;AACA,oE;AACA,oE;AACA,E;AACA,qE;AACA,mE;AACA,0D;;AAEA,gB;;AAEA,oE;AACA,iE;AACA,kE;AACA,qB;;AAEA,oC;;AAEA,4B;AACA,iE;AACA,4B;AACA,4C;AACA,kC;AACA,uC;AACA,kD;AACA,wB;;AAEA,oD;AACA,6E;AACA,G;;;AAGA,e;AACA,qC;AACA,e;AACA,oB;AACA,oE;AACA,qE;AACA,6C;AACA,uC;AACA,iB;AACA,2C;AACA,qC;AACA,uB;AACA,Q;AACA,mB;AACA,Y;AACA,mD;AACA,gF;AACA,K;AACA,I;AACA,iB;AACA,E","sourcesContent":["// Publish the current client version to the client.  When a client\r\n// sees the subscription change and that there is a new version of the\r\n// client available on the server, it can reload.\r\n//\r\n// By default the current client version is identified by a hash of\r\n// the client resources seen by the browser (the HTML, CSS, code, and\r\n// static files in the `public` directory).\r\n//\r\n// If the environment variable `AUTOUPDATE_VERSION` is set it will be\r\n// used as the client id instead.  You can use this to control when\r\n// the client reloads.  For example, if you want to only force a\r\n// reload on major changes, you can use a custom AUTOUPDATE_VERSION\r\n// which you only change when something worth pushing to clients\r\n// immediately happens.\r\n//\r\n// For backwards compatibility, SERVER_ID can be used instead of\r\n// AUTOUPDATE_VERSION.\r\n//\r\n// The server publishes a `meteor_autoupdate_clientVersions`\r\n// collection.  The contract of this collection is that each document\r\n// in the collection represents an acceptable client version, with the\r\n// `_id` field of the document set to the client id.\r\n//\r\n// An \"unacceptable\" client version, for example, might be a version\r\n// of the client code which has a severe UI bug, or is incompatible\r\n// with the server.  An \"acceptable\" client version could be one that\r\n// is older than the latest client code available on the server but\r\n// still works.\r\n//\r\n// One of the published documents in the collection will have its\r\n// `current` field set to `true`.  This is the version of the client\r\n// code that the browser will receive from the server if it reloads.\r\n//\r\n// In this implementation only one document is published, the current\r\n// client version.  Developers can easily experiment with different\r\n// versioning and updating models by forking this package.\r\n\r\nAutoupdate = {};\r\n\r\n// The client hash includes __meteor_runtime_config__, so wait until\r\n// all packages have loaded and have had a chance to populate the\r\n// runtime config before using the client hash as our default auto\r\n// update version id.\r\n\r\nAutoupdate.autoupdateVersion = null;\r\n\r\nMeteor.startup(function () {\r\n  // Allow people to override Autoupdate.autoupdateVersion before\r\n  // startup. Tests do this.\r\n  if (Autoupdate.autoupdateVersion === null)\r\n    Autoupdate.autoupdateVersion =\r\n      process.env.AUTOUPDATE_VERSION ||\r\n      process.env.SERVER_ID || // XXX COMPAT 0.6.6\r\n      WebApp.clientHash;\r\n\r\n  // Make autoupdateVersion available on the client.\r\n  __meteor_runtime_config__.autoupdateVersion = Autoupdate.autoupdateVersion;\r\n});\r\n\r\n\r\nMeteor.publish(\r\n  \"meteor_autoupdate_clientVersions\",\r\n  function () {\r\n    var self = this;\r\n    // Using `autoupdateVersion` here is safe because we can't get a\r\n    // subscription before webapp starts listening, and it doesn't do\r\n    // that until the startup hooks have run.\r\n    if (Autoupdate.autoupdateVersion) {\r\n      self.added(\r\n        \"meteor_autoupdate_clientVersions\",\r\n        Autoupdate.autoupdateVersion,\r\n        {current: true}\r\n      );\r\n      self.ready();\r\n    } else {\r\n      // huh? shouldn't happen. Just error the sub.\r\n      self.error(new Meteor.Error(500, \"Autoupdate.autoupdateVersion not set\"));\r\n    }\r\n  },\r\n  {is_auto: true}\r\n);\r\n"]}