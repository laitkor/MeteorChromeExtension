{"version":3,"file":"\\packages\\callback-hook.js","sources":["callback-hook/hook.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,mE;AACA,mC;AACA,+D;AACA,E;AACA,+D;AACA,E;AACA,qE;AACA,0D;AACA,sE;AACA,kD;AACA,E;AACA,qE;AACA,8D;AACA,2B;AACA,E;AACA,gE;AACA,yC;AACA,E;AACA,oE;AACA,+C;AACA,E;AACA,oE;AACA,mE;AACA,+D;AACA,sE;AACA,kE;AACA,wB;AACA,E;AACA,oE;AACA,qE;AACA,wD;AACA,wD;AACA,E;AACA,oE;AACA,gE;AACA,2D;;AAEA,2B;AACA,kB;AACA,0B;AACA,0B;AACA,sB;;AAEA,+B;AACA,qD;AACA,0C;AACA,mD;AACA,6E;AACA,yD;AACA,G;AACA,E;;AAEA,0B;AACA,iC;AACA,oB;;AAEA,sC;AACA,e;AACA,qD;AACA,+E;AACA,8E;AACA,+E;AACA,wB;AACA,O;AACA,M;;AAEA,mC;AACA,kC;;AAEA,Y;AACA,yB;AACA,kC;AACA,O;AACA,M;AACA,I;;AAEA,oE;AACA,uB;AACA,I;AACA,gE;AACA,mE;AACA,oD;AACA,I;AACA,sE;AACA,kC;AACA,I;AACA,6B;AACA,oB;;AAEA,8E;AACA,6E;AACA,gD;AACA,oC;;AAEA,qC;AACA,4C;AACA,sB;AACA,kE;AACA,sC;AACA,0C;;AAEA,iC;AACA,gB;AACA,O;AACA,K;AACA,G;AACA,G","sourcesContent":["// XXX This pattern is under development. Do not add more callsites\r\n// using this package for now. See:\r\n// https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f\r\n//\r\n// Encapsulates the pattern of registering callbacks on a hook.\r\n//\r\n// The `each` method of the hook calls its iterator function argument\r\n// with each registered callback.  This allows the hook to\r\n// conditionally decide not to call the callback (if, for example, the\r\n// observed object has been closed or terminated).\r\n//\r\n// Callbacks are bound with `Meteor.bindEnvironment`, so they will be\r\n// called with the Meteor environment of the calling code that\r\n// registered the callback.\r\n//\r\n// Registering a callback returns an object with a single `stop`\r\n// method which unregisters the callback.\r\n//\r\n// The code is careful to allow a callback to be safely unregistered\r\n// while the callbacks are being iterated over.\r\n//\r\n// If the hook is configured with the `exceptionHandler` option, the\r\n// handler will be called if a called callback throws an exception.\r\n// By default (if the exception handler doesn't itself throw an\r\n// exception, or if the iterator function doesn't return a falsy value\r\n// to terminate the calling of callbacks), the remaining callbacks\r\n// will still be called.\r\n//\r\n// Alternatively, the `debugPrintExceptions` option can be specified\r\n// as string describing the callback.  On an exception the string and\r\n// the exception will be printed to the console log with\r\n// `Meteor._debug`, and the exception otherwise ignored.\r\n//\r\n// If an exception handler isn't specified, exceptions thrown in the\r\n// callback will propagate up to the iterator function, and will\r\n// terminate calling the remaining callbacks if not caught.\r\n\r\nHook = function (options) {\r\n  var self = this;\r\n  options = options || {};\r\n  self.nextCallbackId = 0;\r\n  self.callbacks = {};\r\n\r\n  if (options.exceptionHandler)\r\n    self.exceptionHandler = options.exceptionHandler;\r\n  else if (options.debugPrintExceptions) {\r\n    if (! _.isString(options.debugPrintExceptions))\r\n      throw new Error(\"Hook option debugPrintExceptions should be a string\");\r\n    self.exceptionHandler = options.debugPrintExceptions;\r\n  }\r\n};\r\n\r\n_.extend(Hook.prototype, {\r\n  register: function (callback) {\r\n    var self = this;\r\n\r\n    callback = Meteor.bindEnvironment(\r\n      callback,\r\n      self.exceptionHandler || function (exception) {\r\n        // Note: this relies on the undocumented fact that if bindEnvironment's\r\n        // onException throws, and you are invoking the callback either in the\r\n        // browser or from within a Fiber in Node, the exception is propagated.\r\n        throw exception;\r\n      }\r\n    );\r\n\r\n    var id = self.nextCallbackId++;\r\n    self.callbacks[id] = callback;\r\n\r\n    return {\r\n      stop: function () {\r\n        delete self.callbacks[id];\r\n      }\r\n    };\r\n  },\r\n\r\n  // For each registered callback, call the passed iterator function\r\n  // with the callback.\r\n  //\r\n  // The iterator function can choose whether or not to call the\r\n  // callback.  (For example, it might not call the callback if the\r\n  // observed object has been closed or terminated).\r\n  //\r\n  // The iteration is stopped if the iterator function returns a falsy\r\n  // value or throws an exception.\r\n  //\r\n  each: function (iterator) {\r\n    var self = this;\r\n\r\n    // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't\r\n    // run them to completion (and exceptions thrown from onException are not\r\n    // propagated), so we need to be in a Fiber.\r\n    Meteor._nodeCodeMustBeInFiber();\r\n\r\n    var ids = _.keys(self.callbacks);\r\n    for (var i = 0;  i < ids.length;  ++i) {\r\n      var id = ids[i];\r\n      // check to see if the callback was removed during iteration\r\n      if (_.has(self.callbacks, id)) {\r\n        var callback = self.callbacks[id];\r\n\r\n        if (! iterator(callback))\r\n          break;\r\n      }\r\n    }\r\n  }\r\n});\r\n"]}