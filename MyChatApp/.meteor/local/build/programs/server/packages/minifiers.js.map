{"version":3,"file":"\\packages\\minifiers.js","sources":["minifiers/minification.js","minifiers/minifiers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,qC;AACA,2B;AACA,wB;AACA,E;;AAEA,mC;AACA,yC;AACA,E;;AAEA,iC;AACA,e;;AAEA,2D;AACA,6C;AACA,G;;AAEA,a;AACA,E;;AAEA,4B;AACA,wB;AACA,uD;AACA,c;AACA,E;;AAEA,kB;;AAEA,mC;AACA,iC;AACA,E;;AAEA,kC;AACA,6D;AACA,E;;AAEA,iC;AACA,0D;AACA,e;AACA,0B;AACA,gB;AACA,E;;AAEA,oC;AACA,oE;;AAEA,uC;AACA,e;AACA,0B;AACA,gB;AACA,E;;AAEA,mC;AACA,+D;AACA,E;;AAEA,qC;AACA,mE;AACA,E;;AAEA,mC;AACA,gE;AACA,e;AACA,0B;AACA,gB;AACA,E;;AAEA,qC;AACA,iB;AACA,yB;AACA,kB;AACA,qC;AACA,e;AACA,8B;AACA,gB;AACA,E;;AAEA,oC;AACA,gC;;AAEA,yD;AACA,e;AACA,qB;AACA,gB;AACA,E;;AAEA,gC;AACA,iC;AACA,+B;AACA,S;;AAEA,kD;AACA,e;AACA,iC;AACA,gB;AACA,E;;AAEA,uC;AACA,gD;AACA,e;AACA,iC;AACA,gB;AACA,E;;AAEA,gC;AACA,gC;AACA,+B;;AAEA,0D;AACA,yD;AACA,qD;AACA,wC;AACA,4C;AACA,8C;AACA,K;AACA,uD;AACA,e;AACA,qB;AACA,gB;AACA,E;;AAEA,6C;AACA,yB;;AAEA,4C;AACA,iC;AACA,uD;AACA,gC;AACA,iB;AACA,kC;AACA,O;AACA,uD;AACA,gC;AACA,iB;AACA,kC;AACA,O;AACA,G;AACA,kC;AACA,kE;AACA,yD;AACA,mC;AACA,E;;;;;;;;;;;;;;;;;;;;;AC7IA,iD;;AAEA,wC;AACA,gD;AACA,+B;AACA,6B;;AAEA,Y;AACA,qB;AACA,6B;AACA,iC;AACA,oD;AACA,I;AACA,mC;AACA,6B;AACA,I;AACA,4C;AACA,2C;AACA,6B;AACA,wB;AACA,8B;AACA,4C;AACA,O;AACA,M;;AAEA,kE;AACA,6E;AACA,6E;AACA,kB;AACA,yB;AACA,+B;AACA,M;;AAEA,oC;AACA,2E;AACA,uD;AACA,uD;AACA,6D;;AAEA,+C;AACA,8E;AACA,yC;AACA,sD;AACA,W;AACA,oH;AACA,O;;AAEA,2D;AACA,iE;AACA,0B;AACA,2D;AACA,+E;AACA,0B;AACA,gB;AACA,S;;AAEA,mC;;AAEA,gE;AACA,wE;;AAEA,+E;AACA,8E;AACA,kE;AACA,kC;AACA,iJ;AACA,O;;AAEA,O;;AAEA,wD;AACA,oC;AACA,+B;AACA,6D;AACA,O;;AAEA,kB;AACA,I;;AAEA,6E;AACA,yE;AACA,iD;AACA,+E;AACA,yC;AACA,kC;;AAEA,qC;AACA,4C;AACA,M;;AAEA,4D;AACA,wD;;AAEA,+E;AACA,gF;AACA,4E;AACA,8E;AACA,6E;AACA,gF;AACA,0E;AACA,4E;AACA,8C;AACA,yB;;AAEA,yE;AACA,wE;AACA,sC;;AAEA,gF;AACA,oC;AACA,2E;AACA,gE;AACA,yE;AACA,6D;AACA,iD;AACA,+B;AACA,4B;AACA,yC;;AAEA,sD;AACA,8E;AACA,kC;AACA,wE;AACA,8D;AACA,8E;AACA,mC;AACA,oE;AACA,a;AACA,sE;AACA,wD;AACA,W;AACA,S;;AAEA,kC;AACA,S;AACA,O;AACA,G;AACA,E","sourcesContent":["\r\n// Stringifier based on css-stringify\r\nvar emit = function (str) {\r\n  return str.toString();\r\n};\r\n\r\nvar visit = function (node, last) {\r\n  return traverse[node.type](node, last);\r\n};\r\n\r\nvar mapVisit = function (nodes) {\r\n  var buf = \"\";\r\n\r\n  for (var i = 0, length = nodes.length; i < length; i++) {\r\n    buf += visit(nodes[i], i === length - 1);\r\n  }\r\n\r\n  return buf;\r\n};\r\n\r\nMinifyAst = function(node) {\r\n  return node.stylesheet\r\n    .rules.map(function (rule) { return visit(rule); })\r\n    .join('');\r\n};\r\n\r\nvar traverse = {};\r\n\r\ntraverse.comment = function(node) {\r\n  return emit('', node.position);\r\n};\r\n\r\ntraverse.import = function(node) {\r\n  return emit('@import ' + node.import + ';', node.position);\r\n};\r\n\r\ntraverse.media = function(node) {\r\n  return emit('@media ' + node.media, node.position, true)\r\n    + emit('{')\r\n    + mapVisit(node.rules)\r\n    + emit('}');\r\n};\r\n\r\ntraverse.document = function(node) {\r\n  var doc = '@' + (node.vendor || '') + 'document ' + node.document;\r\n\r\n  return emit(doc, node.position, true)\r\n    + emit('{')\r\n    + mapVisit(node.rules)\r\n    + emit('}');\r\n};\r\n\r\ntraverse.charset = function(node) {\r\n  return emit('@charset ' + node.charset + ';', node.position);\r\n};\r\n\r\ntraverse.namespace = function(node) {\r\n  return emit('@namespace ' + node.namespace + ';', node.position);\r\n};\r\n\r\ntraverse.supports = function(node){\r\n  return emit('@supports ' + node.supports, node.position, true)\r\n    + emit('{')\r\n    + mapVisit(node.rules)\r\n    + emit('}');\r\n};\r\n\r\ntraverse.keyframes = function(node) {\r\n  return emit('@'\r\n    + (node.vendor || '')\r\n    + 'keyframes '\r\n    + node.name, node.position, true)\r\n    + emit('{')\r\n    + mapVisit(node.keyframes)\r\n    + emit('}');\r\n};\r\n\r\ntraverse.keyframe = function(node) {\r\n  var decls = node.declarations;\r\n\r\n  return emit(node.values.join(','), node.position, true)\r\n    + emit('{')\r\n    + mapVisit(decls)\r\n    + emit('}');\r\n};\r\n\r\ntraverse.page = function(node) {\r\n  var sel = node.selectors.length\r\n    ? node.selectors.join(', ')\r\n    : '';\r\n\r\n  return emit('@page ' + sel, node.position, true)\r\n    + emit('{')\r\n    + mapVisit(node.declarations)\r\n    + emit('}');\r\n};\r\n\r\ntraverse['font-face'] = function(node){\r\n  return emit('@font-face', node.position, true)\r\n    + emit('{')\r\n    + mapVisit(node.declarations)\r\n    + emit('}');\r\n};\r\n\r\ntraverse.rule = function(node) {\r\n  var decls = node.declarations;\r\n  if (!decls.length) return '';\r\n\r\n  var selectors = node.selectors.map(function (selector) {\r\n    // removes universal selectors like *.class => .class\r\n    // removes optional whitespace around '>' and '+'\r\n    return selector.replace(/\\*\\./, '.')\r\n                   .replace(/\\s*>\\s*/g, '>')\r\n                   .replace(/\\s*\\+\\s*/g, '+');\r\n  });\r\n  return emit(selectors.join(','), node.position, true)\r\n    + emit('{')\r\n    + mapVisit(decls)\r\n    + emit('}');\r\n};\r\n\r\ntraverse.declaration = function(node, last) {\r\n  var value = node.value;\r\n\r\n  // remove optional quotes around font name\r\n  if (node.property === 'font') {\r\n    value = value.replace(/\\'[^\\']+\\'/g, function (m) {\r\n      if (m.indexOf(' ') !== -1)\r\n        return m;\r\n      return m.replace(/\\'/g, '');\r\n    });\r\n    value = value.replace(/\\\"[^\\\"]+\\\"/g, function (m) {\r\n      if (m.indexOf(' ') !== -1)\r\n        return m;\r\n      return m.replace(/\\\"/g, '');\r\n    });\r\n  }\r\n  // remove url quotes if possible\r\n  // in case it is the last declaration, we can omit the semicolon\r\n  return emit(node.property + ':' + value, node.position)\r\n         + (last ? '' : emit(';'));\r\n};\r\n\r\n\r\n","UglifyJSMinify = Npm.require('uglify-js').minify;\r\n\r\nvar cssParse = Npm.require('css-parse');\r\nvar cssStringify = Npm.require('css-stringify');\r\nvar path = Npm.require('path');\r\nvar url = Npm.require('url');\r\n\r\nCssTools = {\r\n  parseCss: cssParse,\r\n  stringifyCss: cssStringify,\r\n  minifyCss: function (cssText) {\r\n    return CssTools.minifyCssAst(cssParse(cssText));\r\n  },\r\n  minifyCssAst: function (cssAst) {\r\n    return MinifyAst(cssAst);\r\n  },\r\n  mergeCssAsts: function (cssAsts, warnCb) {\r\n    var rulesPredicate = function (rules) {\r\n      if (! _.isArray(rules))\r\n        rules = [rules];\r\n      return function (node) {\r\n        return _.contains(rules, node.type);\r\n      }\r\n    };\r\n\r\n    // Simple concatenation of CSS files would break @import rules\r\n    // located in the beginning of a file. Before concatenation, pull them to\r\n    // the beginning of a new syntax tree so they always precede other rules.\r\n    var newAst = {\r\n      type: 'stylesheet',\r\n      stylesheet: { rules: [] }\r\n    };\r\n\r\n    _.each(cssAsts, function (ast) {\r\n      // Pick only the imports from the beginning of file ignoring @charset\r\n      // rules as every file is assumed to be in UTF-8.\r\n      var charsetRules = _.filter(ast.stylesheet.rules,\r\n                                  rulesPredicate(\"charset\"));\r\n\r\n      if (_.any(charsetRules, function (rule) {\r\n        // According to MDN, only 'UTF-8' and \"UTF-8\" are the correct encoding\r\n        // directives representing UTF-8.\r\n        return ! /^(['\"])UTF-8\\1$/.test(rule.charset);\r\n      })) {\r\n        warnCb(ast.filename, \"@charset rules in this file will be ignored as UTF-8 is the only encoding supported\");\r\n      }\r\n\r\n      ast.stylesheet.rules = _.reject(ast.stylesheet.rules,\r\n                                      rulesPredicate(\"charset\"));\r\n      var importCount = 0;\r\n      for (var i = 0; i < ast.stylesheet.rules.length; i++)\r\n        if (! rulesPredicate([\"import\", \"comment\"])(ast.stylesheet.rules[i])) {\r\n          importCount = i;\r\n          break;\r\n        }\r\n\r\n      CssTools.rewriteCssUrls(ast);\r\n\r\n      var imports = ast.stylesheet.rules.splice(0, importCount);\r\n      newAst.stylesheet.rules = newAst.stylesheet.rules.concat(imports);\r\n\r\n      // if there are imports left in the middle of file, warn user as it might\r\n      // be a potential bug (imports are valid only in the beginning of file).\r\n      if (_.any(ast.stylesheet.rules, rulesPredicate(\"import\"))) {\r\n        // XXX make this an error?\r\n        warnCb(ast.filename, \"there are some @import rules those are not taking effect as they are required to be in the beginning of the file\");\r\n      }\r\n\r\n    });\r\n\r\n    // Now we can put the rest of CSS rules into new AST\r\n    _.each(cssAsts, function (ast) {\r\n      newAst.stylesheet.rules =\r\n        newAst.stylesheet.rules.concat(ast.stylesheet.rules);\r\n    });\r\n\r\n    return newAst;\r\n  },\r\n\r\n  // We are looking for all relative urls defined with the `url()` functional\r\n  // notation and rewriting them to the equivalent absolute url using the\r\n  // `position.source` path provided by css-parse\r\n  // For performance reasons this function acts by side effect by modifying the\r\n  // given AST without doing a deep copy.\r\n  rewriteCssUrls: function (ast) {\r\n\r\n    var isRelative = function(path) {\r\n      return path && path.charAt(0) !== '/';\r\n    };\r\n\r\n    _.each(ast.stylesheet.rules, function(rule, ruleIndex) {\r\n      var basePath = path.dirname(rule.position.source);\r\n\r\n      // Set the correct basePath based on how the linked asset will be served.\r\n      // XXX This is wrong. We are coupling the information about how files will\r\n      // be served by the web server to the information how they were stored\r\n      // originally on the filesystem in the project structure. Ideally, there\r\n      // should be some module that tells us precisely how each asset will be\r\n      // served but for now we are just assuming that everything that comes from\r\n      // a folder starting with \"/packages/\" is served on the same path as\r\n      // it was on the filesystem and everything else is served on root \"/\".\r\n      if (! basePath.match(/^\\/?packages\\//i))\r\n          basePath = \"/\";\r\n\r\n      _.each(rule.declarations, function(declaration, declarationIndex) {\r\n        var parts, resource, absolutePath, quotes, oldCssUrl, newCssUrl;\r\n        var value = declaration.value;\r\n\r\n        // Match css values containing some functional calls to `url(URI)` where\r\n        // URI is optionally quoted.\r\n        // Note that a css value can contains other elements, for instance:\r\n        //   background: top center url(\"background.png\") black;\r\n        // or even multiple url(), for instance for multiple backgrounds.\r\n        var cssUrlRegex = /url\\s*\\(\\s*(['\"]?)(.+?)\\1\\s*\\)/gi;\r\n        while (parts = cssUrlRegex.exec(value)) {\r\n          oldCssUrl = parts[0];\r\n          quotes = parts[1];\r\n          resource = url.parse(parts[2]);\r\n\r\n          // Rewrite relative paths to absolute paths.\r\n          // We don't rewrite urls starting with a protocol definition such as\r\n          // http, https, or data.\r\n          if (isRelative(resource.path) && resource.protocol === null) {\r\n            absolutePath = path.join(basePath, resource.path);\r\n            // path.join() shouldn't be used on url paths. Fix up any slashes.\r\n            if (path.sep !== '/') {\r\n              absolutePath = absolutePath.split(path.sep).join('/');\r\n            }\r\n            newCssUrl = \"url(\" + quotes + absolutePath + quotes + \")\";\r\n            value = value.replace(oldCssUrl, newCssUrl);\r\n          }\r\n        }\r\n\r\n        declaration.value = value;\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\n"]}