{"version":3,"file":"\\packages\\random.js","sources":["random/random.js","random/deprecated.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,gF;AACA,2E;AACA,4E;AACA,6E;AACA,2E;AACA,2E;AACA,gF;AACA,gC;;AAEA,oB;AACA,yC;;AAEA,qE;AACA,iD;AACA,wB;AACA,mB;AACA,uB;;AAEA,+B;AACA,6B;AACA,6C;AACA,gC;AACA,wC;AACA,oB;AACA,e;AACA,e;AACA,oB;AACA,e;AACA,qC;AACA,O;AACA,yD;AACA,M;;AAEA,8B;AACA,gB;AACA,G;;AAEA,2B;AACA,e;AACA,e;AACA,e;AACA,c;;AAEA,2B;AACA,yB;AACA,K;AACA,sB;AACA,mB;AACA,mB;AACA,mB;;AAEA,2C;AACA,0B;AACA,mB;AACA,gB;AACA,O;AACA,0B;AACA,mB;AACA,gB;AACA,O;AACA,0B;AACA,mB;AACA,gB;AACA,O;AACA,K;AACA,gB;;AAEA,6B;AACA,iE;AACA,c;AACA,c;AACA,kC;AACA,M;AACA,gC;AACA,4C;AACA,M;AACA,iC;AACA,uB;AACA,oE;AACA,M;AACA,gC;AACA,uB;AACA,kB;;AAEA,6C;AACA,E;;AAEA,mF;AACA,2E;AACA,iB;;AAEA,8E;AACA,0E;AACA,6E;AACA,yC;AACA,4C;AACA,kB;AACA,8B;AACA,4C;AACA,E;;AAEA,kD;AACA,kB;AACA,kB;AACA,uB;AACA,0B;AACA,oD;AACA,uD;AACA,8D;AACA,6C;AACA,mC;AACA,yC;AACA,sD;AACA,U;AACA,qD;AACA,G;AACA,E;;AAEA,yD;AACA,kB;AACA,kC;AACA,yC;AACA,c;AACA,mE;AACA,qD;AACA,S;AACA,+C;AACA,iB;AACA,kE;AACA,qD;AACA,K;AACA,uC;AACA,2E;AACA,wD;AACA,uC;AACA,U;AACA,uB;AACA,sC;AACA,sD;AACA,K;AACA,8B;AACA,G;AACA,E;;AAEA,+D;AACA,+D;AACA,kB;AACA,kB;AACA,wC;AACA,sC;AACA,G;AACA,yB;AACA,E;;AAEA,sD;AACA,kB;AACA,uE;AACA,4B;AACA,+B;AACA,oB;;AAEA,4D;AACA,E;;AAEA,0D;AACA,kB;AACA,mE;AACA,e;AACA,+B;AACA,oB;AACA,sD;AACA,E;;AAEA,6D;AACA,iE;AACA,wC;AACA,0C;AACA,M;AACA,gC;AACA,E;;AAEA,8E;AACA,sC;;AAEA,iB;AACA,qE;AACA,sC;AACA,kC;AACA,mD;AACA,sC;AACA,uB;AACA,wC;AACA,Q;;AAEA,mE;AACA,sC;AACA,kC;AACA,kD;AACA,sC;AACA,uB;AACA,uC;AACA,Q;;AAEA,4E;;AAEA,iB;AACA,qC;AACA,qD;AACA,iC;AACA,I;AACA,kF;;AAEA,sC;AACA,+B;AACA,8C;AACA,G;AACA,wC;AACA,E;;;;;;;;;;;;;;;;;;;ACzNA,iE;AACA,gE;AACA,oB;AACA,wB;AACA,2B;AACA,sC;AACA,a;AACA,gC;AACA,qC;AACA,G;AACA,c;AACA,iE;AACA,qC;;AAEA,wB;AACA,c;AACA,E","sourcesContent":["// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,\r\n// window.crypto.getRandomValues() in the browser) when available. If these\r\n// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically\r\n// strong, and we seed it with various sources such as the date, Math.random,\r\n// and window size on the client.  When using crypto.getRandomValues(), our\r\n// primitive is hexString(), from which we construct fraction(). When using\r\n// window.crypto.getRandomValues() or alea, the primitive is fraction and we use\r\n// that to construct hex string.\r\n\r\nif (Meteor.isServer)\r\n  var nodeCrypto = Npm.require('crypto');\r\n\r\n// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript\r\n// for a full discussion and Alea implementation.\r\nvar Alea = function () {\r\n  function Mash() {\r\n    var n = 0xefc8249d;\r\n\r\n    var mash = function(data) {\r\n      data = data.toString();\r\n      for (var i = 0; i < data.length; i++) {\r\n        n += data.charCodeAt(i);\r\n        var h = 0.02519603282416938 * n;\r\n        n = h >>> 0;\r\n        h -= n;\r\n        h *= n;\r\n        n = h >>> 0;\r\n        h -= n;\r\n        n += h * 0x100000000; // 2^32\r\n      }\r\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\r\n    };\r\n\r\n    mash.version = 'Mash 0.9';\r\n    return mash;\r\n  }\r\n\r\n  return (function (args) {\r\n    var s0 = 0;\r\n    var s1 = 0;\r\n    var s2 = 0;\r\n    var c = 1;\r\n\r\n    if (args.length == 0) {\r\n      args = [+new Date];\r\n    }\r\n    var mash = Mash();\r\n    s0 = mash(' ');\r\n    s1 = mash(' ');\r\n    s2 = mash(' ');\r\n\r\n    for (var i = 0; i < args.length; i++) {\r\n      s0 -= mash(args[i]);\r\n      if (s0 < 0) {\r\n        s0 += 1;\r\n      }\r\n      s1 -= mash(args[i]);\r\n      if (s1 < 0) {\r\n        s1 += 1;\r\n      }\r\n      s2 -= mash(args[i]);\r\n      if (s2 < 0) {\r\n        s2 += 1;\r\n      }\r\n    }\r\n    mash = null;\r\n\r\n    var random = function() {\r\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\r\n      s0 = s1;\r\n      s1 = s2;\r\n      return s2 = t - (c = t | 0);\r\n    };\r\n    random.uint32 = function() {\r\n      return random() * 0x100000000; // 2^32\r\n    };\r\n    random.fract53 = function() {\r\n      return random() +\r\n        (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\r\n    };\r\n    random.version = 'Alea 0.9';\r\n    random.args = args;\r\n    return random;\r\n\r\n  } (Array.prototype.slice.call(arguments)));\r\n};\r\n\r\nvar UNMISTAKABLE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\";\r\nvar BASE64_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\r\n  \"0123456789-_\";\r\n\r\n// If seeds are provided, then the alea PRNG will be used, since cryptographic\r\n// PRNGs (Node crypto and window.crypto.getRandomValues) don't allow us to\r\n// specify seeds. The caller is responsible for making sure to provide a seed\r\n// for alea if a csprng is not available.\r\nvar RandomGenerator = function (seedArray) {\r\n  var self = this;\r\n  if (seedArray !== undefined)\r\n    self.alea = Alea.apply(null, seedArray);\r\n};\r\n\r\nRandomGenerator.prototype.fraction = function () {\r\n  var self = this;\r\n  if (self.alea) {\r\n    return self.alea();\r\n  } else if (nodeCrypto) {\r\n    var numerator = parseInt(self.hexString(8), 16);\r\n    return numerator * 2.3283064365386963e-10; // 2^-32\r\n  } else if (typeof window !== \"undefined\" && window.crypto &&\r\n             window.crypto.getRandomValues) {\r\n    var array = new Uint32Array(1);\r\n    window.crypto.getRandomValues(array);\r\n    return array[0] * 2.3283064365386963e-10; // 2^-32\r\n  } else {\r\n    throw new Error('No random generator available');\r\n  }\r\n};\r\n\r\nRandomGenerator.prototype.hexString = function (digits) {\r\n  var self = this;\r\n  if (nodeCrypto && ! self.alea) {\r\n    var numBytes = Math.ceil(digits / 2);\r\n    var bytes;\r\n    // Try to get cryptographically strong randomness. Fall back to\r\n    // non-cryptographically strong if not available.\r\n    try {\r\n      bytes = nodeCrypto.randomBytes(numBytes);\r\n    } catch (e) {\r\n      // XXX should re-throw any error except insufficient entropy\r\n      bytes = nodeCrypto.pseudoRandomBytes(numBytes);\r\n    }\r\n    var result = bytes.toString(\"hex\");\r\n    // If the number of digits is odd, we'll have generated an extra 4 bits\r\n    // of randomness, so we need to trim the last digit.\r\n    return result.substring(0, digits);\r\n  } else {\r\n    var hexDigits = [];\r\n    for (var i = 0; i < digits; ++i) {\r\n      hexDigits.push(self.choice(\"0123456789abcdef\"));\r\n    }\r\n    return hexDigits.join('');\r\n  }\r\n};\r\n\r\nRandomGenerator.prototype._randomString = function (charsCount,\r\n                                                    alphabet) {\r\n  var self = this;\r\n  var digits = [];\r\n  for (var i = 0; i < charsCount; i++) {\r\n    digits[i] = self.choice(alphabet);\r\n  }\r\n  return digits.join(\"\");\r\n};\r\n\r\nRandomGenerator.prototype.id = function (charsCount) {\r\n  var self = this;\r\n  // 17 characters is around 96 bits of entropy, which is the amount of\r\n  // state in the Alea PRNG.\r\n  if (charsCount === undefined)\r\n    charsCount = 17;\r\n\r\n  return self._randomString(charsCount, UNMISTAKABLE_CHARS);\r\n};\r\n\r\nRandomGenerator.prototype.secret = function (charsCount) {\r\n  var self = this;\r\n  // Default to 256 bits of entropy, or 43 characters at 6 bits per\r\n  // character.\r\n  if (charsCount === undefined)\r\n    charsCount = 43;\r\n  return self._randomString(charsCount, BASE64_CHARS);\r\n};\r\n\r\nRandomGenerator.prototype.choice = function (arrayOrString) {\r\n  var index = Math.floor(this.fraction() * arrayOrString.length);\r\n  if (typeof arrayOrString === \"string\")\r\n    return arrayOrString.substr(index, 1);\r\n  else\r\n    return arrayOrString[index];\r\n};\r\n\r\n// instantiate RNG.  Heuristically collect entropy from various sources when a\r\n// cryptographic PRNG isn't available.\r\n\r\n// client sources\r\nvar height = (typeof window !== 'undefined' && window.innerHeight) ||\r\n      (typeof document !== 'undefined'\r\n       && document.documentElement\r\n       && document.documentElement.clientHeight) ||\r\n      (typeof document !== 'undefined'\r\n       && document.body\r\n       && document.body.clientHeight) ||\r\n      1;\r\n\r\nvar width = (typeof window !== 'undefined' && window.innerWidth) ||\r\n      (typeof document !== 'undefined'\r\n       && document.documentElement\r\n       && document.documentElement.clientWidth) ||\r\n      (typeof document !== 'undefined'\r\n       && document.body\r\n       && document.body.clientWidth) ||\r\n      1;\r\n\r\nvar agent = (typeof navigator !== 'undefined' && navigator.userAgent) || \"\";\r\n\r\nif (nodeCrypto ||\r\n    (typeof window !== \"undefined\" &&\r\n     window.crypto && window.crypto.getRandomValues))\r\n  Random = new RandomGenerator();\r\nelse\r\n  Random = new RandomGenerator([new Date(), height, width, agent, Math.random()]);\r\n\r\nRandom.createWithSeeds = function () {\r\n  if (arguments.length === 0) {\r\n    throw new Error('No seeds were provided');\r\n  }\r\n  return new RandomGenerator(arguments);\r\n};\r\n","// Before this package existed, we used to use this Meteor.uuid()\r\n// implementing the RFC 4122 v4 UUID. It is no longer documented\r\n// and will go away.\r\n// XXX COMPAT WITH 0.5.6\r\nMeteor.uuid = function () {\r\n  var HEX_DIGITS = \"0123456789abcdef\";\r\n  var s = [];\r\n  for (var i = 0; i < 36; i++) {\r\n    s[i] = Random.choice(HEX_DIGITS);\r\n  }\r\n  s[14] = \"4\";\r\n  s[19] = HEX_DIGITS.substr((parseInt(s[19],16) & 0x3) | 0x8, 1);\r\n  s[8] = s[13] = s[18] = s[23] = \"-\";\r\n\r\n  var uuid = s.join(\"\");\r\n  return uuid;\r\n};\r\n"]}